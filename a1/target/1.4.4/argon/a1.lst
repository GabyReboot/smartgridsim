
/Users/gaby/Desktop/gridsim2/a1/target/1.4.4/argon/a1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004934  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000189f8  2**0
                  CONTENTS
  4 .data         0000007c  2003e2ec  000d8950  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000488  2003e368  2003e368  0001e368  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d89cc  000d89cc  000189cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d89f4  000d89f4  000189f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f4fac  00000000  00000000  000189f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012895  00000000  00000000  0010d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000220fe  00000000  00000000  00120239  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b48  00000000  00000000  00142337  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004f00  00000000  00000000  00144e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035bb4  00000000  00000000  00149d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a439  00000000  00000000  0017f933  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104ea9  00000000  00000000  001a9d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dfb0  00000000  00000000  002aec18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fef0 	bl	d7e12 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ff10 	bl	d7e5e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2ec 	.word	0x2003e2ec
   d4048:	000d8950 	.word	0x000d8950
   d404c:	2003e368 	.word	0x2003e368
   d4050:	2003e368 	.word	0x2003e368
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fc8f 	bl	d797c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d894c 	.word	0x000d894c
   d4080:	000d8910 	.word	0x000d8910

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b87e 	b.w	d4184 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f929 	bl	d42e0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bc41 	b.w	d7918 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be73 	b.w	d4d80 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 be71 	b.w	d4d80 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 be77 	b.w	d4d90 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 be75 	b.w	d4d90 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fdb0 	bl	d4c14 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d48c5 	.word	0x000d48c5

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z8resetAll6String>:
    delay(3000);
}

//cloud commands

int resetAll(String empty){
   d40d8:	b508      	push	{r3, lr}
    Mesh.publish("PowerNet", "RESET");
   d40da:	4a05      	ldr	r2, [pc, #20]	; (d40f0 <_Z8resetAll6String+0x18>)
   d40dc:	4905      	ldr	r1, [pc, #20]	; (d40f4 <_Z8resetAll6String+0x1c>)
   d40de:	4806      	ldr	r0, [pc, #24]	; (d40f8 <_Z8resetAll6String+0x20>)
   d40e0:	f002 fc38 	bl	d6954 <_ZN5spark11MeshPublish7publishEPKcS2_>
    digitalWrite(D4, HIGH);
   d40e4:	2101      	movs	r1, #1
   d40e6:	2004      	movs	r0, #4
   d40e8:	f003 fc97 	bl	d7a1a <digitalWrite>
    return 0;
}
   d40ec:	2000      	movs	r0, #0
   d40ee:	bd08      	pop	{r3, pc}
   d40f0:	000d8194 	.word	0x000d8194
   d40f4:	000d819a 	.word	0x000d819a
   d40f8:	2003e3dc 	.word	0x2003e3dc

000d40fc <_Z11togglePower6String>:

int togglePower(String command){
   d40fc:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40fe:	490d      	ldr	r1, [pc, #52]	; (d4134 <_Z11togglePower6String+0x38>)
   d4100:	4605      	mov	r5, r0
   d4102:	f002 ff22 	bl	d6f4a <_ZNK6String6equalsEPKc>
     if (command=="on") {
   d4106:	4604      	mov	r4, r0
   d4108:	b128      	cbz	r0, d4116 <_Z11togglePower6String+0x1a>
        digitalWrite(D4,HIGH);
   d410a:	2101      	movs	r1, #1
   d410c:	2004      	movs	r0, #4
   d410e:	f003 fc84 	bl	d7a1a <digitalWrite>
   d4112:	2001      	movs	r0, #1
   d4114:	bd38      	pop	{r3, r4, r5, pc}
   d4116:	4908      	ldr	r1, [pc, #32]	; (d4138 <_Z11togglePower6String+0x3c>)
   d4118:	4628      	mov	r0, r5
   d411a:	f002 ff16 	bl	d6f4a <_ZNK6String6equalsEPKc>
        return 1;
    }
    else if (command=="off") {
   d411e:	b128      	cbz	r0, d412c <_Z11togglePower6String+0x30>
        digitalWrite(D4,LOW);
   d4120:	4621      	mov	r1, r4
   d4122:	2004      	movs	r0, #4
   d4124:	f003 fc79 	bl	d7a1a <digitalWrite>
        return 0;
   d4128:	4620      	mov	r0, r4
   d412a:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
        return -1;
   d412c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   d4130:	bd38      	pop	{r3, r4, r5, pc}
   d4132:	bf00      	nop
   d4134:	000d81a3 	.word	0x000d81a3
   d4138:	000d81a6 	.word	0x000d81a6

000d413c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d413c:	4b0a      	ldr	r3, [pc, #40]	; (d4168 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d413e:	b510      	push	{r4, lr}
   d4140:	4604      	mov	r4, r0
   d4142:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4144:	f001 fac6 	bl	d56d4 <_ZN5spark10LogManager8instanceEv>
   d4148:	4621      	mov	r1, r4
   d414a:	f001 fcb3 	bl	d5ab4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d414e:	f003 fb61 	bl	d7814 <_Z16_fetch_usbserialv>
   d4152:	f003 fb53 	bl	d77fc <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4156:	4620      	mov	r0, r4
   d4158:	4b04      	ldr	r3, [pc, #16]	; (d416c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d415a:	f840 3b04 	str.w	r3, [r0], #4
   d415e:	f001 fbaf 	bl	d58c0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4162:	4620      	mov	r0, r4
   d4164:	bd10      	pop	{r4, pc}
   d4166:	bf00      	nop
   d4168:	000d8178 	.word	0x000d8178
   d416c:	000d8160 	.word	0x000d8160

000d4170 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4170:	b510      	push	{r4, lr}
   d4172:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4174:	f7ff ffe2 	bl	d413c <_ZN5spark16SerialLogHandlerD1Ev>
   d4178:	4620      	mov	r0, r4
   d417a:	2124      	movs	r1, #36	; 0x24
   d417c:	f003 fcc5 	bl	d7b0a <_ZdlPvj>
   d4180:	4620      	mov	r0, r4
   d4182:	bd10      	pop	{r4, pc}

000d4184 <setup>:
int togglePower(String command);
int resetAll(String empty);

char myID[5]="A1";

void setup() {
   d4184:	b510      	push	{r4, lr}
    pinMode(D4, OUTPUT);
   d4186:	2101      	movs	r1, #1
   d4188:	2004      	movs	r0, #4
   d418a:	f003 fc35 	bl	d79f8 <pinMode>
    pinMode(D5, OUTPUT);
   d418e:	2101      	movs	r1, #1
   d4190:	2005      	movs	r0, #5
   d4192:	f003 fc31 	bl	d79f8 <pinMode>
    pinMode(D6, OUTPUT);
   d4196:	2101      	movs	r1, #1
   d4198:	2006      	movs	r0, #6
   d419a:	f003 fc2d 	bl	d79f8 <pinMode>
    pinMode(D7, OUTPUT);
   d419e:	2101      	movs	r1, #1
   d41a0:	2007      	movs	r0, #7
   d41a2:	f003 fc29 	bl	d79f8 <pinMode>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d41a6:	4c0e      	ldr	r4, [pc, #56]	; (d41e0 <setup+0x5c>)
    //Starting serial via USB
    Serial.begin();
   d41a8:	f003 fb34 	bl	d7814 <_Z16_fetch_usbserialv>
   d41ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41b0:	f003 fb20 	bl	d77f4 <_ZN9USBSerial5beginEl>

    Mesh.subscribe("PowerNet", commsHandler);
   d41b4:	4a0b      	ldr	r2, [pc, #44]	; (d41e4 <setup+0x60>)
   d41b6:	490c      	ldr	r1, [pc, #48]	; (d41e8 <setup+0x64>)
   d41b8:	480c      	ldr	r0, [pc, #48]	; (d41ec <setup+0x68>)
   d41ba:	f002 fc43 	bl	d6a44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d41be:	4a0c      	ldr	r2, [pc, #48]	; (d41f0 <setup+0x6c>)
   d41c0:	490c      	ldr	r1, [pc, #48]	; (d41f4 <setup+0x70>)
   d41c2:	4620      	mov	r0, r4
   d41c4:	f000 fe67 	bl	d4e96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d41c8:	490b      	ldr	r1, [pc, #44]	; (d41f8 <setup+0x74>)
   d41ca:	4a0c      	ldr	r2, [pc, #48]	; (d41fc <setup+0x78>)
   d41cc:	4620      	mov	r0, r4
   d41ce:	f000 fe62 	bl	d4e96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    //registering our functions to cloud!
    Particle.function("toglPwr", togglePower);
    Particle.function("reset", resetAll);

    digitalWrite(D4, HIGH);
   d41d2:	2101      	movs	r1, #1
   d41d4:	2004      	movs	r0, #4
    
}
   d41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mesh.subscribe("PowerNet", commsHandler);
    //registering our functions to cloud!
    Particle.function("toglPwr", togglePower);
    Particle.function("reset", resetAll);

    digitalWrite(D4, HIGH);
   d41da:	f003 bc1e 	b.w	d7a1a <digitalWrite>
   d41de:	bf00      	nop
   d41e0:	000d4e6b 	.word	0x000d4e6b
   d41e4:	000d4539 	.word	0x000d4539
   d41e8:	000d819a 	.word	0x000d819a
   d41ec:	2003e3dc 	.word	0x2003e3dc
   d41f0:	000d81aa 	.word	0x000d81aa
   d41f4:	000d40fd 	.word	0x000d40fd
   d41f8:	000d40d9 	.word	0x000d40d9
   d41fc:	000d81b2 	.word	0x000d81b2

000d4200 <_Z5blinkv>:
    }
    delay(2000); 
}

//signal that POWER OFF message was recieved and power is being rerouted
void blink(){
   d4200:	b508      	push	{r3, lr}
    delay(500);
   d4202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4206:	f000 fde3 	bl	d4dd0 <delay>
    digitalWrite(D7, LOW);
   d420a:	2100      	movs	r1, #0
   d420c:	2007      	movs	r0, #7
   d420e:	f003 fc04 	bl	d7a1a <digitalWrite>
    delay(500);
   d4212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4216:	f000 fddb 	bl	d4dd0 <delay>
    digitalWrite(D7, HIGH);
   d421a:	2101      	movs	r1, #1
   d421c:	2007      	movs	r0, #7
   d421e:	f003 fbfc 	bl	d7a1a <digitalWrite>
    delay(500);
   d4222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4226:	f000 fdd3 	bl	d4dd0 <delay>
    digitalWrite(D7, LOW);
   d422a:	2100      	movs	r1, #0
   d422c:	2007      	movs	r0, #7
   d422e:	f003 fbf4 	bl	d7a1a <digitalWrite>
    delay(500);
   d4232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4236:	f000 fdcb 	bl	d4dd0 <delay>
    digitalWrite(D7, HIGH);
   d423a:	2101      	movs	r1, #1
   d423c:	2007      	movs	r0, #7
   d423e:	f003 fbec 	bl	d7a1a <digitalWrite>
    delay(500);
   d4242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4246:	f000 fdc3 	bl	d4dd0 <delay>
    digitalWrite(D7, LOW);
   d424a:	2100      	movs	r1, #0
   d424c:	2007      	movs	r0, #7
   d424e:	f003 fbe4 	bl	d7a1a <digitalWrite>
    delay(500);
   d4252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4256:	f000 fdbb 	bl	d4dd0 <delay>
    digitalWrite(D7, HIGH);
   d425a:	2101      	movs	r1, #1
   d425c:	2007      	movs	r0, #7
   d425e:	f003 fbdc 	bl	d7a1a <digitalWrite>
    delay(500);
   d4262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4266:	f000 fdb3 	bl	d4dd0 <delay>
    digitalWrite(D7, LOW);
   d426a:	2100      	movs	r1, #0
   d426c:	2007      	movs	r0, #7
}
   d426e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
    digitalWrite(D7, LOW);
    delay(500);
    digitalWrite(D7, HIGH);
    delay(500);
    digitalWrite(D7, LOW);
   d4272:	f003 bbd2 	b.w	d7a1a <digitalWrite>
	...

000d4278 <_Z7noPowerv>:
}



void noPower(){
    Mesh.publish("PowerNet", "A1 - POWER OFF");
   d4278:	4914      	ldr	r1, [pc, #80]	; (d42cc <_Z7noPowerv+0x54>)
   d427a:	4a15      	ldr	r2, [pc, #84]	; (d42d0 <_Z7noPowerv+0x58>)
   d427c:	4815      	ldr	r0, [pc, #84]	; (d42d4 <_Z7noPowerv+0x5c>)
    }
}



void noPower(){
   d427e:	b508      	push	{r3, lr}
    Mesh.publish("PowerNet", "A1 - POWER OFF");
   d4280:	f002 fb68 	bl	d6954 <_ZN5spark11MeshPublish7publishEPKcS2_>
    Serial.print("\nAlert sent to mesh network.");
   d4284:	f003 fac6 	bl	d7814 <_Z16_fetch_usbserialv>
   d4288:	4913      	ldr	r1, [pc, #76]	; (d42d8 <_Z7noPowerv+0x60>)
   d428a:	f002 fce9 	bl	d6c60 <_ZN5Print5printEPKc>
    do {
        Serial.print("\nWaiting for power...\n");
   d428e:	f003 fac1 	bl	d7814 <_Z16_fetch_usbserialv>
   d4292:	4912      	ldr	r1, [pc, #72]	; (d42dc <_Z7noPowerv+0x64>)
   d4294:	f002 fce4 	bl	d6c60 <_ZN5Print5printEPKc>
        delay(2300);
   d4298:	f640 00fc 	movw	r0, #2300	; 0x8fc
   d429c:	f000 fd98 	bl	d4dd0 <delay>
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
   d42a0:	200e      	movs	r0, #14
   d42a2:	f003 fbd3 	bl	d7a4c <analogRead>
   d42a6:	f640 733c 	movw	r3, #3900	; 0xf3c
   d42aa:	4298      	cmp	r0, r3
   d42ac:	dd07      	ble.n	d42be <_Z7noPowerv+0x46>
   d42ae:	200f      	movs	r0, #15
   d42b0:	f003 fbcc 	bl	d7a4c <analogRead>
   d42b4:	f640 53ab 	movw	r3, #3499	; 0xdab
   d42b8:	4298      	cmp	r0, r3
   d42ba:	dde8      	ble.n	d428e <_Z7noPowerv+0x16>
   d42bc:	bd08      	pop	{r3, pc}
   d42be:	200e      	movs	r0, #14
   d42c0:	f003 fbc4 	bl	d7a4c <analogRead>
   d42c4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d42c8:	dbf1      	blt.n	d42ae <_Z7noPowerv+0x36>
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	000d819a 	.word	0x000d819a
   d42d0:	000d81b8 	.word	0x000d81b8
   d42d4:	2003e3dc 	.word	0x2003e3dc
   d42d8:	000d81c7 	.word	0x000d81c7
   d42dc:	000d81e4 	.word	0x000d81e4

000d42e0 <loop>:
}
//A3 reads power supplied from X2
//A4 reads power supplied from X1
//A5 reads power supplied form SELF 

void loop() {
   d42e0:	b510      	push	{r4, lr}
  Serial.printf("\n\n----------------------------------\n");
   d42e2:	f003 fa97 	bl	d7814 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42e6:	4a5e      	ldr	r2, [pc, #376]	; (d4460 <loop+0x180>)
   d42e8:	2100      	movs	r1, #0
   d42ea:	f002 fd27 	bl	d6d3c <_ZN5Print11printf_implEbPKcz>
  Serial.print("City:Argon1\n");
   d42ee:	f003 fa91 	bl	d7814 <_Z16_fetch_usbserialv>
   d42f2:	495c      	ldr	r1, [pc, #368]	; (d4464 <loop+0x184>)
   d42f4:	f002 fcb4 	bl	d6c60 <_ZN5Print5printEPKc>
//read if power is on
    if (analogRead(A5) >= 3500) {
   d42f8:	200e      	movs	r0, #14
   d42fa:	f003 fba7 	bl	d7a4c <analogRead>
   d42fe:	f640 53ab 	movw	r3, #3499	; 0xdab
   d4302:	4298      	cmp	r0, r3
   d4304:	dd16      	ble.n	d4334 <loop+0x54>
        Serial.print("Power is ON\nSelf-generated power levels: ");
   d4306:	f003 fa85 	bl	d7814 <_Z16_fetch_usbserialv>
   d430a:	4957      	ldr	r1, [pc, #348]	; (d4468 <loop+0x188>)
   d430c:	f002 fca8 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A5));
   d4310:	f003 fa80 	bl	d7814 <_Z16_fetch_usbserialv>
   d4314:	4604      	mov	r4, r0
   d4316:	200e      	movs	r0, #14
   d4318:	f003 fb98 	bl	d7a4c <analogRead>
   d431c:	220a      	movs	r2, #10
   d431e:	4601      	mov	r1, r0
   d4320:	4620      	mov	r0, r4
   d4322:	f002 fce9 	bl	d6cf8 <_ZN5Print5printEli>
        Serial.printf("\n----------------------------------\n");
   d4326:	f003 fa75 	bl	d7814 <_Z16_fetch_usbserialv>
   d432a:	4a50      	ldr	r2, [pc, #320]	; (d446c <loop+0x18c>)
   d432c:	2100      	movs	r1, #0
   d432e:	f002 fd05 	bl	d6d3c <_ZN5Print11printf_implEbPKcz>
   d4332:	e037      	b.n	d43a4 <loop+0xc4>
    //read all analogs to see if power is being recieved
    } else if ((analogRead(A5) < 3000) && (analogRead(A3) < 3000 ) && (analogRead(A4)) < 3000) {  
   d4334:	200e      	movs	r0, #14
   d4336:	f003 fb89 	bl	d7a4c <analogRead>
   d433a:	f640 34b7 	movw	r4, #2999	; 0xbb7
   d433e:	42a0      	cmp	r0, r4
   d4340:	dc36      	bgt.n	d43b0 <loop+0xd0>
   d4342:	2010      	movs	r0, #16
   d4344:	f003 fb82 	bl	d7a4c <analogRead>
   d4348:	42a0      	cmp	r0, r4
   d434a:	dc31      	bgt.n	d43b0 <loop+0xd0>
   d434c:	200f      	movs	r0, #15
   d434e:	f003 fb7d 	bl	d7a4c <analogRead>
   d4352:	42a0      	cmp	r0, r4
   d4354:	dc2c      	bgt.n	d43b0 <loop+0xd0>
        Serial.print("Power is OFF\nOutsourced power levels /A4: ");
   d4356:	f003 fa5d 	bl	d7814 <_Z16_fetch_usbserialv>
   d435a:	4945      	ldr	r1, [pc, #276]	; (d4470 <loop+0x190>)
   d435c:	f002 fc80 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A4));        
   d4360:	f003 fa58 	bl	d7814 <_Z16_fetch_usbserialv>
   d4364:	4604      	mov	r4, r0
   d4366:	200f      	movs	r0, #15
   d4368:	f003 fb70 	bl	d7a4c <analogRead>
   d436c:	220a      	movs	r2, #10
   d436e:	4601      	mov	r1, r0
   d4370:	4620      	mov	r0, r4
   d4372:	f002 fcc1 	bl	d6cf8 <_ZN5Print5printEli>
        Serial.print("Power is OFF\nOutsourced power levels /A3: ");
   d4376:	f003 fa4d 	bl	d7814 <_Z16_fetch_usbserialv>
   d437a:	493e      	ldr	r1, [pc, #248]	; (d4474 <loop+0x194>)
   d437c:	f002 fc70 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A3));
   d4380:	f003 fa48 	bl	d7814 <_Z16_fetch_usbserialv>
   d4384:	4604      	mov	r4, r0
   d4386:	2010      	movs	r0, #16
   d4388:	f003 fb60 	bl	d7a4c <analogRead>
   d438c:	220a      	movs	r2, #10
   d438e:	4601      	mov	r1, r0
   d4390:	4620      	mov	r0, r4
   d4392:	f002 fcb1 	bl	d6cf8 <_ZN5Print5printEli>
        Serial.print("\n\n----------------------------------\n");
   d4396:	f003 fa3d 	bl	d7814 <_Z16_fetch_usbserialv>
   d439a:	4931      	ldr	r1, [pc, #196]	; (d4460 <loop+0x180>)
   d439c:	f002 fc60 	bl	d6c60 <_ZN5Print5printEPKc>
        noPower();
   d43a0:	f7ff ff6a 	bl	d4278 <_Z7noPowerv>
        Serial.print("\nOutsourced power levels /A3: ");
        Serial.print(analogRead(A3));
        Serial.print("\nSelf-generated power levels /A5: ");
        Serial.print(analogRead(A5));
    }
    delay(2000); 
   d43a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d43a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.print("\nOutsourced power levels /A3: ");
        Serial.print(analogRead(A3));
        Serial.print("\nSelf-generated power levels /A5: ");
        Serial.print(analogRead(A5));
    }
    delay(2000); 
   d43ac:	f000 bd10 	b.w	d4dd0 <delay>
        Serial.print("Power is OFF\nOutsourced power levels /A3: ");
        Serial.print(analogRead(A3));
        Serial.print("\n\n----------------------------------\n");
        noPower();
    //read all analogs and determine if power is being supplied by others
    } else if (analogRead(A5) < 3000 && (analogRead(A4) > 3500 || analogRead(A3) >3500)){
   d43b0:	200e      	movs	r0, #14
   d43b2:	f003 fb4b 	bl	d7a4c <analogRead>
   d43b6:	f640 33b7 	movw	r3, #2999	; 0xbb7
   d43ba:	4298      	cmp	r0, r3
   d43bc:	dc1a      	bgt.n	d43f4 <loop+0x114>
   d43be:	200f      	movs	r0, #15
   d43c0:	f003 fb44 	bl	d7a4c <analogRead>
   d43c4:	f640 54ac 	movw	r4, #3500	; 0xdac
   d43c8:	42a0      	cmp	r0, r4
   d43ca:	dc04      	bgt.n	d43d6 <loop+0xf6>
   d43cc:	2010      	movs	r0, #16
   d43ce:	f003 fb3d 	bl	d7a4c <analogRead>
   d43d2:	42a0      	cmp	r0, r4
   d43d4:	dd0e      	ble.n	d43f4 <loop+0x114>
        Serial.print("\nPower supplied by a gracious neighbor");
   d43d6:	f003 fa1d 	bl	d7814 <_Z16_fetch_usbserialv>
   d43da:	4927      	ldr	r1, [pc, #156]	; (d4478 <loop+0x198>)
   d43dc:	f002 fc40 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print("\nOutsourced power levels: ");
   d43e0:	f003 fa18 	bl	d7814 <_Z16_fetch_usbserialv>
   d43e4:	4925      	ldr	r1, [pc, #148]	; (d447c <loop+0x19c>)
   d43e6:	f002 fc3b 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A4));
   d43ea:	f003 fa13 	bl	d7814 <_Z16_fetch_usbserialv>
   d43ee:	4604      	mov	r4, r0
   d43f0:	200f      	movs	r0, #15
   d43f2:	e02d      	b.n	d4450 <loop+0x170>
    } else {
        Serial.println("\n\nOops! Please pay $5 BTC for me to work again! \n");
   d43f4:	f003 fa0e 	bl	d7814 <_Z16_fetch_usbserialv>
   d43f8:	4921      	ldr	r1, [pc, #132]	; (d4480 <loop+0x1a0>)
   d43fa:	f002 fc44 	bl	d6c86 <_ZN5Print7printlnEPKc>
        Serial.print("\nOutsourced power levels /A4: ");
   d43fe:	f003 fa09 	bl	d7814 <_Z16_fetch_usbserialv>
   d4402:	4920      	ldr	r1, [pc, #128]	; (d4484 <loop+0x1a4>)
   d4404:	f002 fc2c 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A4));
   d4408:	f003 fa04 	bl	d7814 <_Z16_fetch_usbserialv>
   d440c:	4604      	mov	r4, r0
   d440e:	200f      	movs	r0, #15
   d4410:	f003 fb1c 	bl	d7a4c <analogRead>
   d4414:	220a      	movs	r2, #10
   d4416:	4601      	mov	r1, r0
   d4418:	4620      	mov	r0, r4
   d441a:	f002 fc6d 	bl	d6cf8 <_ZN5Print5printEli>
        Serial.print("\nOutsourced power levels /A3: ");
   d441e:	f003 f9f9 	bl	d7814 <_Z16_fetch_usbserialv>
   d4422:	4919      	ldr	r1, [pc, #100]	; (d4488 <loop+0x1a8>)
   d4424:	f002 fc1c 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A3));
   d4428:	f003 f9f4 	bl	d7814 <_Z16_fetch_usbserialv>
   d442c:	4604      	mov	r4, r0
   d442e:	2010      	movs	r0, #16
   d4430:	f003 fb0c 	bl	d7a4c <analogRead>
   d4434:	220a      	movs	r2, #10
   d4436:	4601      	mov	r1, r0
   d4438:	4620      	mov	r0, r4
   d443a:	f002 fc5d 	bl	d6cf8 <_ZN5Print5printEli>
        Serial.print("\nSelf-generated power levels /A5: ");
   d443e:	f003 f9e9 	bl	d7814 <_Z16_fetch_usbserialv>
   d4442:	4912      	ldr	r1, [pc, #72]	; (d448c <loop+0x1ac>)
   d4444:	f002 fc0c 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A5));
   d4448:	f003 f9e4 	bl	d7814 <_Z16_fetch_usbserialv>
   d444c:	4604      	mov	r4, r0
   d444e:	200e      	movs	r0, #14
   d4450:	f003 fafc 	bl	d7a4c <analogRead>
   d4454:	220a      	movs	r2, #10
   d4456:	4601      	mov	r1, r0
   d4458:	4620      	mov	r0, r4
   d445a:	f002 fc4d 	bl	d6cf8 <_ZN5Print5printEli>
   d445e:	e7a1      	b.n	d43a4 <loop+0xc4>
   d4460:	000d81fb 	.word	0x000d81fb
   d4464:	000d8221 	.word	0x000d8221
   d4468:	000d822e 	.word	0x000d822e
   d446c:	000d81fc 	.word	0x000d81fc
   d4470:	000d8258 	.word	0x000d8258
   d4474:	000d8283 	.word	0x000d8283
   d4478:	000d82ae 	.word	0x000d82ae
   d447c:	000d82d5 	.word	0x000d82d5
   d4480:	000d82f0 	.word	0x000d82f0
   d4484:	000d8264 	.word	0x000d8264
   d4488:	000d828f 	.word	0x000d828f
   d448c:	000d8322 	.word	0x000d8322

000d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4490:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4492:	6804      	ldr	r4, [r0, #0]
   d4494:	6843      	ldr	r3, [r0, #4]
   d4496:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4498:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d449a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d449e:	42a6      	cmp	r6, r4
   d44a0:	d004      	beq.n	d44ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d44a2:	4620      	mov	r0, r4
   d44a4:	f002 fcdd 	bl	d6e62 <_ZN6StringD1Ev>
   d44a8:	3414      	adds	r4, #20
   d44aa:	e7f8      	b.n	d449e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d44ac:	6828      	ldr	r0, [r5, #0]
   d44ae:	f000 fc6f 	bl	d4d90 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d44b2:	4628      	mov	r0, r5
   d44b4:	bd70      	pop	{r4, r5, r6, pc}

000d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>:
   d44b6:	4613      	mov	r3, r2
   d44b8:	460a      	mov	r2, r1
   d44ba:	2100      	movs	r1, #0
   d44bc:	f002 bc3e 	b.w	d6d3c <_ZN5Print11printf_implEbPKcz>

000d44c0 <_Z7reroutePc>:
    digitalWrite(D7, HIGH);
    delay(500);
    digitalWrite(D7, LOW);
}

void reroute(char who[5]){
   d44c0:	b510      	push	{r4, lr}
   d44c2:	4604      	mov	r4, r0

    //signal that POWER OFF message was recieved and power is being rerouted
    blink();
   d44c4:	f7ff fe9c 	bl	d4200 <_Z5blinkv>
    //route power
    delay(1000);
   d44c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d44cc:	f000 fc80 	bl	d4dd0 <delay>
    //do not route if already supplying power to someone else
    if (strstr(who, "X1")){
   d44d0:	4913      	ldr	r1, [pc, #76]	; (d4520 <_Z7reroutePc+0x60>)
   d44d2:	4620      	mov	r0, r4
   d44d4:	f003 fd8c 	bl	d7ff0 <strstr>
   d44d8:	b110      	cbz	r0, d44e0 <_Z7reroutePc+0x20>
        digitalWrite(D5,HIGH);
   d44da:	2101      	movs	r1, #1
   d44dc:	2005      	movs	r0, #5
   d44de:	e006      	b.n	d44ee <_Z7reroutePc+0x2e>
        Serial.print("\n\n______________________________");
        Serial.printf("\nREROUTING POWER TO %s", who);
        //Mesh.publish("PowerNet", "A1 - SUPPLYING POWER");
        Serial.print("\n______________________________");
    } else if (strstr(who, "X2")){
   d44e0:	4910      	ldr	r1, [pc, #64]	; (d4524 <_Z7reroutePc+0x64>)
   d44e2:	4620      	mov	r0, r4
   d44e4:	f003 fd84 	bl	d7ff0 <strstr>
   d44e8:	b190      	cbz	r0, d4510 <_Z7reroutePc+0x50>
        digitalWrite(D6, HIGH);
   d44ea:	2101      	movs	r1, #1
   d44ec:	2006      	movs	r0, #6
   d44ee:	f003 fa94 	bl	d7a1a <digitalWrite>
        Serial.print("\n\n______________________________");
   d44f2:	f003 f98f 	bl	d7814 <_Z16_fetch_usbserialv>
   d44f6:	490c      	ldr	r1, [pc, #48]	; (d4528 <_Z7reroutePc+0x68>)
   d44f8:	f002 fbb2 	bl	d6c60 <_ZN5Print5printEPKc>
        Serial.printf("\nREROUTING POWER TO %s", who);
   d44fc:	f003 f98a 	bl	d7814 <_Z16_fetch_usbserialv>
   d4500:	490a      	ldr	r1, [pc, #40]	; (d452c <_Z7reroutePc+0x6c>)
   d4502:	4622      	mov	r2, r4
   d4504:	f7ff ffd7 	bl	d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>
        //Mesh.publish("PowerNet", "A1 - SUPPLYING POWER");
        Serial.print("\n______________________________");
   d4508:	f003 f984 	bl	d7814 <_Z16_fetch_usbserialv>
   d450c:	4908      	ldr	r1, [pc, #32]	; (d4530 <_Z7reroutePc+0x70>)
   d450e:	e002      	b.n	d4516 <_Z7reroutePc+0x56>
    } else {
      Serial.print("these are not the droids you are looking for...");
   d4510:	f003 f980 	bl	d7814 <_Z16_fetch_usbserialv>
   d4514:	4907      	ldr	r1, [pc, #28]	; (d4534 <_Z7reroutePc+0x74>)
    }
}
   d4516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.print("\n\n______________________________");
        Serial.printf("\nREROUTING POWER TO %s", who);
        //Mesh.publish("PowerNet", "A1 - SUPPLYING POWER");
        Serial.print("\n______________________________");
    } else {
      Serial.print("these are not the droids you are looking for...");
   d451a:	f002 bba1 	b.w	d6c60 <_ZN5Print5printEPKc>
   d451e:	bf00      	nop
   d4520:	000d8345 	.word	0x000d8345
   d4524:	000d8380 	.word	0x000d8380
   d4528:	000d8348 	.word	0x000d8348
   d452c:	000d8369 	.word	0x000d8369
   d4530:	000d8349 	.word	0x000d8349
   d4534:	000d8383 	.word	0x000d8383

000d4538 <_Z12commsHandlerPKcS0_>:
        Serial.print("\nWaiting for power...\n");
        delay(2300);
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){
   d4538:	b570      	push	{r4, r5, r6, lr}

    char x1[5] = "X1";
    char x2[5] = "X2";
    //char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d453a:	4a51      	ldr	r2, [pc, #324]	; (d4680 <_Z12commsHandlerPKcS0_+0x148>)
        Serial.print("\nWaiting for power...\n");
        delay(2300);
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){
   d453c:	b08c      	sub	sp, #48	; 0x30

    char x1[5] = "X1";
   d453e:	f243 1358 	movw	r3, #12632	; 0x3158
    char x2[5] = "X2";
    //char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d4542:	6810      	ldr	r0, [r2, #0]
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
   d4544:	9301      	str	r3, [sp, #4]
        Serial.print("\nWaiting for power...\n");
        delay(2300);
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){
   d4546:	460c      	mov	r4, r1

    char x1[5] = "X1";
    char x2[5] = "X2";
   d4548:	f243 2358 	movw	r3, #12888	; 0x3258
    //char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d454c:	6851      	ldr	r1, [r2, #4]
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
    char x2[5] = "X2";
   d454e:	9303      	str	r3, [sp, #12]
    //char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d4550:	ab09      	add	r3, sp, #36	; 0x24
   d4552:	c303      	stmia	r3!, {r0, r1}
   d4554:	8912      	ldrh	r2, [r2, #8]
   d4556:	801a      	strh	r2, [r3, #0]
    char rts[5]= "RTS";
   d4558:	4b4a      	ldr	r3, [pc, #296]	; (d4684 <_Z12commsHandlerPKcS0_+0x14c>)
   d455a:	9305      	str	r3, [sp, #20]
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
   d455c:	2500      	movs	r5, #0
    char x2[5] = "X2";
    //char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
    char rts[5]= "RTS";
    char cts[5]= "CTS";
   d455e:	3b0f      	subs	r3, #15

        //handle recieved low power messages
    if (strstr(data, lowPwr)){
   d4560:	a909      	add	r1, sp, #36	; 0x24
   d4562:	4620      	mov	r0, r4
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
   d4564:	f88d 5008 	strb.w	r5, [sp, #8]
    char x2[5] = "X2";
   d4568:	f88d 5010 	strb.w	r5, [sp, #16]
    //char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d456c:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    char rts[5]= "RTS";
   d4570:	f88d 5018 	strb.w	r5, [sp, #24]
    char cts[5]= "CTS";
   d4574:	9307      	str	r3, [sp, #28]
   d4576:	f88d 5020 	strb.w	r5, [sp, #32]

        //handle recieved low power messages
    if (strstr(data, lowPwr)){
   d457a:	f003 fd39 	bl	d7ff0 <strstr>
   d457e:	b360      	cbz	r0, d45da <_Z12commsHandlerPKcS0_+0xa2>
        if (strstr(data, x1)){
   d4580:	a901      	add	r1, sp, #4
   d4582:	4620      	mov	r0, r4
   d4584:	f003 fd34 	bl	d7ff0 <strstr>
   d4588:	4606      	mov	r6, r0
   d458a:	b140      	cbz	r0, d459e <_Z12commsHandlerPKcS0_+0x66>
            char *target[5] = {x1};
            Serial.printf("\n%s Has No Power!! \n", *target);
   d458c:	f003 f942 	bl	d7814 <_Z16_fetch_usbserialv>
   d4590:	493d      	ldr	r1, [pc, #244]	; (d4688 <_Z12commsHandlerPKcS0_+0x150>)
   d4592:	aa01      	add	r2, sp, #4
   d4594:	f7ff ff8f 	bl	d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>
            delay((random(0,41)/random(10,16))*10000);
   d4598:	2129      	movs	r1, #41	; 0x29
   d459a:	4628      	mov	r0, r5
   d459c:	e00d      	b.n	d45ba <_Z12commsHandlerPKcS0_+0x82>
            Mesh.publish("PowerNet", "A1 - RTS");
        } else if (strstr(data, x2)){
   d459e:	a903      	add	r1, sp, #12
   d45a0:	4620      	mov	r0, r4
   d45a2:	f003 fd25 	bl	d7ff0 <strstr>
   d45a6:	2800      	cmp	r0, #0
   d45a8:	d064      	beq.n	d4674 <_Z12commsHandlerPKcS0_+0x13c>
            char *target[5] = {x2};
            Serial.printf("\n%s Has No Power!! \n", *target);
   d45aa:	f003 f933 	bl	d7814 <_Z16_fetch_usbserialv>
   d45ae:	4936      	ldr	r1, [pc, #216]	; (d4688 <_Z12commsHandlerPKcS0_+0x150>)
   d45b0:	aa03      	add	r2, sp, #12
   d45b2:	f7ff ff80 	bl	d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>
            delay((random(0,41)/random(10,16))*10000);
   d45b6:	2129      	movs	r1, #41	; 0x29
   d45b8:	4630      	mov	r0, r6
   d45ba:	f002 fc04 	bl	d6dc6 <_Z6randomii>
   d45be:	2110      	movs	r1, #16
   d45c0:	4604      	mov	r4, r0
   d45c2:	200a      	movs	r0, #10
   d45c4:	f002 fbff 	bl	d6dc6 <_Z6randomii>
   d45c8:	f242 7310 	movw	r3, #10000	; 0x2710
   d45cc:	fb94 f0f0 	sdiv	r0, r4, r0
   d45d0:	4358      	muls	r0, r3
   d45d2:	f000 fbfd 	bl	d4dd0 <delay>
            Mesh.publish("PowerNet", "A1 - RTS");
   d45d6:	4a2d      	ldr	r2, [pc, #180]	; (d468c <_Z12commsHandlerPKcS0_+0x154>)
   d45d8:	e03a      	b.n	d4650 <_Z12commsHandlerPKcS0_+0x118>
        } else { 
        }
    //handle CTS messages
    } else if (strstr(data, cts)){
   d45da:	a907      	add	r1, sp, #28
   d45dc:	4620      	mov	r0, r4
   d45de:	f003 fd07 	bl	d7ff0 <strstr>
   d45e2:	b1a8      	cbz	r0, d4610 <_Z12commsHandlerPKcS0_+0xd8>
        if (strstr(data, myID) && strstr(data,x1)){
   d45e4:	492a      	ldr	r1, [pc, #168]	; (d4690 <_Z12commsHandlerPKcS0_+0x158>)
   d45e6:	4620      	mov	r0, r4
   d45e8:	f003 fd02 	bl	d7ff0 <strstr>
   d45ec:	2800      	cmp	r0, #0
   d45ee:	d041      	beq.n	d4674 <_Z12commsHandlerPKcS0_+0x13c>
   d45f0:	a901      	add	r1, sp, #4
   d45f2:	4620      	mov	r0, r4
   d45f4:	f003 fcfc 	bl	d7ff0 <strstr>
   d45f8:	b108      	cbz	r0, d45fe <_Z12commsHandlerPKcS0_+0xc6>
          reroute(x1);
   d45fa:	a801      	add	r0, sp, #4
   d45fc:	e005      	b.n	d460a <_Z12commsHandlerPKcS0_+0xd2>
        } else if (strstr(data, myID) && strstr(data,x2)){
   d45fe:	a903      	add	r1, sp, #12
   d4600:	4620      	mov	r0, r4
   d4602:	f003 fcf5 	bl	d7ff0 <strstr>
   d4606:	b3a8      	cbz	r0, d4674 <_Z12commsHandlerPKcS0_+0x13c>
          reroute(x2);
   d4608:	a803      	add	r0, sp, #12
   d460a:	f7ff ff59 	bl	d44c0 <_Z7reroutePc>
   d460e:	e031      	b.n	d4674 <_Z12commsHandlerPKcS0_+0x13c>
        }
    //handle RTS messages
    } else if (strstr(data, rts)){
   d4610:	a905      	add	r1, sp, #20
   d4612:	4620      	mov	r0, r4
   d4614:	f003 fcec 	bl	d7ff0 <strstr>
   d4618:	4605      	mov	r5, r0
   d461a:	b1f0      	cbz	r0, d465a <_Z12commsHandlerPKcS0_+0x122>
        // parse who sent RTS
         if (strstr(data, x1)){
   d461c:	a901      	add	r1, sp, #4
   d461e:	4620      	mov	r0, r4
   d4620:	f003 fce6 	bl	d7ff0 <strstr>
   d4624:	b138      	cbz	r0, d4636 <_Z12commsHandlerPKcS0_+0xfe>
             //if no one has already sent power
            if (analogRead(A4)<2000){
   d4626:	200f      	movs	r0, #15
   d4628:	f003 fa10 	bl	d7a4c <analogRead>
   d462c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4630:	da20      	bge.n	d4674 <_Z12commsHandlerPKcS0_+0x13c>
                //CTS
                 Mesh.publish("PowerNet", "A1 - X1 CTS");
   d4632:	4a18      	ldr	r2, [pc, #96]	; (d4694 <_Z12commsHandlerPKcS0_+0x15c>)
   d4634:	e00c      	b.n	d4650 <_Z12commsHandlerPKcS0_+0x118>
             }
        } else if (strstr(data, x2)){
   d4636:	a903      	add	r1, sp, #12
   d4638:	4620      	mov	r0, r4
   d463a:	f003 fcd9 	bl	d7ff0 <strstr>
   d463e:	b1c8      	cbz	r0, d4674 <_Z12commsHandlerPKcS0_+0x13c>
            if (analogRead(A4)<20000){
   d4640:	200f      	movs	r0, #15
   d4642:	f003 fa03 	bl	d7a4c <analogRead>
   d4646:	f644 631f 	movw	r3, #19999	; 0x4e1f
   d464a:	4298      	cmp	r0, r3
   d464c:	dc12      	bgt.n	d4674 <_Z12commsHandlerPKcS0_+0x13c>
                 Mesh.publish("PowerNet", "A1 - X2 CTS");
   d464e:	4a12      	ldr	r2, [pc, #72]	; (d4698 <_Z12commsHandlerPKcS0_+0x160>)
   d4650:	4912      	ldr	r1, [pc, #72]	; (d469c <_Z12commsHandlerPKcS0_+0x164>)
   d4652:	4813      	ldr	r0, [pc, #76]	; (d46a0 <_Z12commsHandlerPKcS0_+0x168>)
   d4654:	f002 f97e 	bl	d6954 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4658:	e00c      	b.n	d4674 <_Z12commsHandlerPKcS0_+0x13c>
             }
        } else { 
        } 
    //handle reset messages
    } else if (strstr(data, "RESET")){
   d465a:	4912      	ldr	r1, [pc, #72]	; (d46a4 <_Z12commsHandlerPKcS0_+0x16c>)
   d465c:	4620      	mov	r0, r4
   d465e:	f003 fcc7 	bl	d7ff0 <strstr>
   d4662:	b138      	cbz	r0, d4674 <_Z12commsHandlerPKcS0_+0x13c>
        digitalWrite(D5,LOW);
   d4664:	4629      	mov	r1, r5
   d4666:	2005      	movs	r0, #5
   d4668:	f003 f9d7 	bl	d7a1a <digitalWrite>
        digitalWrite(D6,LOW);
   d466c:	4629      	mov	r1, r5
   d466e:	2006      	movs	r0, #6
   d4670:	f003 f9d3 	bl	d7a1a <digitalWrite>
    } else {}
    //slow down flow
    delay(3000);
   d4674:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4678:	f000 fbaa 	bl	d4dd0 <delay>
}
   d467c:	b00c      	add	sp, #48	; 0x30
   d467e:	bd70      	pop	{r4, r5, r6, pc}
   d4680:	000d8188 	.word	0x000d8188
   d4684:	00535452 	.word	0x00535452
   d4688:	000d83b3 	.word	0x000d83b3
   d468c:	000d83c8 	.word	0x000d83c8
   d4690:	2003e2ec 	.word	0x2003e2ec
   d4694:	000d83d1 	.word	0x000d83d1
   d4698:	000d83dd 	.word	0x000d83dd
   d469c:	000d819a 	.word	0x000d819a
   d46a0:	2003e3dc 	.word	0x2003e3dc
   d46a4:	000d8194 	.word	0x000d8194

000d46a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d46a8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d46aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46ac:	4606      	mov	r6, r0
   d46ae:	460c      	mov	r4, r1
   d46b0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d46b2:	d916      	bls.n	d46e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46b4:	4290      	cmp	r0, r2
   d46b6:	d215      	bcs.n	d46e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d46b8:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d46bc:	1a6c      	subs	r4, r5, r1
   d46be:	f1a1 0714 	sub.w	r7, r1, #20
   d46c2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d46c4:	42af      	cmp	r7, r5
   d46c6:	d01c      	beq.n	d4702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46c8:	b12c      	cbz	r4, d46d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46ca:	4629      	mov	r1, r5
   d46cc:	4620      	mov	r0, r4
   d46ce:	f002 fbb8 	bl	d6e42 <_ZN6StringC1EOS_>
   d46d2:	7c2b      	ldrb	r3, [r5, #16]
   d46d4:	7423      	strb	r3, [r4, #16]
   d46d6:	4628      	mov	r0, r5
   d46d8:	f002 fbc3 	bl	d6e62 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d46dc:	3d14      	subs	r5, #20
   d46de:	3c14      	subs	r4, #20
   d46e0:	e7f0      	b.n	d46c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d46e2:	d00e      	beq.n	d4702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d46e4:	42ac      	cmp	r4, r5
   d46e6:	d00c      	beq.n	d4702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d46e8:	b12e      	cbz	r6, d46f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d46ea:	4621      	mov	r1, r4
   d46ec:	4630      	mov	r0, r6
   d46ee:	f002 fba8 	bl	d6e42 <_ZN6StringC1EOS_>
   d46f2:	7c23      	ldrb	r3, [r4, #16]
   d46f4:	7433      	strb	r3, [r6, #16]
   d46f6:	4620      	mov	r0, r4
   d46f8:	f002 fbb3 	bl	d6e62 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d46fc:	3414      	adds	r4, #20
   d46fe:	3614      	adds	r6, #20
   d4700:	e7f0      	b.n	d46e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4708:	2300      	movs	r3, #0
   d470a:	6003      	str	r3, [r0, #0]
   d470c:	6043      	str	r3, [r0, #4]
   d470e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4710:	684e      	ldr	r6, [r1, #4]
   d4712:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4714:	4604      	mov	r4, r0
   d4716:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4718:	dd24      	ble.n	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d471a:	f04f 0814 	mov.w	r8, #20
   d471e:	fb08 f006 	mul.w	r0, r8, r6
   d4722:	f000 fb2d 	bl	d4d80 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4726:	4605      	mov	r5, r0
   d4728:	b1e0      	cbz	r0, d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d472a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d472e:	fb08 1202 	mla	r2, r8, r2, r1
   d4732:	f7ff ffb9 	bl	d46a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4736:	6820      	ldr	r0, [r4, #0]
   d4738:	f000 fb2a 	bl	d4d90 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d473c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d473e:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4740:	683e      	ldr	r6, [r7, #0]
   d4742:	687b      	ldr	r3, [r7, #4]
   d4744:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4748:	4546      	cmp	r6, r8
   d474a:	d009      	beq.n	d4760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d474c:	b12d      	cbz	r5, d475a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d474e:	4631      	mov	r1, r6
   d4750:	4628      	mov	r0, r5
   d4752:	f002 fbef 	bl	d6f34 <_ZN6StringC1ERKS_>
   d4756:	7c33      	ldrb	r3, [r6, #16]
   d4758:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d475a:	3614      	adds	r6, #20
   d475c:	3514      	adds	r5, #20
   d475e:	e7f3      	b.n	d4748 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4760:	687b      	ldr	r3, [r7, #4]
   d4762:	6063      	str	r3, [r4, #4]
    }
}
   d4764:	4620      	mov	r0, r4
   d4766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d476c <_GLOBAL__sub_I_logHandler>:
        return 0;
    }
    else {
        return -1;
    }
}
   d476c:	b570      	push	{r4, r5, r6, lr}
   d476e:	b08c      	sub	sp, #48	; 0x30

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4770:	f000 f8b8 	bl	d48e4 <HAL_Pin_Map>
SYSTEM_THREAD(ENABLED);
   d4774:	2100      	movs	r1, #0
   d4776:	2001      	movs	r0, #1
   d4778:	f000 fa7c 	bl	d4c74 <system_thread_set_state>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d477c:	2300      	movs	r3, #0
   d477e:	9300      	str	r3, [sp, #0]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4784:	f003 f846 	bl	d7814 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4788:	4c1c      	ldr	r4, [pc, #112]	; (d47fc <_GLOBAL__sub_I_logHandler+0x90>)
   d478a:	4606      	mov	r6, r0
   d478c:	4669      	mov	r1, sp
   d478e:	a803      	add	r0, sp, #12
   d4790:	f7ff ffb8 	bl	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4794:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4796:	a903      	add	r1, sp, #12
   d4798:	a806      	add	r0, sp, #24
   d479a:	f7ff ffb3 	bl	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d479e:	4b18      	ldr	r3, [pc, #96]	; (d4800 <_GLOBAL__sub_I_logHandler+0x94>)
   d47a0:	f845 3b04 	str.w	r3, [r5], #4
   d47a4:	a906      	add	r1, sp, #24
   d47a6:	a809      	add	r0, sp, #36	; 0x24
   d47a8:	f7ff ffac 	bl	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47ac:	aa09      	add	r2, sp, #36	; 0x24
   d47ae:	2101      	movs	r1, #1
   d47b0:	4628      	mov	r0, r5
   d47b2:	f001 fae2 	bl	d5d7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47b6:	a809      	add	r0, sp, #36	; 0x24
   d47b8:	f7ff fe6a 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d47bc:	a806      	add	r0, sp, #24
   d47be:	f7ff fe67 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47c2:	4b10      	ldr	r3, [pc, #64]	; (d4804 <_GLOBAL__sub_I_logHandler+0x98>)
   d47c4:	6023      	str	r3, [r4, #0]
   d47c6:	a803      	add	r0, sp, #12
   d47c8:	6226      	str	r6, [r4, #32]
   d47ca:	f7ff fe61 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47ce:	4b0e      	ldr	r3, [pc, #56]	; (d4808 <_GLOBAL__sub_I_logHandler+0x9c>)
   d47d0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d47d2:	f003 f81f 	bl	d7814 <_Z16_fetch_usbserialv>
   d47d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d47da:	f003 f80b 	bl	d77f4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d47de:	f000 ff79 	bl	d56d4 <_ZN5spark10LogManager8instanceEv>
   d47e2:	4621      	mov	r1, r4
   d47e4:	f001 fa5c 	bl	d5ca0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL); 
   d47e8:	4668      	mov	r0, sp
   d47ea:	f7ff fe51 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47ee:	4a07      	ldr	r2, [pc, #28]	; (d480c <_GLOBAL__sub_I_logHandler+0xa0>)
   d47f0:	4907      	ldr	r1, [pc, #28]	; (d4810 <_GLOBAL__sub_I_logHandler+0xa4>)
   d47f2:	4620      	mov	r0, r4
   d47f4:	f003 f984 	bl	d7b00 <__aeabi_atexit>
        return 0;
    }
    else {
        return -1;
    }
}
   d47f8:	b00c      	add	sp, #48	; 0x30
   d47fa:	bd70      	pop	{r4, r5, r6, pc}
   d47fc:	2003e36c 	.word	0x2003e36c
   d4800:	000d8160 	.word	0x000d8160
   d4804:	000d85a8 	.word	0x000d85a8
   d4808:	000d8178 	.word	0x000d8178
   d480c:	2003e368 	.word	0x2003e368
   d4810:	000d413d 	.word	0x000d413d

000d4814 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <os_thread_create+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	685b      	ldr	r3, [r3, #4]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030248 	.word	0x00030248

000d4824 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <os_thread_is_current+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	689b      	ldr	r3, [r3, #8]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	00030248 	.word	0x00030248

000d4834 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <os_thread_join+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	691b      	ldr	r3, [r3, #16]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030248 	.word	0x00030248

000d4844 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <os_thread_cleanup+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	695b      	ldr	r3, [r3, #20]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030248 	.word	0x00030248

000d4854 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <os_mutex_create+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030248 	.word	0x00030248

000d4864 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <os_mutex_recursive_create+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030248 	.word	0x00030248

000d4874 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <os_mutex_recursive_lock+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030248 	.word	0x00030248

000d4884 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <os_mutex_recursive_unlock+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030248 	.word	0x00030248

000d4894 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <os_thread_exit+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030248 	.word	0x00030248

000d48a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_RNG_GetRandomNumber+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	685b      	ldr	r3, [r3, #4]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030218 	.word	0x00030218

000d48b4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_Delay_Milliseconds+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	689b      	ldr	r3, [r3, #8]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030218 	.word	0x00030218

000d48c4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_Delay_Microseconds+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	68db      	ldr	r3, [r3, #12]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030218 	.word	0x00030218

000d48d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	695b      	ldr	r3, [r3, #20]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030218 	.word	0x00030218

000d48e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <HAL_Pin_Map+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	681b      	ldr	r3, [r3, #0]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	0003022c 	.word	0x0003022c

000d48f4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_Validate_Pin_Function+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	685b      	ldr	r3, [r3, #4]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	0003022c 	.word	0x0003022c

000d4904 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_Pin_Mode+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	689b      	ldr	r3, [r3, #8]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	0003022c 	.word	0x0003022c

000d4914 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <HAL_Get_Pin_Mode+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	68db      	ldr	r3, [r3, #12]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	0003022c 	.word	0x0003022c

000d4924 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_GPIO_Write+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	691b      	ldr	r3, [r3, #16]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003022c 	.word	0x0003022c

000d4934 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_ADC_Read+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	0003022c 	.word	0x0003022c

000d4944 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_I2C_Write_Data+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	6a1b      	ldr	r3, [r3, #32]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030228 	.word	0x00030228

000d4954 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_I2C_Available_Data+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030228 	.word	0x00030228

000d4964 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_I2C_Read_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030228 	.word	0x00030228

000d4974 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_I2C_Peek_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030228 	.word	0x00030228

000d4984 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_I2C_Flush_Data+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030228 	.word	0x00030228

000d4994 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_I2C_Is_Enabled+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030228 	.word	0x00030228

000d49a4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_I2C_Init+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030228 	.word	0x00030228

000d49b4 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <if_name_to_index+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	691b      	ldr	r3, [r3, #16]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003026c 	.word	0x0003026c

000d49c4 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <if_index_to_name+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	695b      	ldr	r3, [r3, #20]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003026c 	.word	0x0003026c

000d49d4 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <if_get_by_index+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	699b      	ldr	r3, [r3, #24]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	0003026c 	.word	0x0003026c

000d49e4 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <if_get_addrs+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	0003026c 	.word	0x0003026c

000d49f4 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <if_free_if_addrs+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	0003026c 	.word	0x0003026c

000d4a04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <inet_inet_ntop+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	695b      	ldr	r3, [r3, #20]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030264 	.word	0x00030264

000d4a14 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <inet_inet_pton+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	699b      	ldr	r3, [r3, #24]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030264 	.word	0x00030264

000d4a24 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <inet_htonl+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6a1b      	ldr	r3, [r3, #32]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030264 	.word	0x00030264

000d4a34 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <inet_ntohs+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030264 	.word	0x00030264

000d4a44 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <inet_htons+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030264 	.word	0x00030264

000d4a54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <netdb_freeaddrinfo+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	689b      	ldr	r3, [r3, #8]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030268 	.word	0x00030268

000d4a64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <netdb_getaddrinfo+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	68db      	ldr	r3, [r3, #12]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030268 	.word	0x00030268

000d4a74 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <sock_bind+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	685b      	ldr	r3, [r3, #4]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030238 	.word	0x00030238

000d4a84 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <sock_setsockopt+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	699b      	ldr	r3, [r3, #24]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030238 	.word	0x00030238

000d4a94 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <sock_close+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	69db      	ldr	r3, [r3, #28]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030238 	.word	0x00030238

000d4aa4 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <sock_recvfrom+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030238 	.word	0x00030238

000d4ab4 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <sock_sendto+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030238 	.word	0x00030238

000d4ac4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <sock_socket+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030238 	.word	0x00030238

000d4ad4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_SPI_Init+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	69db      	ldr	r3, [r3, #28]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030230 	.word	0x00030230

000d4ae4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_SPI_Is_Enabled+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6a1b      	ldr	r3, [r3, #32]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030230 	.word	0x00030230

000d4af4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_USART_Init+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	681b      	ldr	r3, [r3, #0]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003023c 	.word	0x0003023c

000d4b04 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_USART_End+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	689b      	ldr	r3, [r3, #8]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003023c 	.word	0x0003023c

000d4b14 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_USART_Write_Data+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	68db      	ldr	r3, [r3, #12]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003023c 	.word	0x0003023c

000d4b24 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_USART_Available_Data+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	691b      	ldr	r3, [r3, #16]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	0003023c 	.word	0x0003023c

000d4b34 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_USART_Read_Data+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	695b      	ldr	r3, [r3, #20]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	0003023c 	.word	0x0003023c

000d4b44 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_USART_Peek_Data+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	699b      	ldr	r3, [r3, #24]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003023c 	.word	0x0003023c

000d4b54 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USART_Flush_Data+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	69db      	ldr	r3, [r3, #28]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003023c 	.word	0x0003023c

000d4b64 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USART_Is_Enabled+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	6a1b      	ldr	r3, [r3, #32]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003023c 	.word	0x0003023c

000d4b74 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USART_Available_Data_For_Write+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003023c 	.word	0x0003023c

000d4b84 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USART_BeginConfig+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003023c 	.word	0x0003023c

000d4b94 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USB_USART_Init+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	681b      	ldr	r3, [r3, #0]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003024c 	.word	0x0003024c

000d4ba4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USB_USART_Begin+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	685b      	ldr	r3, [r3, #4]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003024c 	.word	0x0003024c

000d4bb4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_USB_USART_End+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	689b      	ldr	r3, [r3, #8]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003024c 	.word	0x0003024c

000d4bc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_USB_USART_Available_Data+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	691b      	ldr	r3, [r3, #16]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003024c 	.word	0x0003024c

000d4bd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	695b      	ldr	r3, [r3, #20]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003024c 	.word	0x0003024c

000d4be4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_USB_USART_Receive_Data+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	699b      	ldr	r3, [r3, #24]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003024c 	.word	0x0003024c

000d4bf4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USB_USART_Send_Data+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	69db      	ldr	r3, [r3, #28]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003024c 	.word	0x0003024c

000d4c04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USB_USART_Flush_Data+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6a1b      	ldr	r3, [r3, #32]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003024c 	.word	0x0003024c

000d4c14 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <panic_+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030260 	.word	0x00030260

000d4c24 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <log_message+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030260 	.word	0x00030260

000d4c34 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <log_level_name+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	00030260 	.word	0x00030260

000d4c44 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <log_set_callbacks+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030260 	.word	0x00030260

000d4c54 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <set_system_mode+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	685b      	ldr	r3, [r3, #4]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030220 	.word	0x00030220

000d4c64 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <system_delay_ms+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	695b      	ldr	r3, [r3, #20]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030220 	.word	0x00030220

000d4c74 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <system_thread_set_state+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030220 	.word	0x00030220

000d4c84 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b03      	ldr	r3, [pc, #12]	; (d4c94 <system_ctrl_set_app_request_handler+0x10>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c8e:	9301      	str	r3, [sp, #4]
   d4c90:	bd08      	pop	{r3, pc}
   d4c92:	0000      	.short	0x0000
   d4c94:	00030220 	.word	0x00030220

000d4c98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b03      	ldr	r3, [pc, #12]	; (d4ca8 <system_ctrl_set_result+0x10>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4ca2:	9301      	str	r3, [sp, #4]
   d4ca4:	bd08      	pop	{r3, pc}
   d4ca6:	0000      	.short	0x0000
   d4ca8:	00030220 	.word	0x00030220

000d4cac <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b03      	ldr	r3, [pc, #12]	; (d4cbc <system_invoke_event_handler+0x10>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4cb6:	9301      	str	r3, [sp, #4]
   d4cb8:	bd08      	pop	{r3, pc}
   d4cba:	0000      	.short	0x0000
   d4cbc:	00030220 	.word	0x00030220

000d4cc0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <spark_function+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	685b      	ldr	r3, [r3, #4]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030244 	.word	0x00030244

000d4cd0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030244 	.word	0x00030244

000d4ce0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <network_connect+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	685b      	ldr	r3, [r3, #4]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030240 	.word	0x00030240

000d4cf0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <network_connecting+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	689b      	ldr	r3, [r3, #8]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030240 	.word	0x00030240

000d4d00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <network_disconnect+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	68db      	ldr	r3, [r3, #12]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030240 	.word	0x00030240

000d4d10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <network_ready+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	691b      	ldr	r3, [r3, #16]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030240 	.word	0x00030240

000d4d20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <network_on+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	695b      	ldr	r3, [r3, #20]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030240 	.word	0x00030240

000d4d30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <network_off+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	699b      	ldr	r3, [r3, #24]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030240 	.word	0x00030240

000d4d40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <network_listen+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	69db      	ldr	r3, [r3, #28]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030240 	.word	0x00030240

000d4d50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <network_listening+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	6a1b      	ldr	r3, [r3, #32]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030240 	.word	0x00030240

000d4d60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <network_set_listen_timeout+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030240 	.word	0x00030240

000d4d70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <network_get_listen_timeout+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030240 	.word	0x00030240

000d4d80 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <malloc+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	681b      	ldr	r3, [r3, #0]
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	0003021c 	.word	0x0003021c

000d4d90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <free+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	685b      	ldr	r3, [r3, #4]
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	0003021c 	.word	0x0003021c

000d4da0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <realloc+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	689b      	ldr	r3, [r3, #8]
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	0003021c 	.word	0x0003021c

000d4db0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <vsnprintf+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	0003021c 	.word	0x0003021c

000d4dc0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <abort+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	0003021c 	.word	0x0003021c

000d4dd0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4dd0:	2100      	movs	r1, #0
   d4dd2:	f7ff bf47 	b.w	d4c64 <system_delay_ms>

000d4dd6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4dd6:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4dd8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4dda:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4ddc:	689b      	ldr	r3, [r3, #8]
   d4dde:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4de0:	68a3      	ldr	r3, [r4, #8]
   d4de2:	3b01      	subs	r3, #1
   d4de4:	60a3      	str	r3, [r4, #8]
   d4de6:	b92b      	cbnz	r3, d4df4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4de8:	6823      	ldr	r3, [r4, #0]
   d4dea:	4620      	mov	r0, r4
   d4dec:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4df2:	4718      	bx	r3
   d4df4:	bd10      	pop	{r4, pc}

000d4df6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4df6:	680b      	ldr	r3, [r1, #0]
   d4df8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4dfa:	b113      	cbz	r3, d4e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4dfc:	685a      	ldr	r2, [r3, #4]
   d4dfe:	3201      	adds	r2, #1
   d4e00:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4e02:	4770      	bx	lr

000d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4e04:	b510      	push	{r4, lr}
   d4e06:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4e08:	6800      	ldr	r0, [r0, #0]
   d4e0a:	b128      	cbz	r0, d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e0c:	6843      	ldr	r3, [r0, #4]
   d4e0e:	3b01      	subs	r3, #1
   d4e10:	6043      	str	r3, [r0, #4]
   d4e12:	b90b      	cbnz	r3, d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4e14:	f7ff ffdf 	bl	d4dd6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4e18:	4620      	mov	r0, r4
   d4e1a:	bd10      	pop	{r4, pc}

000d4e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4e1c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e1e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d4e20:	6803      	ldr	r3, [r0, #0]
   d4e22:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4e24:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d4e26:	d00c      	beq.n	d4e42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d4e28:	b114      	cbz	r4, d4e30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4e2a:	6863      	ldr	r3, [r4, #4]
   d4e2c:	3301      	adds	r3, #1
   d4e2e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4e30:	6828      	ldr	r0, [r5, #0]
   d4e32:	b128      	cbz	r0, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e34:	6843      	ldr	r3, [r0, #4]
   d4e36:	3b01      	subs	r3, #1
   d4e38:	6043      	str	r3, [r0, #4]
   d4e3a:	b90b      	cbnz	r3, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d4e3c:	f7ff ffcb 	bl	d4dd6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4e40:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d4e42:	4628      	mov	r0, r5
   d4e44:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e48:	4802      	ldr	r0, [pc, #8]	; (d4e54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4e4a:	2300      	movs	r3, #0
   d4e4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4e4e:	f7ff bd09 	b.w	d4864 <os_mutex_recursive_create>
   d4e52:	bf00      	nop
   d4e54:	2003e390 	.word	0x2003e390

000d4e58 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e58:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e5a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e5c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e5e:	b113      	cbz	r3, d4e66 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e60:	2203      	movs	r2, #3
   d4e62:	4601      	mov	r1, r0
   d4e64:	4798      	blx	r3
    }
   d4e66:	4620      	mov	r0, r4
   d4e68:	bd10      	pop	{r4, pc}

000d4e6a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4e6a:	b510      	push	{r4, lr}
   d4e6c:	b088      	sub	sp, #32
   d4e6e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4e70:	4668      	mov	r0, sp
   d4e72:	f002 f83d 	bl	d6ef0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4e76:	4669      	mov	r1, sp
   d4e78:	a804      	add	r0, sp, #16
   d4e7a:	f002 f85b 	bl	d6f34 <_ZN6StringC1ERKS_>
   d4e7e:	a804      	add	r0, sp, #16
   d4e80:	47a0      	blx	r4
   d4e82:	4604      	mov	r4, r0
   d4e84:	a804      	add	r0, sp, #16
   d4e86:	f001 ffec 	bl	d6e62 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4e8a:	4668      	mov	r0, sp
   d4e8c:	f001 ffe9 	bl	d6e62 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4e90:	4620      	mov	r0, r4
   d4e92:	b008      	add	sp, #32
   d4e94:	bd10      	pop	{r4, pc}

000d4e96 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4e96:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4e98:	2410      	movs	r4, #16
   d4e9a:	b085      	sub	sp, #20
   d4e9c:	4607      	mov	r7, r0
   d4e9e:	460e      	mov	r6, r1
   d4ea0:	4615      	mov	r5, r2
   d4ea2:	2100      	movs	r1, #0
   d4ea4:	4622      	mov	r2, r4
   d4ea6:	4668      	mov	r0, sp
   d4ea8:	f002 ffd9 	bl	d7e5e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4eac:	2200      	movs	r2, #0
   d4eae:	4669      	mov	r1, sp
   d4eb0:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4eb2:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4eb6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4eb8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4eba:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ebc:	f7ff ff00 	bl	d4cc0 <spark_function>
}
   d4ec0:	b005      	add	sp, #20
   d4ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ec4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ec4:	2200      	movs	r2, #0
   d4ec6:	4611      	mov	r1, r2
   d4ec8:	6840      	ldr	r0, [r0, #4]
   d4eca:	f7ff bf41 	b.w	d4d50 <network_listening>

000d4ece <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ece:	2200      	movs	r2, #0
   d4ed0:	4611      	mov	r1, r2
   d4ed2:	6840      	ldr	r0, [r0, #4]
   d4ed4:	f7ff bf4c 	b.w	d4d70 <network_get_listen_timeout>

000d4ed8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ed8:	2200      	movs	r2, #0
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	f7ff bf40 	b.w	d4d60 <network_set_listen_timeout>

000d4ee0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	f081 0101 	eor.w	r1, r1, #1
   d4ee6:	6840      	ldr	r0, [r0, #4]
   d4ee8:	f7ff bf2a 	b.w	d4d40 <network_listen>

000d4eec <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4eec:	2300      	movs	r3, #0
   d4eee:	461a      	mov	r2, r3
   d4ef0:	4619      	mov	r1, r3
   d4ef2:	6840      	ldr	r0, [r0, #4]
   d4ef4:	f7ff bf1c 	b.w	d4d30 <network_off>

000d4ef8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ef8:	2300      	movs	r3, #0
   d4efa:	461a      	mov	r2, r3
   d4efc:	4619      	mov	r1, r3
   d4efe:	6840      	ldr	r0, [r0, #4]
   d4f00:	f7ff bf0e 	b.w	d4d20 <network_on>

000d4f04 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f04:	2200      	movs	r2, #0
   d4f06:	4611      	mov	r1, r2
   d4f08:	6840      	ldr	r0, [r0, #4]
   d4f0a:	f7ff bf01 	b.w	d4d10 <network_ready>

000d4f0e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f0e:	2200      	movs	r2, #0
   d4f10:	4611      	mov	r1, r2
   d4f12:	6840      	ldr	r0, [r0, #4]
   d4f14:	f7ff beec 	b.w	d4cf0 <network_connecting>

000d4f18 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f18:	2200      	movs	r2, #0
   d4f1a:	2102      	movs	r1, #2
   d4f1c:	6840      	ldr	r0, [r0, #4]
   d4f1e:	f7ff beef 	b.w	d4d00 <network_disconnect>

000d4f22 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f22:	2300      	movs	r3, #0
   d4f24:	461a      	mov	r2, r3
   d4f26:	6840      	ldr	r0, [r0, #4]
   d4f28:	f7ff beda 	b.w	d4ce0 <network_connect>

000d4f2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f2c:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f2e:	2203      	movs	r2, #3
   d4f30:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f32:	4a02      	ldr	r2, [pc, #8]	; (d4f3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f34:	601a      	str	r2, [r3, #0]
   d4f36:	4770      	bx	lr
   d4f38:	2003e394 	.word	0x2003e394
   d4f3c:	000d83f4 	.word	0x000d83f4

000d4f40 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4f40:	4770      	bx	lr

000d4f42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f44:	4606      	mov	r6, r0
   d4f46:	4615      	mov	r5, r2
   d4f48:	460c      	mov	r4, r1
   d4f4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f4c:	42bc      	cmp	r4, r7
   d4f4e:	d006      	beq.n	d4f5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f50:	6833      	ldr	r3, [r6, #0]
   d4f52:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f56:	689b      	ldr	r3, [r3, #8]
   d4f58:	4630      	mov	r0, r6
   d4f5a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f5c:	e7f6      	b.n	d4f4c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f5e:	4628      	mov	r0, r5
   d4f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f62 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f62:	2200      	movs	r2, #0
   d4f64:	7c00      	ldrb	r0, [r0, #16]
   d4f66:	f7ff bced 	b.w	d4944 <HAL_I2C_Write_Data>

000d4f6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f6a:	2100      	movs	r1, #0
   d4f6c:	7c00      	ldrb	r0, [r0, #16]
   d4f6e:	f7ff bcf1 	b.w	d4954 <HAL_I2C_Available_Data>

000d4f72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f72:	2100      	movs	r1, #0
   d4f74:	7c00      	ldrb	r0, [r0, #16]
   d4f76:	f7ff bcf5 	b.w	d4964 <HAL_I2C_Read_Data>

000d4f7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f7a:	2100      	movs	r1, #0
   d4f7c:	7c00      	ldrb	r0, [r0, #16]
   d4f7e:	f7ff bcf9 	b.w	d4974 <HAL_I2C_Peek_Data>

000d4f82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f82:	2100      	movs	r1, #0
   d4f84:	7c00      	ldrb	r0, [r0, #16]
   d4f86:	f7ff bcfd 	b.w	d4984 <HAL_I2C_Flush_Data>

000d4f8a <_ZN7TwoWireD0Ev>:
   d4f8a:	b510      	push	{r4, lr}
   d4f8c:	2114      	movs	r1, #20
   d4f8e:	4604      	mov	r4, r0
   d4f90:	f002 fdbb 	bl	d7b0a <_ZdlPvj>
   d4f94:	4620      	mov	r0, r4
   d4f96:	bd10      	pop	{r4, pc}

000d4f98 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4f98:	b510      	push	{r4, lr}
   d4f9a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fa0:	4608      	mov	r0, r1
   d4fa2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4fa4:	2100      	movs	r1, #0
   d4fa6:	4b04      	ldr	r3, [pc, #16]	; (d4fb8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4fa8:	7420      	strb	r0, [r4, #16]
   d4faa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4fac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4fae:	f7ff fcf9 	bl	d49a4 <HAL_I2C_Init>

}
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	bd10      	pop	{r4, pc}
   d4fb6:	bf00      	nop
   d4fb8:	000d8428 	.word	0x000d8428

000d4fbc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4fbc:	2100      	movs	r1, #0
   d4fbe:	7c00      	ldrb	r0, [r0, #16]
   d4fc0:	f7ff bce8 	b.w	d4994 <HAL_I2C_Is_Enabled>

000d4fc4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fc4:	4770      	bx	lr

000d4fc6 <_ZN9IPAddressD0Ev>:
   d4fc6:	b510      	push	{r4, lr}
   d4fc8:	2118      	movs	r1, #24
   d4fca:	4604      	mov	r4, r0
   d4fcc:	f002 fd9d 	bl	d7b0a <_ZdlPvj>
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fd6:	7d03      	ldrb	r3, [r0, #20]
   d4fd8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fda:	b08d      	sub	sp, #52	; 0x34
   d4fdc:	460e      	mov	r6, r1
   d4fde:	f100 0704 	add.w	r7, r0, #4
   d4fe2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fe6:	d002      	beq.n	d4fee <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fe8:	f100 0508 	add.w	r5, r0, #8
   d4fec:	e018      	b.n	d5020 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fee:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ff0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ff2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ff6:	232f      	movs	r3, #47	; 0x2f
   d4ff8:	462a      	mov	r2, r5
   d4ffa:	200a      	movs	r0, #10
   d4ffc:	f7ff fd02 	bl	d4a04 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5000:	4628      	mov	r0, r5
   d5002:	f002 ffb9 	bl	d7f78 <strlen>
   d5006:	6833      	ldr	r3, [r6, #0]
   d5008:	4602      	mov	r2, r0
   d500a:	68db      	ldr	r3, [r3, #12]
   d500c:	4629      	mov	r1, r5
   d500e:	4630      	mov	r0, r6
   d5010:	4798      	blx	r3
   d5012:	e00f      	b.n	d5034 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5014:	b124      	cbz	r4, d5020 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5016:	212e      	movs	r1, #46	; 0x2e
   d5018:	4630      	mov	r0, r6
   d501a:	f001 fe25 	bl	d6c68 <_ZN5Print5printEc>
   d501e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5020:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5024:	220a      	movs	r2, #10
   d5026:	4630      	mov	r0, r6
   d5028:	f001 fe64 	bl	d6cf4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d502c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d502e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5030:	d1f0      	bne.n	d5014 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5032:	4620      	mov	r0, r4
    }
    return n;
}
   d5034:	b00d      	add	sp, #52	; 0x34
   d5036:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5038 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5038:	b510      	push	{r4, lr}
   d503a:	4b05      	ldr	r3, [pc, #20]	; (d5050 <_ZN9IPAddressC1Ev+0x18>)
   d503c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d503e:	2211      	movs	r2, #17
   d5040:	f840 3b04 	str.w	r3, [r0], #4
   d5044:	2100      	movs	r1, #0
   d5046:	f002 ff0a 	bl	d7e5e <memset>
{
    clear();
}
   d504a:	4620      	mov	r0, r4
   d504c:	bd10      	pop	{r4, pc}
   d504e:	bf00      	nop
   d5050:	000d8450 	.word	0x000d8450

000d5054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5054:	4603      	mov	r3, r0
   d5056:	4a07      	ldr	r2, [pc, #28]	; (d5074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5058:	b510      	push	{r4, lr}
   d505a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d505e:	f101 0210 	add.w	r2, r1, #16
   d5062:	f851 4b04 	ldr.w	r4, [r1], #4
   d5066:	f843 4b04 	str.w	r4, [r3], #4
   d506a:	4291      	cmp	r1, r2
   d506c:	d1f9      	bne.n	d5062 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d506e:	780a      	ldrb	r2, [r1, #0]
   d5070:	701a      	strb	r2, [r3, #0]
}
   d5072:	bd10      	pop	{r4, pc}
   d5074:	000d8450 	.word	0x000d8450

000d5078 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5078:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d507a:	2b04      	cmp	r3, #4
   d507c:	d101      	bne.n	d5082 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d507e:	6840      	ldr	r0, [r0, #4]
   d5080:	e008      	b.n	d5094 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5082:	2b06      	cmp	r3, #6
   d5084:	d10a      	bne.n	d509c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5086:	6843      	ldr	r3, [r0, #4]
   d5088:	b953      	cbnz	r3, d50a0 <_ZNK9IPAddresscvbEv+0x28>
   d508a:	6883      	ldr	r3, [r0, #8]
   d508c:	b943      	cbnz	r3, d50a0 <_ZNK9IPAddresscvbEv+0x28>
   d508e:	68c3      	ldr	r3, [r0, #12]
   d5090:	b933      	cbnz	r3, d50a0 <_ZNK9IPAddresscvbEv+0x28>
   d5092:	6900      	ldr	r0, [r0, #16]
   d5094:	3000      	adds	r0, #0
   d5096:	bf18      	it	ne
   d5098:	2001      	movne	r0, #1
   d509a:	4770      	bx	lr
    } else {
        return false;
   d509c:	2000      	movs	r0, #0
   d509e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d50a0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d50a2:	4770      	bx	lr

000d50a4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50b6:	2304      	movs	r3, #4
   d50b8:	6041      	str	r1, [r0, #4]
   d50ba:	7503      	strb	r3, [r0, #20]
   d50bc:	bd10      	pop	{r4, pc}

000d50be <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50c0:	780d      	ldrb	r5, [r1, #0]
   d50c2:	788b      	ldrb	r3, [r1, #2]
   d50c4:	784a      	ldrb	r2, [r1, #1]
   d50c6:	78c9      	ldrb	r1, [r1, #3]
   d50c8:	9100      	str	r1, [sp, #0]
   d50ca:	4629      	mov	r1, r5
   d50cc:	f7ff ffea 	bl	d50a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50d0:	b003      	add	sp, #12
   d50d2:	bd30      	pop	{r4, r5, pc}

000d50d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d50d4:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d50d8:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d50da:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d50de:	2901      	cmp	r1, #1
   d50e0:	4610      	mov	r0, r2
   d50e2:	d104      	bne.n	d50ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d50e4:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d50e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d50ec:	e004      	b.n	d50f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d50ee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d50f0:	bf04      	itt	eq
   d50f2:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d50f6:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d50f8:	3b01      	subs	r3, #1
   d50fa:	f102 0210 	add.w	r2, r2, #16
   d50fe:	d1ec      	bne.n	d50da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d5100:	4770      	bx	lr

000d5102 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d5102:	b40e      	push	{r1, r2, r3}
   d5104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5108:	b087      	sub	sp, #28
   d510a:	af00      	add	r7, sp, #0
   d510c:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d5110:	4605      	mov	r5, r0
   d5112:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d5116:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5118:	4623      	mov	r3, r4
   d511a:	4632      	mov	r2, r6
   d511c:	2110      	movs	r1, #16
   d511e:	f107 0008 	add.w	r0, r7, #8
   d5122:	f7ff fe45 	bl	d4db0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d5126:	280f      	cmp	r0, #15
   d5128:	d916      	bls.n	d5158 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d512a:	f100 0308 	add.w	r3, r0, #8
   d512e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d5132:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d5134:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5138:	4632      	mov	r2, r6
   d513a:	1c41      	adds	r1, r0, #1
   d513c:	4623      	mov	r3, r4
   d513e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d5140:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5142:	f7ff fe35 	bl	d4db0 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d5146:	1e02      	subs	r2, r0, #0
   d5148:	dd04      	ble.n	d5154 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d514a:	682b      	ldr	r3, [r5, #0]
   d514c:	4669      	mov	r1, sp
   d514e:	689b      	ldr	r3, [r3, #8]
   d5150:	4628      	mov	r0, r5
   d5152:	4798      	blx	r3
   d5154:	46c5      	mov	sp, r8
   d5156:	e007      	b.n	d5168 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d5158:	b130      	cbz	r0, d5168 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d515a:	682b      	ldr	r3, [r5, #0]
   d515c:	4602      	mov	r2, r0
   d515e:	689b      	ldr	r3, [r3, #8]
   d5160:	f107 0108 	add.w	r1, r7, #8
   d5164:	4628      	mov	r0, r5
   d5166:	4798      	blx	r3
    }
}
   d5168:	371c      	adds	r7, #28
   d516a:	46bd      	mov	sp, r7
   d516c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5170:	b003      	add	sp, #12
   d5172:	4770      	bx	lr

000d5174 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5174:	b513      	push	{r0, r1, r4, lr}
   d5176:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5178:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d517a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d517e:	6894      	ldr	r4, [r2, #8]
   d5180:	4619      	mov	r1, r3
   d5182:	2201      	movs	r2, #1
   d5184:	47a0      	blx	r4
}
   d5186:	b002      	add	sp, #8
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d518a:	6883      	ldr	r3, [r0, #8]
   d518c:	b1fb      	cbz	r3, d51ce <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d518e:	781a      	ldrb	r2, [r3, #0]
   d5190:	2a03      	cmp	r2, #3
   d5192:	d81a      	bhi.n	d51ca <_ZNK5spark9JSONValue4typeEv+0x40>
   d5194:	e8df f002 	tbb	[pc, r2]
   d5198:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d519c:	2005      	movs	r0, #5
   d519e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d51a0:	6802      	ldr	r2, [r0, #0]
   d51a2:	685b      	ldr	r3, [r3, #4]
   d51a4:	6852      	ldr	r2, [r2, #4]
   d51a6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d51a8:	282d      	cmp	r0, #45	; 0x2d
   d51aa:	d014      	beq.n	d51d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d51ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d51b0:	2b09      	cmp	r3, #9
   d51b2:	d910      	bls.n	d51d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d51b4:	2874      	cmp	r0, #116	; 0x74
   d51b6:	d010      	beq.n	d51da <_ZNK5spark9JSONValue4typeEv+0x50>
   d51b8:	2866      	cmp	r0, #102	; 0x66
   d51ba:	d00e      	beq.n	d51da <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d51bc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d51c0:	4258      	negs	r0, r3
   d51c2:	4158      	adcs	r0, r3
   d51c4:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d51c6:	2006      	movs	r0, #6
   d51c8:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d51ca:	2000      	movs	r0, #0
   d51cc:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d51ce:	4618      	mov	r0, r3
   d51d0:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d51d2:	2004      	movs	r0, #4
   d51d4:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d51d6:	2003      	movs	r0, #3
   d51d8:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d51da:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d51dc:	4770      	bx	lr

000d51de <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d51de:	b510      	push	{r4, lr}
   d51e0:	4604      	mov	r4, r0
    switch (type()) {
   d51e2:	f7ff ffd2 	bl	d518a <_ZNK5spark9JSONValue4typeEv>
   d51e6:	2802      	cmp	r0, #2
   d51e8:	d00d      	beq.n	d5206 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d51ea:	d316      	bcc.n	d521a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d51ec:	2804      	cmp	r0, #4
   d51ee:	d814      	bhi.n	d521a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d51f0:	6822      	ldr	r2, [r4, #0]
   d51f2:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d51f4:	6850      	ldr	r0, [r2, #4]
   d51f6:	685b      	ldr	r3, [r3, #4]
   d51f8:	220a      	movs	r2, #10
   d51fa:	2100      	movs	r1, #0
   d51fc:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d51fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d5202:	f002 bf95 	b.w	d8130 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d5206:	6822      	ldr	r2, [r4, #0]
   d5208:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d520a:	6852      	ldr	r2, [r2, #4]
   d520c:	685b      	ldr	r3, [r3, #4]
   d520e:	5cd0      	ldrb	r0, [r2, r3]
   d5210:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5214:	4258      	negs	r0, r3
   d5216:	4158      	adcs	r0, r3
   d5218:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d521a:	2000      	movs	r0, #0
    }
}
   d521c:	bd10      	pop	{r4, pc}

000d521e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d521e:	b510      	push	{r4, lr}
    if (!n_) {
   d5220:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d5222:	4604      	mov	r4, r0
    if (!n_) {
   d5224:	b15b      	cbz	r3, d523e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d5226:	6880      	ldr	r0, [r0, #8]
   d5228:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d522a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d522c:	3010      	adds	r0, #16
   d522e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5230:	6120      	str	r0, [r4, #16]
    --n_;
   d5232:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5234:	b12b      	cbz	r3, d5242 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d5236:	f7ff ff4d 	bl	d50d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d523a:	60a0      	str	r0, [r4, #8]
   d523c:	e001      	b.n	d5242 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d523e:	4618      	mov	r0, r3
   d5240:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d5242:	2001      	movs	r0, #1
}
   d5244:	bd10      	pop	{r4, pc}

000d5246 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d5246:	b510      	push	{r4, lr}
    write('}');
   d5248:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d524a:	4604      	mov	r4, r0
    write('}');
   d524c:	f7ff ff92 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5250:	2301      	movs	r3, #1
   d5252:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5254:	4620      	mov	r0, r4
   d5256:	bd10      	pop	{r4, pc}

000d5258 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d5258:	b508      	push	{r3, lr}
    switch (state_) {
   d525a:	7903      	ldrb	r3, [r0, #4]
   d525c:	2b01      	cmp	r3, #1
   d525e:	d002      	beq.n	d5266 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d5260:	2b02      	cmp	r3, #2
   d5262:	d002      	beq.n	d526a <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d5264:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d5266:	212c      	movs	r1, #44	; 0x2c
   d5268:	e000      	b.n	d526c <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d526a:	213a      	movs	r1, #58	; 0x3a
   d526c:	f7ff ff82 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
   d5270:	bd08      	pop	{r3, pc}

000d5272 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d5272:	b510      	push	{r4, lr}
   d5274:	4604      	mov	r4, r0
    writeSeparator();
   d5276:	f7ff ffef 	bl	d5258 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d527a:	4620      	mov	r0, r4
   d527c:	217b      	movs	r1, #123	; 0x7b
   d527e:	f7ff ff79 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d5282:	2300      	movs	r3, #0
   d5284:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5286:	4620      	mov	r0, r4
   d5288:	bd10      	pop	{r4, pc}
	...

000d528c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d528c:	b538      	push	{r3, r4, r5, lr}
   d528e:	4604      	mov	r4, r0
   d5290:	460d      	mov	r5, r1
    writeSeparator();
   d5292:	f7ff ffe1 	bl	d5258 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d5296:	6823      	ldr	r3, [r4, #0]
   d5298:	4904      	ldr	r1, [pc, #16]	; (d52ac <_ZN5spark10JSONWriter5valueEi+0x20>)
   d529a:	68db      	ldr	r3, [r3, #12]
   d529c:	4620      	mov	r0, r4
   d529e:	462a      	mov	r2, r5
   d52a0:	4798      	blx	r3
    state_ = NEXT;
   d52a2:	2301      	movs	r3, #1
   d52a4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d52a6:	4620      	mov	r0, r4
   d52a8:	bd38      	pop	{r3, r4, r5, pc}
   d52aa:	bf00      	nop
   d52ac:	000d8625 	.word	0x000d8625

000d52b0 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d52b0:	b538      	push	{r3, r4, r5, lr}
   d52b2:	4604      	mov	r4, r0
   d52b4:	460d      	mov	r5, r1
    writeSeparator();
   d52b6:	f7ff ffcf 	bl	d5258 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d52ba:	6823      	ldr	r3, [r4, #0]
   d52bc:	4904      	ldr	r1, [pc, #16]	; (d52d0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d52be:	68db      	ldr	r3, [r3, #12]
   d52c0:	4620      	mov	r0, r4
   d52c2:	462a      	mov	r2, r5
   d52c4:	4798      	blx	r3
    state_ = NEXT;
   d52c6:	2301      	movs	r3, #1
   d52c8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d52ca:	4620      	mov	r0, r4
   d52cc:	bd38      	pop	{r3, r4, r5, pc}
   d52ce:	bf00      	nop
   d52d0:	000d846b 	.word	0x000d846b

000d52d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d52d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52d6:	460d      	mov	r5, r1
   d52d8:	4617      	mov	r7, r2
    write('"');
   d52da:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d52dc:	4604      	mov	r4, r0
   d52de:	442f      	add	r7, r5
    write('"');
   d52e0:	f7ff ff48 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
   d52e4:	462a      	mov	r2, r5
    const char* const end = str + size;
   d52e6:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d52e8:	42ba      	cmp	r2, r7
   d52ea:	d038      	beq.n	d535e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d52ec:	4616      	mov	r6, r2
   d52ee:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d52f2:	2d22      	cmp	r5, #34	; 0x22
   d52f4:	d003      	beq.n	d52fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d52f6:	2d5c      	cmp	r5, #92	; 0x5c
   d52f8:	d001      	beq.n	d52fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d52fa:	2d1f      	cmp	r5, #31
   d52fc:	d82d      	bhi.n	d535a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d52fe:	6823      	ldr	r3, [r4, #0]
   d5300:	1a52      	subs	r2, r2, r1
   d5302:	689b      	ldr	r3, [r3, #8]
   d5304:	4620      	mov	r0, r4
   d5306:	4798      	blx	r3
            write('\\');
   d5308:	215c      	movs	r1, #92	; 0x5c
   d530a:	4620      	mov	r0, r4
   d530c:	f7ff ff32 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d5310:	2d0c      	cmp	r5, #12
   d5312:	d019      	beq.n	d5348 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d5314:	d807      	bhi.n	d5326 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d5316:	2d09      	cmp	r5, #9
   d5318:	d00f      	beq.n	d533a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d531a:	2d0a      	cmp	r5, #10
   d531c:	d012      	beq.n	d5344 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d531e:	2d08      	cmp	r5, #8
   d5320:	d114      	bne.n	d534c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5322:	2162      	movs	r1, #98	; 0x62
   d5324:	e00a      	b.n	d533c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d5326:	2d22      	cmp	r5, #34	; 0x22
   d5328:	d005      	beq.n	d5336 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d532a:	2d5c      	cmp	r5, #92	; 0x5c
   d532c:	d003      	beq.n	d5336 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d532e:	2d0d      	cmp	r5, #13
   d5330:	d10c      	bne.n	d534c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d5332:	2172      	movs	r1, #114	; 0x72
   d5334:	e002      	b.n	d533c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d5336:	4629      	mov	r1, r5
   d5338:	e000      	b.n	d533c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d533a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d533c:	4620      	mov	r0, r4
   d533e:	f7ff ff19 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
                break;
   d5342:	e009      	b.n	d5358 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d5344:	216e      	movs	r1, #110	; 0x6e
   d5346:	e7f9      	b.n	d533c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d5348:	2166      	movs	r1, #102	; 0x66
   d534a:	e7f7      	b.n	d533c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d534c:	6823      	ldr	r3, [r4, #0]
   d534e:	490a      	ldr	r1, [pc, #40]	; (d5378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d5350:	68db      	ldr	r3, [r3, #12]
   d5352:	462a      	mov	r2, r5
   d5354:	4620      	mov	r0, r4
   d5356:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d5358:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d535a:	4632      	mov	r2, r6
   d535c:	e7c4      	b.n	d52e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d535e:	4291      	cmp	r1, r2
   d5360:	d004      	beq.n	d536c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d5362:	6823      	ldr	r3, [r4, #0]
   d5364:	1a52      	subs	r2, r2, r1
   d5366:	689d      	ldr	r5, [r3, #8]
   d5368:	4620      	mov	r0, r4
   d536a:	47a8      	blx	r5
    }
    write('"');
   d536c:	2122      	movs	r1, #34	; 0x22
   d536e:	4620      	mov	r0, r4
   d5370:	f7ff ff00 	bl	d5174 <_ZN5spark10JSONWriter5writeEc>
   d5374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5376:	bf00      	nop
   d5378:	000d8476 	.word	0x000d8476

000d537c <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d537c:	b570      	push	{r4, r5, r6, lr}
   d537e:	4604      	mov	r4, r0
   d5380:	460d      	mov	r5, r1
   d5382:	4616      	mov	r6, r2
    writeSeparator();
   d5384:	f7ff ff68 	bl	d5258 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5388:	4620      	mov	r0, r4
   d538a:	4632      	mov	r2, r6
   d538c:	4629      	mov	r1, r5
   d538e:	f7ff ffa1 	bl	d52d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5392:	2302      	movs	r3, #2
   d5394:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5396:	4620      	mov	r0, r4
   d5398:	bd70      	pop	{r4, r5, r6, pc}

000d539a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d539a:	b570      	push	{r4, r5, r6, lr}
   d539c:	4604      	mov	r4, r0
   d539e:	460d      	mov	r5, r1
   d53a0:	4616      	mov	r6, r2
    writeSeparator();
   d53a2:	f7ff ff59 	bl	d5258 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d53a6:	4620      	mov	r0, r4
   d53a8:	4632      	mov	r2, r6
   d53aa:	4629      	mov	r1, r5
   d53ac:	f7ff ff92 	bl	d52d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d53b0:	2301      	movs	r3, #1
   d53b2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d53b4:	4620      	mov	r0, r4
   d53b6:	bd70      	pop	{r4, r5, r6, pc}

000d53b8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d53b8:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d53ba:	2300      	movs	r3, #0
   d53bc:	4604      	mov	r4, r0
   d53be:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d53c0:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d53c2:	4810      	ldr	r0, [pc, #64]	; (d5404 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d53c4:	60a0      	str	r0, [r4, #8]
   d53c6:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d53c8:	b1d1      	cbz	r1, d5400 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d53ca:	780b      	ldrb	r3, [r1, #0]
   d53cc:	2b03      	cmp	r3, #3
   d53ce:	d006      	beq.n	d53de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d53d0:	b9b3      	cbnz	r3, d5400 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d53d2:	6813      	ldr	r3, [r2, #0]
   d53d4:	6858      	ldr	r0, [r3, #4]
   d53d6:	684b      	ldr	r3, [r1, #4]
   d53d8:	5cc3      	ldrb	r3, [r0, r3]
   d53da:	2b6e      	cmp	r3, #110	; 0x6e
   d53dc:	d008      	beq.n	d53f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d53de:	6813      	ldr	r3, [r2, #0]
   d53e0:	6858      	ldr	r0, [r3, #4]
   d53e2:	684b      	ldr	r3, [r1, #4]
   d53e4:	4403      	add	r3, r0
   d53e6:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d53e8:	688b      	ldr	r3, [r1, #8]
   d53ea:	6849      	ldr	r1, [r1, #4]
   d53ec:	1a5b      	subs	r3, r3, r1
   d53ee:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d53f0:	4611      	mov	r1, r2
   d53f2:	4620      	mov	r0, r4
   d53f4:	f851 3b04 	ldr.w	r3, [r1], #4
   d53f8:	f840 3b04 	str.w	r3, [r0], #4
   d53fc:	f7ff fd0e 	bl	d4e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d5400:	4620      	mov	r0, r4
   d5402:	bd10      	pop	{r4, pc}
   d5404:	000d8568 	.word	0x000d8568

000d5408 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5408:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d540a:	b510      	push	{r4, lr}
   d540c:	4604      	mov	r4, r0
   d540e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5410:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5412:	6083      	str	r3, [r0, #8]
   d5414:	60c3      	str	r3, [r0, #12]
   d5416:	6103      	str	r3, [r0, #16]
   d5418:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d541a:	b171      	cbz	r1, d543a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d541c:	780b      	ldrb	r3, [r1, #0]
   d541e:	2b01      	cmp	r3, #1
   d5420:	d10b      	bne.n	d543a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5422:	f101 0310 	add.w	r3, r1, #16
   d5426:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d5428:	68cb      	ldr	r3, [r1, #12]
   d542a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d542c:	4611      	mov	r1, r2
   d542e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5432:	f840 3b04 	str.w	r3, [r0], #4
   d5436:	f7ff fcf1 	bl	d4e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d543a:	4620      	mov	r0, r4
   d543c:	bd10      	pop	{r4, pc}

000d543e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d543e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5440:	b510      	push	{r4, lr}
   d5442:	4604      	mov	r4, r0
   d5444:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5446:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d5448:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d544a:	b131      	cbz	r1, d545a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d544c:	4611      	mov	r1, r2
   d544e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5452:	f840 3b04 	str.w	r3, [r0], #4
   d5456:	f7ff fce1 	bl	d4e1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d545a:	4620      	mov	r0, r4
   d545c:	bd10      	pop	{r4, pc}

000d545e <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d545e:	6880      	ldr	r0, [r0, #8]
   d5460:	6803      	ldr	r3, [r0, #0]
   d5462:	68db      	ldr	r3, [r3, #12]
   d5464:	4718      	bx	r3

000d5466 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5466:	4770      	bx	lr

000d5468 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5468:	b119      	cbz	r1, d5472 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d546a:	680b      	ldr	r3, [r1, #0]
   d546c:	4608      	mov	r0, r1
   d546e:	685b      	ldr	r3, [r3, #4]
   d5470:	4718      	bx	r3
   d5472:	4770      	bx	lr

000d5474 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5474:	b119      	cbz	r1, d547e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5476:	680b      	ldr	r3, [r1, #0]
   d5478:	4608      	mov	r0, r1
   d547a:	685b      	ldr	r3, [r3, #4]
   d547c:	4718      	bx	r3
   d547e:	4770      	bx	lr

000d5480 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5480:	4770      	bx	lr

000d5482 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5482:	4770      	bx	lr

000d5484 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5484:	4770      	bx	lr

000d5486 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5486:	b538      	push	{r3, r4, r5, lr}
   d5488:	4604      	mov	r4, r0
   d548a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d548c:	6800      	ldr	r0, [r0, #0]
   d548e:	212e      	movs	r1, #46	; 0x2e
   d5490:	f002 fd5e 	bl	d7f50 <strchrnul>
    size = s - category;
   d5494:	6823      	ldr	r3, [r4, #0]
   d5496:	1ac3      	subs	r3, r0, r3
   d5498:	602b      	str	r3, [r5, #0]
    if (size) {
   d549a:	b123      	cbz	r3, d54a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d549c:	7803      	ldrb	r3, [r0, #0]
   d549e:	b103      	cbz	r3, d54a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d54a0:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54a2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d54a4:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d54a6:	4618      	mov	r0, r3
}
   d54a8:	bd38      	pop	{r3, r4, r5, pc}

000d54aa <_ZN5spark16JSONStreamWriterD0Ev>:
   d54aa:	b510      	push	{r4, lr}
   d54ac:	210c      	movs	r1, #12
   d54ae:	4604      	mov	r4, r0
   d54b0:	f002 fb2b 	bl	d7b0a <_ZdlPvj>
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd10      	pop	{r4, pc}

000d54b8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d54b8:	b510      	push	{r4, lr}
   d54ba:	2104      	movs	r1, #4
   d54bc:	4604      	mov	r4, r0
   d54be:	f002 fb24 	bl	d7b0a <_ZdlPvj>
   d54c2:	4620      	mov	r0, r4
   d54c4:	bd10      	pop	{r4, pc}

000d54c6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d54c6:	b510      	push	{r4, lr}
   d54c8:	2104      	movs	r1, #4
   d54ca:	4604      	mov	r4, r0
   d54cc:	f002 fb1d 	bl	d7b0a <_ZdlPvj>
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d54d4:	b538      	push	{r3, r4, r5, lr}
   d54d6:	460c      	mov	r4, r1
   d54d8:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d54da:	f002 f99b 	bl	d7814 <_Z16_fetch_usbserialv>
   d54de:	4284      	cmp	r4, r0
   d54e0:	d00d      	beq.n	d54fe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d54e2:	f002 f90b 	bl	d76fc <_Z22__fetch_global_Serial1v>
   d54e6:	4284      	cmp	r4, r0
   d54e8:	d105      	bne.n	d54f6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d54ea:	f002 f907 	bl	d76fc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d54ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d54f2:	f002 b8fc 	b.w	d76ee <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d54f6:	4621      	mov	r1, r4
   d54f8:	4628      	mov	r0, r5
   d54fa:	f7ff ffbb 	bl	d5474 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d54fe:	bd38      	pop	{r3, r4, r5, pc}

000d5500 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5500:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5502:	f002 fd2f 	bl	d7f64 <strcmp>
}
   d5506:	fab0 f080 	clz	r0, r0
   d550a:	0940      	lsrs	r0, r0, #5
   d550c:	bd08      	pop	{r3, pc}

000d550e <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d550e:	b538      	push	{r3, r4, r5, lr}
   d5510:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5512:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5514:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5516:	f002 fd2f 	bl	d7f78 <strlen>
   d551a:	4621      	mov	r1, r4
   d551c:	4602      	mov	r2, r0
   d551e:	4628      	mov	r0, r5
}
   d5520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5524:	f7ff bf39 	b.w	d539a <_ZN5spark10JSONWriter5valueEPKcj>

000d5528 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5528:	6800      	ldr	r0, [r0, #0]
   d552a:	f7ff b9a3 	b.w	d4874 <os_mutex_recursive_lock>

000d552e <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d552e:	b570      	push	{r4, r5, r6, lr}
   d5530:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5532:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5534:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5536:	f002 fd1f 	bl	d7f78 <strlen>
   d553a:	6823      	ldr	r3, [r4, #0]
   d553c:	4602      	mov	r2, r0
   d553e:	4629      	mov	r1, r5
   d5540:	4620      	mov	r0, r4
   d5542:	68db      	ldr	r3, [r3, #12]
}
   d5544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5548:	4718      	bx	r3

000d554a <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d554a:	b513      	push	{r0, r1, r4, lr}
   d554c:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d554e:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5550:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5554:	68d4      	ldr	r4, [r2, #12]
   d5556:	4619      	mov	r1, r3
   d5558:	2201      	movs	r2, #1
   d555a:	47a0      	blx	r4
}
   d555c:	b002      	add	sp, #8
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5564:	6845      	ldr	r5, [r0, #4]
   d5566:	6807      	ldr	r7, [r0, #0]
   d5568:	b085      	sub	sp, #20
   d556a:	4691      	mov	r9, r2
   d556c:	2214      	movs	r2, #20
   d556e:	4355      	muls	r5, r2
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	10ab      	asrs	r3, r5, #2
   d5574:	4d19      	ldr	r5, [pc, #100]	; (d55dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5576:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5578:	435d      	muls	r5, r3
   d557a:	468b      	mov	fp, r1
   d557c:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d557e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5580:	2d00      	cmp	r5, #0
   d5582:	9303      	str	r3, [sp, #12]
   d5584:	dd23      	ble.n	d55ce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5586:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5588:	106e      	asrs	r6, r5, #1
   d558a:	fb03 f006 	mul.w	r0, r3, r6
   d558e:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5592:	464a      	mov	r2, r9
   d5594:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5598:	5820      	ldr	r0, [r4, r0]
   d559a:	45d1      	cmp	r9, sl
   d559c:	bf28      	it	cs
   d559e:	4652      	movcs	r2, sl
   d55a0:	4659      	mov	r1, fp
   d55a2:	f002 fcf1 	bl	d7f88 <strncmp>
                if (cmp == 0) {
   d55a6:	9b03      	ldr	r3, [sp, #12]
   d55a8:	b948      	cbnz	r0, d55be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d55aa:	45d1      	cmp	r9, sl
   d55ac:	d103      	bne.n	d55b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d55ae:	9a01      	ldr	r2, [sp, #4]
   d55b0:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d55b2:	4635      	mov	r5, r6
   d55b4:	e7e4      	b.n	d5580 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d55b6:	bf8c      	ite	hi
   d55b8:	2001      	movhi	r0, #1
   d55ba:	2000      	movls	r0, #0
   d55bc:	e000      	b.n	d55c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d55be:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d55c0:	2800      	cmp	r0, #0
   d55c2:	d0f6      	beq.n	d55b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d55c4:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d55c6:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d55ca:	3e01      	subs	r6, #1
   d55cc:	e7f1      	b.n	d55b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d55ce:	1be4      	subs	r4, r4, r7
}
   d55d0:	4802      	ldr	r0, [pc, #8]	; (d55dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d55d2:	10a4      	asrs	r4, r4, #2
}
   d55d4:	4360      	muls	r0, r4
   d55d6:	b005      	add	sp, #20
   d55d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55dc:	cccccccd 	.word	0xcccccccd

000d55e0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d55e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55e2:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d55e4:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d55e6:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d55e8:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d55ea:	b313      	cbz	r3, d5632 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d55ec:	b309      	cbz	r1, d5632 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d55ee:	af04      	add	r7, sp, #16
   d55f0:	2300      	movs	r3, #0
   d55f2:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d55f6:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d55fa:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d55fc:	4639      	mov	r1, r7
   d55fe:	a801      	add	r0, sp, #4
   d5600:	f7ff ff41 	bl	d5486 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5604:	4601      	mov	r1, r0
   d5606:	b1a0      	cbz	r0, d5632 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5608:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d560a:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d560c:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5610:	4620      	mov	r0, r4
   d5612:	f7ff ffa5 	bl	d5560 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5616:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d561a:	b153      	cbz	r3, d5632 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d561c:	6823      	ldr	r3, [r4, #0]
   d561e:	2414      	movs	r4, #20
   d5620:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5624:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d5626:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d562a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d562c:	bfa8      	it	ge
   d562e:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5630:	e7e4      	b.n	d55fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5632:	4630      	mov	r0, r6
   d5634:	b005      	add	sp, #20
   d5636:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5638 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5638:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d563a:	4c09      	ldr	r4, [pc, #36]	; (d5660 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d563c:	6823      	ldr	r3, [r4, #0]
   d563e:	07db      	lsls	r3, r3, #31
   d5640:	d40b      	bmi.n	d565a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5642:	4620      	mov	r0, r4
   d5644:	f7fe fd3a 	bl	d40bc <__cxa_guard_acquire>
   d5648:	b138      	cbz	r0, d565a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d564a:	4620      	mov	r0, r4
   d564c:	f7fe fd3b 	bl	d40c6 <__cxa_guard_release>
   d5650:	4a04      	ldr	r2, [pc, #16]	; (d5664 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5652:	4905      	ldr	r1, [pc, #20]	; (d5668 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5654:	4805      	ldr	r0, [pc, #20]	; (d566c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5656:	f002 fa53 	bl	d7b00 <__aeabi_atexit>
    return &factory;
}
   d565a:	4804      	ldr	r0, [pc, #16]	; (d566c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d565c:	bd10      	pop	{r4, pc}
   d565e:	bf00      	nop
   d5660:	2003e39c 	.word	0x2003e39c
   d5664:	2003e368 	.word	0x2003e368
   d5668:	000d5483 	.word	0x000d5483
   d566c:	2003e2f8 	.word	0x2003e2f8

000d5670 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5670:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5672:	4c09      	ldr	r4, [pc, #36]	; (d5698 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5674:	6823      	ldr	r3, [r4, #0]
   d5676:	07db      	lsls	r3, r3, #31
   d5678:	d40b      	bmi.n	d5692 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d567a:	4620      	mov	r0, r4
   d567c:	f7fe fd1e 	bl	d40bc <__cxa_guard_acquire>
   d5680:	b138      	cbz	r0, d5692 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5682:	4620      	mov	r0, r4
   d5684:	f7fe fd1f 	bl	d40c6 <__cxa_guard_release>
   d5688:	4a04      	ldr	r2, [pc, #16]	; (d569c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d568a:	4905      	ldr	r1, [pc, #20]	; (d56a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d568c:	4805      	ldr	r0, [pc, #20]	; (d56a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d568e:	f002 fa37 	bl	d7b00 <__aeabi_atexit>
    return &factory;
}
   d5692:	4804      	ldr	r0, [pc, #16]	; (d56a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5694:	bd10      	pop	{r4, pc}
   d5696:	bf00      	nop
   d5698:	2003e3cc 	.word	0x2003e3cc
   d569c:	2003e368 	.word	0x2003e368
   d56a0:	000d5481 	.word	0x000d5481
   d56a4:	2003e2f4 	.word	0x2003e2f4

000d56a8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d56a8:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d56aa:	2500      	movs	r5, #0
   d56ac:	4604      	mov	r4, r0
   d56ae:	6005      	str	r5, [r0, #0]
   d56b0:	6045      	str	r5, [r0, #4]
   d56b2:	6085      	str	r5, [r0, #8]
   d56b4:	6105      	str	r5, [r0, #16]
   d56b6:	6145      	str	r5, [r0, #20]
   d56b8:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56ba:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d56be:	f7ff f8d1 	bl	d4864 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d56c2:	f7ff ffb9 	bl	d5638 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d56c6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d56c8:	f7ff ffd2 	bl	d5670 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d56cc:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d56ce:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d56d0:	4620      	mov	r0, r4
   d56d2:	bd38      	pop	{r3, r4, r5, pc}

000d56d4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d56d4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d56d6:	4c0a      	ldr	r4, [pc, #40]	; (d5700 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d56d8:	6823      	ldr	r3, [r4, #0]
   d56da:	07db      	lsls	r3, r3, #31
   d56dc:	d40e      	bmi.n	d56fc <_ZN5spark10LogManager8instanceEv+0x28>
   d56de:	4620      	mov	r0, r4
   d56e0:	f7fe fcec 	bl	d40bc <__cxa_guard_acquire>
   d56e4:	b150      	cbz	r0, d56fc <_ZN5spark10LogManager8instanceEv+0x28>
   d56e6:	4807      	ldr	r0, [pc, #28]	; (d5704 <_ZN5spark10LogManager8instanceEv+0x30>)
   d56e8:	f7ff ffde 	bl	d56a8 <_ZN5spark10LogManagerC1Ev>
   d56ec:	4620      	mov	r0, r4
   d56ee:	f7fe fcea 	bl	d40c6 <__cxa_guard_release>
   d56f2:	4a05      	ldr	r2, [pc, #20]	; (d5708 <_ZN5spark10LogManager8instanceEv+0x34>)
   d56f4:	4905      	ldr	r1, [pc, #20]	; (d570c <_ZN5spark10LogManager8instanceEv+0x38>)
   d56f6:	4803      	ldr	r0, [pc, #12]	; (d5704 <_ZN5spark10LogManager8instanceEv+0x30>)
   d56f8:	f002 fa02 	bl	d7b00 <__aeabi_atexit>
    return &mgr;
}
   d56fc:	4801      	ldr	r0, [pc, #4]	; (d5704 <_ZN5spark10LogManager8instanceEv+0x30>)
   d56fe:	bd10      	pop	{r4, pc}
   d5700:	2003e3a0 	.word	0x2003e3a0
   d5704:	2003e3a4 	.word	0x2003e3a4
   d5708:	2003e368 	.word	0x2003e368
   d570c:	000d5b3f 	.word	0x000d5b3f

000d5710 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5710:	2300      	movs	r3, #0
   d5712:	4a02      	ldr	r2, [pc, #8]	; (d571c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5714:	4902      	ldr	r1, [pc, #8]	; (d5720 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5716:	4803      	ldr	r0, [pc, #12]	; (d5724 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5718:	f7ff ba94 	b.w	d4c44 <log_set_callbacks>
   d571c:	000d5a21 	.word	0x000d5a21
   d5720:	000d59b1 	.word	0x000d59b1
   d5724:	000d5939 	.word	0x000d5939

000d5728 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5728:	2300      	movs	r3, #0
   d572a:	461a      	mov	r2, r3
   d572c:	4619      	mov	r1, r3
   d572e:	4618      	mov	r0, r3
   d5730:	f7ff ba88 	b.w	d4c44 <log_set_callbacks>

000d5734 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5734:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5736:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d5738:	690e      	ldr	r6, [r1, #16]
   d573a:	f851 3b04 	ldr.w	r3, [r1], #4
   d573e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5742:	4605      	mov	r5, r0
   d5744:	a801      	add	r0, sp, #4
   d5746:	f7ff fb56 	bl	d4df6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d574a:	4622      	mov	r2, r4
   d574c:	4631      	mov	r1, r6
   d574e:	4628      	mov	r0, r5
   d5750:	f7ff fe75 	bl	d543e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5754:	a801      	add	r0, sp, #4
   d5756:	f7ff fb55 	bl	d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d575a:	4628      	mov	r0, r5
   d575c:	b002      	add	sp, #8
   d575e:	bd70      	pop	{r4, r5, r6, pc}

000d5760 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5760:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5762:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d5764:	688e      	ldr	r6, [r1, #8]
   d5766:	f851 3b04 	ldr.w	r3, [r1], #4
   d576a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d576e:	4605      	mov	r5, r0
   d5770:	a801      	add	r0, sp, #4
   d5772:	f7ff fb40 	bl	d4df6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5776:	4622      	mov	r2, r4
   d5778:	4631      	mov	r1, r6
   d577a:	4628      	mov	r0, r5
   d577c:	f7ff fe44 	bl	d5408 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5780:	a801      	add	r0, sp, #4
   d5782:	f7ff fb3f 	bl	d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5786:	4628      	mov	r0, r5
   d5788:	b002      	add	sp, #8
   d578a:	bd70      	pop	{r4, r5, r6, pc}

000d578c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d578c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d578e:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5790:	68ce      	ldr	r6, [r1, #12]
   d5792:	f851 3b04 	ldr.w	r3, [r1], #4
   d5796:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d579a:	4605      	mov	r5, r0
   d579c:	a801      	add	r0, sp, #4
   d579e:	f7ff fb2a 	bl	d4df6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d57a2:	4622      	mov	r2, r4
   d57a4:	4631      	mov	r1, r6
   d57a6:	4628      	mov	r0, r5
   d57a8:	f7ff fe06 	bl	d53b8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57ac:	a801      	add	r0, sp, #4
   d57ae:	f7ff fb29 	bl	d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d57b2:	4628      	mov	r0, r5
   d57b4:	b002      	add	sp, #8
   d57b6:	bd70      	pop	{r4, r5, r6, pc}

000d57b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d57b8:	b530      	push	{r4, r5, lr}
   d57ba:	b08b      	sub	sp, #44	; 0x2c
   d57bc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d57be:	4601      	mov	r1, r0
   d57c0:	a804      	add	r0, sp, #16
   d57c2:	f7ff ffcd 	bl	d5760 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d57c6:	a804      	add	r0, sp, #16
   d57c8:	f7ff fd29 	bl	d521e <_ZN5spark18JSONObjectIterator4nextEv>
   d57cc:	b1e8      	cbz	r0, d580a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d57ce:	a904      	add	r1, sp, #16
   d57d0:	4668      	mov	r0, sp
   d57d2:	f7ff ffdb 	bl	d578c <_ZNK5spark18JSONObjectIterator4nameEv>
   d57d6:	490f      	ldr	r1, [pc, #60]	; (d5814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d57d8:	9802      	ldr	r0, [sp, #8]
   d57da:	f7ff fe91 	bl	d5500 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d57de:	4604      	mov	r4, r0
   d57e0:	b110      	cbz	r0, d57e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d57e2:	1c2c      	adds	r4, r5, #0
   d57e4:	bf18      	it	ne
   d57e6:	2401      	movne	r4, #1
   d57e8:	a801      	add	r0, sp, #4
   d57ea:	f7ff fb0b 	bl	d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57ee:	2c00      	cmp	r4, #0
   d57f0:	d0e9      	beq.n	d57c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d57f2:	a904      	add	r1, sp, #16
   d57f4:	4668      	mov	r0, sp
   d57f6:	f7ff ff9d 	bl	d5734 <_ZNK5spark18JSONObjectIterator5valueEv>
   d57fa:	4668      	mov	r0, sp
   d57fc:	f7ff fcef 	bl	d51de <_ZNK5spark9JSONValue5toIntEv>
   d5800:	6028      	str	r0, [r5, #0]
   d5802:	a801      	add	r0, sp, #4
   d5804:	f7ff fafe 	bl	d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5808:	e7dd      	b.n	d57c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d580a:	a805      	add	r0, sp, #20
   d580c:	f7ff fafa 	bl	d4e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5810:	b00b      	add	sp, #44	; 0x2c
   d5812:	bd30      	pop	{r4, r5, pc}
   d5814:	000d84c4 	.word	0x000d84c4

000d5818 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d581a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d581c:	4620      	mov	r0, r4
   d581e:	4913      	ldr	r1, [pc, #76]	; (d586c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5820:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5822:	f002 fb9f 	bl	d7f64 <strcmp>
   d5826:	b940      	cbnz	r0, d583a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d5828:	f001 fff4 	bl	d7814 <_Z16_fetch_usbserialv>
   d582c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5830:	f001 ffe0 	bl	d77f4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5834:	f001 ffee 	bl	d7814 <_Z16_fetch_usbserialv>
   d5838:	e015      	b.n	d5866 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d583a:	490d      	ldr	r1, [pc, #52]	; (d5870 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d583c:	4620      	mov	r0, r4
   d583e:	f002 fb91 	bl	d7f64 <strcmp>
   d5842:	b978      	cbnz	r0, d5864 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5844:	a902      	add	r1, sp, #8
   d5846:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d584a:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d584e:	4628      	mov	r0, r5
   d5850:	f7ff ffb2 	bl	d57b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5854:	f001 ff52 	bl	d76fc <_Z22__fetch_global_Serial1v>
   d5858:	9901      	ldr	r1, [sp, #4]
   d585a:	f001 ff45 	bl	d76e8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d585e:	f001 ff4d 	bl	d76fc <_Z22__fetch_global_Serial1v>
   d5862:	e000      	b.n	d5866 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5864:	2000      	movs	r0, #0
}
   d5866:	b003      	add	sp, #12
   d5868:	bd30      	pop	{r4, r5, pc}
   d586a:	bf00      	nop
   d586c:	000d84c9 	.word	0x000d84c9
   d5870:	000d84d0 	.word	0x000d84d0

000d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5874:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5876:	6804      	ldr	r4, [r0, #0]
   d5878:	6843      	ldr	r3, [r0, #4]
   d587a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d587c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d587e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5882:	42a6      	cmp	r6, r4
   d5884:	d005      	beq.n	d5892 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5886:	f104 0008 	add.w	r0, r4, #8
   d588a:	f7ff fff3 	bl	d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d588e:	3414      	adds	r4, #20
   d5890:	e7f7      	b.n	d5882 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5892:	6828      	ldr	r0, [r5, #0]
   d5894:	f7ff fa7c 	bl	d4d90 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5898:	4628      	mov	r0, r5
   d589a:	bd70      	pop	{r4, r5, r6, pc}

000d589c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d589c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d589e:	6804      	ldr	r4, [r0, #0]
   d58a0:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d58a2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d58a4:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d58a8:	42a6      	cmp	r6, r4
   d58aa:	d004      	beq.n	d58b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d58ac:	4620      	mov	r0, r4
   d58ae:	f001 fad8 	bl	d6e62 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d58b2:	3410      	adds	r4, #16
   d58b4:	e7f8      	b.n	d58a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d58b6:	6828      	ldr	r0, [r5, #0]
   d58b8:	f7ff fa6a 	bl	d4d90 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d58bc:	4628      	mov	r0, r5
   d58be:	bd70      	pop	{r4, r5, r6, pc}

000d58c0 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d58c0:	b510      	push	{r4, lr}
   d58c2:	4604      	mov	r4, r0
   d58c4:	300c      	adds	r0, #12
   d58c6:	f7ff ffd5 	bl	d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d58ca:	4620      	mov	r0, r4
   d58cc:	f7ff ffe6 	bl	d589c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d58d0:	4620      	mov	r0, r4
   d58d2:	bd10      	pop	{r4, pc}

000d58d4 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d58d4:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d58d6:	4b04      	ldr	r3, [pc, #16]	; (d58e8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d58d8:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d58da:	f840 3b04 	str.w	r3, [r0], #4
   d58de:	f7ff ffef 	bl	d58c0 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d58e2:	4620      	mov	r0, r4
   d58e4:	bd10      	pop	{r4, pc}
   d58e6:	bf00      	nop
   d58e8:	000d8160 	.word	0x000d8160

000d58ec <_ZN5spark16StreamLogHandlerD0Ev>:
   d58ec:	b510      	push	{r4, lr}
   d58ee:	4604      	mov	r4, r0
   d58f0:	f7ff fff0 	bl	d58d4 <_ZN5spark16StreamLogHandlerD1Ev>
   d58f4:	4620      	mov	r0, r4
   d58f6:	2124      	movs	r1, #36	; 0x24
   d58f8:	f002 f907 	bl	d7b0a <_ZdlPvj>
   d58fc:	4620      	mov	r0, r4
   d58fe:	bd10      	pop	{r4, pc}

000d5900 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5900:	b510      	push	{r4, lr}
   d5902:	4b03      	ldr	r3, [pc, #12]	; (d5910 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5904:	6003      	str	r3, [r0, #0]
   d5906:	4604      	mov	r4, r0
   d5908:	f7ff ffe4 	bl	d58d4 <_ZN5spark16StreamLogHandlerD1Ev>
   d590c:	4620      	mov	r0, r4
   d590e:	bd10      	pop	{r4, pc}
   d5910:	000d849c 	.word	0x000d849c

000d5914 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5914:	b510      	push	{r4, lr}
   d5916:	4604      	mov	r4, r0
   d5918:	f7ff fff2 	bl	d5900 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d591c:	4620      	mov	r0, r4
   d591e:	2124      	movs	r1, #36	; 0x24
   d5920:	f002 f8f3 	bl	d7b0a <_ZdlPvj>
   d5924:	4620      	mov	r0, r4
   d5926:	bd10      	pop	{r4, pc}

000d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5928:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d592a:	6803      	ldr	r3, [r0, #0]
   d592c:	4604      	mov	r4, r0
   d592e:	6818      	ldr	r0, [r3, #0]
   d5930:	f7fe ffa8 	bl	d4884 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5934:	4620      	mov	r0, r4
   d5936:	bd10      	pop	{r4, pc}

000d5938 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d593c:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d593e:	4b1b      	ldr	r3, [pc, #108]	; (d59ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5940:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5942:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5946:	b085      	sub	sp, #20
   d5948:	4682      	mov	sl, r0
   d594a:	460e      	mov	r6, r1
   d594c:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d594e:	bb53      	cbnz	r3, d59a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d5950:	f7ff fec0 	bl	d56d4 <_ZN5spark10LogManager8instanceEv>
   d5954:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5956:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5958:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d595a:	f7ff fde5 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d595e:	7b23      	ldrb	r3, [r4, #12]
   d5960:	b9f3      	cbnz	r3, d59a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5962:	2301      	movs	r3, #1
   d5964:	7323      	strb	r3, [r4, #12]
   d5966:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5968:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d596a:	b2f6      	uxtb	r6, r6
   d596c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5970:	454d      	cmp	r5, r9
   d5972:	d013      	beq.n	d599c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d5974:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d5978:	4641      	mov	r1, r8
   d597a:	1d38      	adds	r0, r7, #4
   d597c:	f7ff fe30 	bl	d55e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5980:	4286      	cmp	r6, r0
   d5982:	d3f5      	bcc.n	d5970 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d5984:	683b      	ldr	r3, [r7, #0]
   d5986:	f8cd b000 	str.w	fp, [sp]
   d598a:	689b      	ldr	r3, [r3, #8]
   d598c:	469e      	mov	lr, r3
   d598e:	4638      	mov	r0, r7
   d5990:	4643      	mov	r3, r8
   d5992:	4632      	mov	r2, r6
   d5994:	4651      	mov	r1, sl
   d5996:	4677      	mov	r7, lr
   d5998:	47b8      	blx	r7
   d599a:	e7e9      	b.n	d5970 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d599c:	2300      	movs	r3, #0
   d599e:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d59a0:	a803      	add	r0, sp, #12
   d59a2:	f7ff ffc1 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d59a6:	b005      	add	sp, #20
   d59a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59ac:	e000ed00 	.word	0xe000ed00

000d59b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d59b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59b4:	4699      	mov	r9, r3
   d59b6:	4b19      	ldr	r3, [pc, #100]	; (d5a1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d59b8:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d59ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d59be:	4607      	mov	r7, r0
   d59c0:	4688      	mov	r8, r1
   d59c2:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d59c4:	bb33      	cbnz	r3, d5a14 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d59c6:	f7ff fe85 	bl	d56d4 <_ZN5spark10LogManager8instanceEv>
   d59ca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d59cc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d59ce:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d59d0:	f7ff fdaa 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d59d4:	7b23      	ldrb	r3, [r4, #12]
   d59d6:	b9d3      	cbnz	r3, d5a0e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d59d8:	2301      	movs	r3, #1
   d59da:	7323      	strb	r3, [r4, #12]
   d59dc:	6825      	ldr	r5, [r4, #0]
   d59de:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d59e0:	fa5f fb86 	uxtb.w	fp, r6
   d59e4:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d59e8:	4555      	cmp	r5, sl
   d59ea:	d00e      	beq.n	d5a0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d59ec:	f855 6b04 	ldr.w	r6, [r5], #4
   d59f0:	4649      	mov	r1, r9
   d59f2:	1d30      	adds	r0, r6, #4
   d59f4:	f7ff fdf4 	bl	d55e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d59f8:	4583      	cmp	fp, r0
   d59fa:	d3f5      	bcc.n	d59e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d59fc:	6833      	ldr	r3, [r6, #0]
   d59fe:	4642      	mov	r2, r8
   d5a00:	68db      	ldr	r3, [r3, #12]
   d5a02:	4639      	mov	r1, r7
   d5a04:	4630      	mov	r0, r6
   d5a06:	4798      	blx	r3
   d5a08:	e7ee      	b.n	d59e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5a0a:	2300      	movs	r3, #0
   d5a0c:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5a0e:	a801      	add	r0, sp, #4
   d5a10:	f7ff ff8a 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d5a14:	b003      	add	sp, #12
   d5a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a1a:	bf00      	nop
   d5a1c:	e000ed00 	.word	0xe000ed00

000d5a20 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5a24:	4b15      	ldr	r3, [pc, #84]	; (d5a7c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d5a26:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5a30:	b9fb      	cbnz	r3, d5a72 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d5a32:	f7ff fe4f 	bl	d56d4 <_ZN5spark10LogManager8instanceEv>
   d5a36:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d5a38:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a3a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a3c:	f7ff fd74 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
   d5a40:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d5a44:	2646      	movs	r6, #70	; 0x46
   d5a46:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5a4a:	42af      	cmp	r7, r5
   d5a4c:	d107      	bne.n	d5a5e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d5a4e:	a801      	add	r0, sp, #4
   d5a50:	f7ff ff6a 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d5a54:	42b4      	cmp	r4, r6
   d5a56:	bfb4      	ite	lt
   d5a58:	2000      	movlt	r0, #0
   d5a5a:	2001      	movge	r0, #1
   d5a5c:	e00a      	b.n	d5a74 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d5a5e:	f855 0b04 	ldr.w	r0, [r5], #4
   d5a62:	4641      	mov	r1, r8
   d5a64:	3004      	adds	r0, #4
   d5a66:	f7ff fdbb 	bl	d55e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5a6a:	4286      	cmp	r6, r0
   d5a6c:	bfa8      	it	ge
   d5a6e:	4606      	movge	r6, r0
   d5a70:	e7eb      	b.n	d5a4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d5a72:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d5a74:	b002      	add	sp, #8
   d5a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a7a:	bf00      	nop
   d5a7c:	e000ed00 	.word	0xe000ed00

000d5a80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5a80:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d5a82:	6803      	ldr	r3, [r0, #0]
   d5a84:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5a86:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5a88:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5a8c:	429a      	cmp	r2, r3
   d5a8e:	4618      	mov	r0, r3
   d5a90:	d00e      	beq.n	d5ab0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d5a92:	6806      	ldr	r6, [r0, #0]
   d5a94:	680d      	ldr	r5, [r1, #0]
   d5a96:	42ae      	cmp	r6, r5
   d5a98:	f103 0304 	add.w	r3, r3, #4
   d5a9c:	d1f6      	bne.n	d5a8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5a9e:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5aa0:	1a52      	subs	r2, r2, r1
   d5aa2:	f002 f9c1 	bl	d7e28 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d5aa6:	6863      	ldr	r3, [r4, #4]
   d5aa8:	3b01      	subs	r3, #1
   d5aaa:	6063      	str	r3, [r4, #4]
    return true;
   d5aac:	2001      	movs	r0, #1
}
   d5aae:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5ab0:	2000      	movs	r0, #0
   d5ab2:	bd70      	pop	{r4, r5, r6, pc}

000d5ab4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5ab6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5ab8:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5aba:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5abc:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5abe:	f7ff fd33 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5ac2:	a901      	add	r1, sp, #4
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	f7ff ffdb 	bl	d5a80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5aca:	b920      	cbnz	r0, d5ad6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5acc:	a803      	add	r0, sp, #12
   d5ace:	f7ff ff2b 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d5ad2:	b004      	add	sp, #16
   d5ad4:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5ad6:	6863      	ldr	r3, [r4, #4]
   d5ad8:	2b00      	cmp	r3, #0
   d5ada:	d1f7      	bne.n	d5acc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d5adc:	f7ff fe24 	bl	d5728 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d5ae0:	e7f4      	b.n	d5acc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d5ae2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d5ae2:	b570      	push	{r4, r5, r6, lr}
   d5ae4:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ae6:	6943      	ldr	r3, [r0, #20]
   d5ae8:	2618      	movs	r6, #24
   d5aea:	4604      	mov	r4, r0
   d5aec:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d5af0:	42ae      	cmp	r6, r5
   d5af2:	d015      	beq.n	d5b20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d5af4:	f105 0110 	add.w	r1, r5, #16
   d5af8:	4620      	mov	r0, r4
   d5afa:	f7ff ffc1 	bl	d5a80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5afe:	6863      	ldr	r3, [r4, #4]
   d5b00:	b90b      	cbnz	r3, d5b06 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5b02:	f7ff fe11 	bl	d5728 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d5b06:	69e0      	ldr	r0, [r4, #28]
   d5b08:	6929      	ldr	r1, [r5, #16]
   d5b0a:	6803      	ldr	r3, [r0, #0]
   d5b0c:	68db      	ldr	r3, [r3, #12]
   d5b0e:	4798      	blx	r3
        if (h.stream) {
   d5b10:	6969      	ldr	r1, [r5, #20]
   d5b12:	b119      	cbz	r1, d5b1c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5b14:	6a20      	ldr	r0, [r4, #32]
   d5b16:	6803      	ldr	r3, [r0, #0]
   d5b18:	68db      	ldr	r3, [r3, #12]
   d5b1a:	4798      	blx	r3
   d5b1c:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d5b1e:	e7e7      	b.n	d5af0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5b20:	6925      	ldr	r5, [r4, #16]
   d5b22:	6963      	ldr	r3, [r4, #20]
   d5b24:	2618      	movs	r6, #24
   d5b26:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b2a:	42b5      	cmp	r5, r6
   d5b2c:	d004      	beq.n	d5b38 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5b2e:	4628      	mov	r0, r5
   d5b30:	f001 f997 	bl	d6e62 <_ZN6StringD1Ev>
   d5b34:	3518      	adds	r5, #24
   d5b36:	e7f8      	b.n	d5b2a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5b38:	2300      	movs	r3, #0
   d5b3a:	6163      	str	r3, [r4, #20]
   d5b3c:	bd70      	pop	{r4, r5, r6, pc}

000d5b3e <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d5b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5b40:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b42:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d5b44:	f7ff fdf0 	bl	d5728 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d5b48:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5b4c:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d5b50:	f7ff fcea 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d5b54:	4620      	mov	r0, r4
   d5b56:	f7ff ffc4 	bl	d5ae2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d5b5a:	4628      	mov	r0, r5
   d5b5c:	f7ff fee4 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5b60:	6925      	ldr	r5, [r4, #16]
   d5b62:	6963      	ldr	r3, [r4, #20]
   d5b64:	2618      	movs	r6, #24
   d5b66:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b6a:	42b5      	cmp	r5, r6
   d5b6c:	d004      	beq.n	d5b78 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5b6e:	4628      	mov	r0, r5
   d5b70:	f001 f977 	bl	d6e62 <_ZN6StringD1Ev>
   d5b74:	3518      	adds	r5, #24
   d5b76:	e7f8      	b.n	d5b6a <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b78:	6920      	ldr	r0, [r4, #16]
   d5b7a:	f7ff f909 	bl	d4d90 <free>
   d5b7e:	6820      	ldr	r0, [r4, #0]
   d5b80:	f7ff f906 	bl	d4d90 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d5b84:	4620      	mov	r0, r4
   d5b86:	b002      	add	sp, #8
   d5b88:	bd70      	pop	{r4, r5, r6, pc}

000d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b8a:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5b8c:	680a      	ldr	r2, [r1, #0]
   d5b8e:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b90:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b92:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b94:	684a      	ldr	r2, [r1, #4]
   d5b96:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b98:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b9a:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5b9c:	688a      	ldr	r2, [r1, #8]
   d5b9e:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ba0:	608b      	str	r3, [r1, #8]
   d5ba2:	4770      	bx	lr

000d5ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5ba4:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5ba6:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5ba8:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5baa:	6003      	str	r3, [r0, #0]
   d5bac:	6043      	str	r3, [r0, #4]
   d5bae:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5bb0:	f7ff ffeb 	bl	d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5bb8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bbc:	4604      	mov	r4, r0
   d5bbe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5bc0:	d925      	bls.n	d5c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d5bc2:	4290      	cmp	r0, r2
   d5bc4:	d224      	bcs.n	d5c10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5bc6:	1a55      	subs	r5, r2, r1
   d5bc8:	3d14      	subs	r5, #20
   d5bca:	442c      	add	r4, r5
   d5bcc:	f1a1 0714 	sub.w	r7, r1, #20
   d5bd0:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5bd4:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5bd6:	f1a5 0308 	sub.w	r3, r5, #8
   d5bda:	429f      	cmp	r7, r3
   d5bdc:	d037      	beq.n	d5c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d5bde:	b184      	cbz	r4, d5c02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5be0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5be4:	6023      	str	r3, [r4, #0]
   d5be6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5bea:	80a3      	strh	r3, [r4, #4]
   d5bec:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5bf0:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5bf2:	60a6      	str	r6, [r4, #8]
   d5bf4:	60e6      	str	r6, [r4, #12]
   d5bf6:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5bf8:	4629      	mov	r1, r5
   d5bfa:	f104 0008 	add.w	r0, r4, #8
   d5bfe:	f7ff ffc4 	bl	d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d5c02:	4628      	mov	r0, r5
   d5c04:	f7ff fe36 	bl	d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5c08:	3c14      	subs	r4, #20
   d5c0a:	3d14      	subs	r5, #20
   d5c0c:	e7e3      	b.n	d5bd6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5c0e:	d01e      	beq.n	d5c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d5c10:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5c14:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c16:	f1a5 0308 	sub.w	r3, r5, #8
   d5c1a:	429e      	cmp	r6, r3
   d5c1c:	d017      	beq.n	d5c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d5c1e:	b184      	cbz	r4, d5c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d5c20:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5c24:	6023      	str	r3, [r4, #0]
   d5c26:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5c2a:	80a3      	strh	r3, [r4, #4]
   d5c2c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5c30:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5c32:	60a7      	str	r7, [r4, #8]
   d5c34:	60e7      	str	r7, [r4, #12]
   d5c36:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5c38:	4629      	mov	r1, r5
   d5c3a:	f104 0008 	add.w	r0, r4, #8
   d5c3e:	f7ff ffa4 	bl	d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d5c42:	4628      	mov	r0, r5
   d5c44:	f7ff fe16 	bl	d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c48:	3414      	adds	r4, #20
   d5c4a:	3514      	adds	r5, #20
   d5c4c:	e7e3      	b.n	d5c16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d5c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c52:	6845      	ldr	r5, [r0, #4]
   d5c54:	6883      	ldr	r3, [r0, #8]
   d5c56:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5c58:	4604      	mov	r4, r0
   d5c5a:	460e      	mov	r6, r1
   d5c5c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c5e:	db0e      	blt.n	d5c7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d5c60:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5c62:	2d00      	cmp	r5, #0
   d5c64:	dd05      	ble.n	d5c72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5c66:	00a9      	lsls	r1, r5, #2
   d5c68:	6800      	ldr	r0, [r0, #0]
   d5c6a:	f7ff f899 	bl	d4da0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5c6e:	b920      	cbnz	r0, d5c7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d5c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5c72:	6800      	ldr	r0, [r0, #0]
   d5c74:	f7ff f88c 	bl	d4d90 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5c78:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5c7a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5c7c:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c7e:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5c80:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c82:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5c86:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d5c8a:	1a52      	subs	r2, r2, r1
   d5c8c:	1d08      	adds	r0, r1, #4
   d5c8e:	f002 f8cb 	bl	d7e28 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d5c92:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5c96:	6863      	ldr	r3, [r4, #4]
   d5c98:	3301      	adds	r3, #1
   d5c9a:	6063      	str	r3, [r4, #4]
   d5c9c:	2001      	movs	r0, #1
    return true;
}
   d5c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ca0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ca2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5ca4:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5ca6:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ca8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5caa:	f7ff fc3d 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d5cae:	6823      	ldr	r3, [r4, #0]
   d5cb0:	6861      	ldr	r1, [r4, #4]
   d5cb2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5cb6:	4283      	cmp	r3, r0
   d5cb8:	461a      	mov	r2, r3
   d5cba:	d009      	beq.n	d5cd0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d5cbc:	6812      	ldr	r2, [r2, #0]
   d5cbe:	42aa      	cmp	r2, r5
   d5cc0:	f103 0304 	add.w	r3, r3, #4
   d5cc4:	d1f7      	bne.n	d5cb6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d5cc6:	a801      	add	r0, sp, #4
   d5cc8:	f7ff fe2e 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5ccc:	2500      	movs	r5, #0
   d5cce:	e00e      	b.n	d5cee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5cd0:	462a      	mov	r2, r5
   d5cd2:	4620      	mov	r0, r4
   d5cd4:	f7ff ffbc 	bl	d5c50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5cd8:	4605      	mov	r5, r0
   d5cda:	2800      	cmp	r0, #0
   d5cdc:	d0f3      	beq.n	d5cc6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d5cde:	6863      	ldr	r3, [r4, #4]
   d5ce0:	2b01      	cmp	r3, #1
   d5ce2:	d101      	bne.n	d5ce8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d5ce4:	f7ff fd14 	bl	d5710 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5ce8:	a801      	add	r0, sp, #4
   d5cea:	f7ff fe1d 	bl	d5928 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d5cee:	4628      	mov	r0, r5
   d5cf0:	b003      	add	sp, #12
   d5cf2:	bd30      	pop	{r4, r5, pc}

000d5cf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5cf4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cf8:	4606      	mov	r6, r0
   d5cfa:	460c      	mov	r4, r1
   d5cfc:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5cfe:	d914      	bls.n	d5d2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5d00:	4290      	cmp	r0, r2
   d5d02:	d213      	bcs.n	d5d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5d04:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d5d08:	1a6c      	subs	r4, r5, r1
   d5d0a:	f1a1 0710 	sub.w	r7, r1, #16
   d5d0e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5d10:	42af      	cmp	r7, r5
   d5d12:	d018      	beq.n	d5d46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5d14:	b11c      	cbz	r4, d5d1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5d16:	4629      	mov	r1, r5
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f001 f892 	bl	d6e42 <_ZN6StringC1EOS_>
                end->~T();
   d5d1e:	4628      	mov	r0, r5
   d5d20:	f001 f89f 	bl	d6e62 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5d24:	3d10      	subs	r5, #16
   d5d26:	3c10      	subs	r4, #16
   d5d28:	e7f2      	b.n	d5d10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5d2a:	d00c      	beq.n	d5d46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5d2c:	42ac      	cmp	r4, r5
   d5d2e:	d00a      	beq.n	d5d46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5d30:	b11e      	cbz	r6, d5d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5d32:	4621      	mov	r1, r4
   d5d34:	4630      	mov	r0, r6
   d5d36:	f001 f884 	bl	d6e42 <_ZN6StringC1EOS_>
                p->~T();
   d5d3a:	4620      	mov	r0, r4
   d5d3c:	f001 f891 	bl	d6e62 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5d40:	3410      	adds	r4, #16
   d5d42:	3610      	adds	r6, #16
   d5d44:	e7f2      	b.n	d5d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d5d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d48:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5d4a:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d4c:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5d4e:	dd0b      	ble.n	d5d68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5d50:	0130      	lsls	r0, r6, #4
   d5d52:	f7ff f815 	bl	d4d80 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5d56:	4604      	mov	r4, r0
   d5d58:	b170      	cbz	r0, d5d78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5d5a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5d5e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5d62:	f7ff ffc7 	bl	d5cf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d5d66:	e000      	b.n	d5d6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5d68:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d6a:	6828      	ldr	r0, [r5, #0]
   d5d6c:	f7ff f810 	bl	d4d90 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5d70:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5d72:	60ae      	str	r6, [r5, #8]
        return true;
   d5d74:	2001      	movs	r0, #1
   d5d76:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5d78:	bd70      	pop	{r4, r5, r6, pc}

000d5d7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d7e:	2300      	movs	r3, #0
   d5d80:	b095      	sub	sp, #84	; 0x54
   d5d82:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5d84:	2246      	movs	r2, #70	; 0x46
   d5d86:	6003      	str	r3, [r0, #0]
   d5d88:	6043      	str	r3, [r0, #4]
   d5d8a:	6083      	str	r3, [r0, #8]
   d5d8c:	60c3      	str	r3, [r0, #12]
   d5d8e:	6103      	str	r3, [r0, #16]
   d5d90:	6143      	str	r3, [r0, #20]
   d5d92:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5d94:	9102      	str	r1, [sp, #8]
   d5d96:	f8da 1004 	ldr.w	r1, [sl, #4]
   d5d9a:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5d9c:	4299      	cmp	r1, r3
   d5d9e:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5da0:	9309      	str	r3, [sp, #36]	; 0x24
   d5da2:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5da4:	f340 809d 	ble.w	d5ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5da8:	a808      	add	r0, sp, #32
   d5daa:	f7ff ffcd 	bl	d5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5dae:	2800      	cmp	r0, #0
   d5db0:	f040 8097 	bne.w	d5ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5db4:	e08e      	b.n	d5ed4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d5db6:	4621      	mov	r1, r4
   d5db8:	a80b      	add	r0, sp, #44	; 0x2c
   d5dba:	f001 f842 	bl	d6e42 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5dbe:	a90b      	add	r1, sp, #44	; 0x2c
   d5dc0:	a80f      	add	r0, sp, #60	; 0x3c
   d5dc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5dc4:	f001 f83d 	bl	d6e42 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5dcc:	4299      	cmp	r1, r3
   d5dce:	f2c0 80ce 	blt.w	d5f6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d5dd2:	3101      	adds	r1, #1
   d5dd4:	a808      	add	r0, sp, #32
   d5dd6:	f7ff ffb7 	bl	d5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5dda:	2800      	cmp	r0, #0
   d5ddc:	f040 80c7 	bne.w	d5f6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5de0:	a80f      	add	r0, sp, #60	; 0x3c
   d5de2:	f001 f83e 	bl	d6e62 <_ZN6StringD1Ev>
   d5de6:	a80b      	add	r0, sp, #44	; 0x2c
   d5de8:	f001 f83b 	bl	d6e62 <_ZN6StringD1Ev>
   d5dec:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d5dee:	42a7      	cmp	r7, r4
   d5df0:	d1e1      	bne.n	d5db6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5df2:	2600      	movs	r6, #0
   d5df4:	960b      	str	r6, [sp, #44]	; 0x2c
   d5df6:	960c      	str	r6, [sp, #48]	; 0x30
   d5df8:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5dfa:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d5dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5dfe:	429e      	cmp	r6, r3
   d5e00:	f280 80a8 	bge.w	d5f54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5e04:	0133      	lsls	r3, r6, #4
   d5e06:	9a08      	ldr	r2, [sp, #32]
   d5e08:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d5e0a:	9306      	str	r3, [sp, #24]
        if (!category) {
   d5e0c:	2b00      	cmp	r3, #0
   d5e0e:	f000 809f 	beq.w	d5f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d5e12:	2314      	movs	r3, #20
   d5e14:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5e16:	f8cd 901c 	str.w	r9, [sp, #28]
   d5e1a:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5e1c:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5e1e:	a907      	add	r1, sp, #28
   d5e20:	a806      	add	r0, sp, #24
   d5e22:	f7ff fb30 	bl	d5486 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5e26:	4607      	mov	r7, r0
   d5e28:	2800      	cmp	r0, #0
   d5e2a:	f000 8091 	beq.w	d5f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d5e2e:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d5e30:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5e32:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5e36:	9a07      	ldr	r2, [sp, #28]
   d5e38:	4620      	mov	r0, r4
   d5e3a:	f7ff fb91 	bl	d5560 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5e3e:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d5e42:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5e44:	f1b8 0f00 	cmp.w	r8, #0
   d5e48:	d153      	bne.n	d5ef2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d5e4a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d5e4e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d5e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5e56:	970f      	str	r7, [sp, #60]	; 0x3c
   d5e58:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d5e5c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d5e60:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d5e64:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e68:	6867      	ldr	r7, [r4, #4]
   d5e6a:	68a3      	ldr	r3, [r4, #8]
   d5e6c:	429f      	cmp	r7, r3
   d5e6e:	da4f      	bge.n	d5f10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d5e70:	9b00      	ldr	r3, [sp, #0]
   d5e72:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d5e76:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5e78:	2214      	movs	r2, #20
   d5e7a:	4353      	muls	r3, r2
   d5e7c:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d5e80:	fb02 b201 	mla	r2, r2, r1, fp
   d5e84:	f107 0014 	add.w	r0, r7, #20
   d5e88:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5e8a:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d5e8c:	f7ff fe94 	bl	d5bb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5e90:	b1a7      	cbz	r7, d5ebc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5e92:	9b03      	ldr	r3, [sp, #12]
   d5e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d5e96:	f84b 2003 	str.w	r2, [fp, r3]
   d5e9a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d5e9e:	80bb      	strh	r3, [r7, #4]
   d5ea0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d5ea4:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5ea6:	f8c7 9008 	str.w	r9, [r7, #8]
   d5eaa:	f8c7 900c 	str.w	r9, [r7, #12]
   d5eae:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5eb2:	a911      	add	r1, sp, #68	; 0x44
   d5eb4:	f107 0008 	add.w	r0, r7, #8
   d5eb8:	f7ff fe67 	bl	d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d5ebc:	6863      	ldr	r3, [r4, #4]
   d5ebe:	3301      	adds	r3, #1
   d5ec0:	6063      	str	r3, [r4, #4]
   d5ec2:	a811      	add	r0, sp, #68	; 0x44
   d5ec4:	f7ff fcd6 	bl	d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5ec8:	f1b8 0f00 	cmp.w	r8, #0
   d5ecc:	d011      	beq.n	d5ef2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d5ece:	a80b      	add	r0, sp, #44	; 0x2c
   d5ed0:	f7ff fcd0 	bl	d5874 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5ed4:	a808      	add	r0, sp, #32
   d5ed6:	f7ff fce1 	bl	d589c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d5eda:	4628      	mov	r0, r5
   d5edc:	b015      	add	sp, #84	; 0x54
   d5ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ee2:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ee6:	f8da 3004 	ldr.w	r3, [sl, #4]
   d5eea:	2714      	movs	r7, #20
   d5eec:	fb07 4703 	mla	r7, r7, r3, r4
   d5ef0:	e77d      	b.n	d5dee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d5ef2:	6823      	ldr	r3, [r4, #0]
   d5ef4:	9a00      	ldr	r2, [sp, #0]
   d5ef6:	2414      	movs	r4, #20
   d5ef8:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d5efc:	9b06      	ldr	r3, [sp, #24]
   d5efe:	781b      	ldrb	r3, [r3, #0]
   d5f00:	bb23      	cbnz	r3, d5f4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d5f02:	f8da 3000 	ldr.w	r3, [sl]
   d5f06:	9a01      	ldr	r2, [sp, #4]
   d5f08:	4413      	add	r3, r2
   d5f0a:	7c1b      	ldrb	r3, [r3, #16]
   d5f0c:	80e3      	strh	r3, [r4, #6]
   d5f0e:	e01d      	b.n	d5f4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5f10:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5f12:	2f00      	cmp	r7, #0
   d5f14:	dd0f      	ble.n	d5f36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5f16:	2314      	movs	r3, #20
   d5f18:	fb03 f007 	mul.w	r0, r3, r7
   d5f1c:	9303      	str	r3, [sp, #12]
   d5f1e:	f7fe ff2f 	bl	d4d80 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5f22:	4683      	mov	fp, r0
   d5f24:	b178      	cbz	r0, d5f46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d5f26:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5f2a:	9b03      	ldr	r3, [sp, #12]
   d5f2c:	fb03 1202 	mla	r2, r3, r2, r1
   d5f30:	f7ff fe42 	bl	d5bb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5f34:	e000      	b.n	d5f38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5f36:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f38:	6820      	ldr	r0, [r4, #0]
   d5f3a:	f7fe ff29 	bl	d4d90 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5f3e:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d5f42:	60a7      	str	r7, [r4, #8]
   d5f44:	e794      	b.n	d5e70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5f46:	f04f 0801 	mov.w	r8, #1
   d5f4a:	e7ba      	b.n	d5ec2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d5f4c:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5f4e:	e766      	b.n	d5e1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d5f50:	3601      	adds	r6, #1
   d5f52:	e753      	b.n	d5dfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d5f54:	a908      	add	r1, sp, #32
   d5f56:	4628      	mov	r0, r5
   d5f58:	f7ff fe17 	bl	d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d5f5c:	a90b      	add	r1, sp, #44	; 0x2c
   d5f5e:	f105 000c 	add.w	r0, r5, #12
   d5f62:	f7ff fe12 	bl	d5b8a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d5f66:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5f6a:	762b      	strb	r3, [r5, #24]
   d5f6c:	e7af      	b.n	d5ece <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5f6e:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d5f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5f72:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5f76:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5f7a:	4631      	mov	r1, r6
   d5f7c:	f106 0010 	add.w	r0, r6, #16
   d5f80:	f7ff feb8 	bl	d5cf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5f84:	b11e      	cbz	r6, d5f8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d5f86:	a90f      	add	r1, sp, #60	; 0x3c
   d5f88:	4630      	mov	r0, r6
   d5f8a:	f000 ff5a 	bl	d6e42 <_ZN6StringC1EOS_>
    ++size_;
   d5f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5f90:	3301      	adds	r3, #1
   d5f92:	9309      	str	r3, [sp, #36]	; 0x24
   d5f94:	e724      	b.n	d5de0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d5f98 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5f98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5f9a:	4604      	mov	r4, r0
   d5f9c:	4b09      	ldr	r3, [pc, #36]	; (d5fc4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5f9e:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5fa2:	4605      	mov	r5, r0
   d5fa4:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5fa6:	a801      	add	r0, sp, #4
   d5fa8:	4611      	mov	r1, r2
   d5faa:	f7fe fbab 	bl	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5fae:	aa01      	add	r2, sp, #4
   d5fb0:	4631      	mov	r1, r6
   d5fb2:	4620      	mov	r0, r4
   d5fb4:	f7ff fee1 	bl	d5d7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5fb8:	a801      	add	r0, sp, #4
   d5fba:	f7fe fa69 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5fbe:	4628      	mov	r0, r5
   d5fc0:	b004      	add	sp, #16
   d5fc2:	bd70      	pop	{r4, r5, r6, pc}
   d5fc4:	000d8160 	.word	0x000d8160

000d5fc8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fca:	460f      	mov	r7, r1
   d5fcc:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5fce:	492b      	ldr	r1, [pc, #172]	; (d607c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5fd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5fd2:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5fd4:	4616      	mov	r6, r2
   d5fd6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5fd8:	f001 ffc4 	bl	d7f64 <strcmp>
   d5fdc:	bb28      	cbnz	r0, d602a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d5fde:	2c00      	cmp	r4, #0
   d5fe0:	d049      	beq.n	d6076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5fe2:	4629      	mov	r1, r5
   d5fe4:	a801      	add	r0, sp, #4
   d5fe6:	f7ff fddd 	bl	d5ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5fea:	4925      	ldr	r1, [pc, #148]	; (d6080 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d5fec:	2024      	movs	r0, #36	; 0x24
   d5fee:	f001 fd97 	bl	d7b20 <_ZnwjRKSt9nothrow_t>
   d5ff2:	4605      	mov	r5, r0
   d5ff4:	b1b8      	cbz	r0, d6026 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d5ff6:	a901      	add	r1, sp, #4
   d5ff8:	a804      	add	r0, sp, #16
   d5ffa:	f7ff fdd3 	bl	d5ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5ffe:	a904      	add	r1, sp, #16
   d6000:	a807      	add	r0, sp, #28
   d6002:	f7fe fb7f 	bl	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6006:	aa07      	add	r2, sp, #28
   d6008:	4631      	mov	r1, r6
   d600a:	4628      	mov	r0, r5
   d600c:	f7ff ffc4 	bl	d5f98 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6010:	a807      	add	r0, sp, #28
   d6012:	f7fe fa3d 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6016:	4b1b      	ldr	r3, [pc, #108]	; (d6084 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6018:	602b      	str	r3, [r5, #0]
   d601a:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d601c:	a804      	add	r0, sp, #16
   d601e:	f7fe fa37 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6022:	4b19      	ldr	r3, [pc, #100]	; (d6088 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6024:	602b      	str	r3, [r5, #0]
   d6026:	a801      	add	r0, sp, #4
   d6028:	e01f      	b.n	d606a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d602a:	4918      	ldr	r1, [pc, #96]	; (d608c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d602c:	4638      	mov	r0, r7
   d602e:	f001 ff99 	bl	d7f64 <strcmp>
   d6032:	b9f0      	cbnz	r0, d6072 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6034:	b1fc      	cbz	r4, d6076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6036:	4629      	mov	r1, r5
   d6038:	a804      	add	r0, sp, #16
   d603a:	f7ff fdb3 	bl	d5ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d603e:	4910      	ldr	r1, [pc, #64]	; (d6080 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6040:	2024      	movs	r0, #36	; 0x24
   d6042:	f001 fd6d 	bl	d7b20 <_ZnwjRKSt9nothrow_t>
   d6046:	4605      	mov	r5, r0
   d6048:	b170      	cbz	r0, d6068 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d604a:	a904      	add	r1, sp, #16
   d604c:	a807      	add	r0, sp, #28
   d604e:	f7fe fb59 	bl	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6052:	aa07      	add	r2, sp, #28
   d6054:	4631      	mov	r1, r6
   d6056:	4628      	mov	r0, r5
   d6058:	f7ff ff9e 	bl	d5f98 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d605c:	a807      	add	r0, sp, #28
   d605e:	f7fe fa17 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6062:	4b08      	ldr	r3, [pc, #32]	; (d6084 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6064:	602b      	str	r3, [r5, #0]
   d6066:	622c      	str	r4, [r5, #32]
   d6068:	a804      	add	r0, sp, #16
   d606a:	f7fe fa11 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d606e:	4628      	mov	r0, r5
   d6070:	e002      	b.n	d6078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6072:	2000      	movs	r0, #0
   d6074:	e000      	b.n	d6078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6076:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6078:	b00b      	add	sp, #44	; 0x2c
   d607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d607c:	000d8522 	.word	0x000d8522
   d6080:	000d87a8 	.word	0x000d87a8
   d6084:	000d85a8 	.word	0x000d85a8
   d6088:	000d849c 	.word	0x000d849c
   d608c:	000d8526 	.word	0x000d8526

000d6090 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6090:	4b01      	ldr	r3, [pc, #4]	; (d6098 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6092:	4a02      	ldr	r2, [pc, #8]	; (d609c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6094:	601a      	str	r2, [r3, #0]
   d6096:	4770      	bx	lr
   d6098:	2003e3d0 	.word	0x2003e3d0
   d609c:	000d8537 	.word	0x000d8537

000d60a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d60a4:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d60a6:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60aa:	4604      	mov	r4, r0
   d60ac:	460e      	mov	r6, r1
   d60ae:	4617      	mov	r7, r2
   d60b0:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d60b2:	f001 fbaf 	bl	d7814 <_Z16_fetch_usbserialv>
   d60b6:	4581      	cmp	r9, r0
   d60b8:	d105      	bne.n	d60c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d60ba:	485a      	ldr	r0, [pc, #360]	; (d6224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d60bc:	f000 fd35 	bl	d6b2a <_ZN5spark12NetworkClass9listeningEv>
   d60c0:	2800      	cmp	r0, #0
   d60c2:	f040 80ac 	bne.w	d621e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d60c6:	792b      	ldrb	r3, [r5, #4]
   d60c8:	071b      	lsls	r3, r3, #28
   d60ca:	d505      	bpl.n	d60d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d60cc:	696b      	ldr	r3, [r5, #20]
   d60ce:	4a56      	ldr	r2, [pc, #344]	; (d6228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d60d0:	6a20      	ldr	r0, [r4, #32]
   d60d2:	2100      	movs	r1, #0
   d60d4:	f000 fe32 	bl	d6d3c <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d60d8:	f1b8 0f00 	cmp.w	r8, #0
   d60dc:	d00d      	beq.n	d60fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d60de:	215b      	movs	r1, #91	; 0x5b
   d60e0:	4620      	mov	r0, r4
   d60e2:	f7ff fa32 	bl	d554a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d60e6:	4641      	mov	r1, r8
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7ff fa20 	bl	d552e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d60ee:	6823      	ldr	r3, [r4, #0]
   d60f0:	494e      	ldr	r1, [pc, #312]	; (d622c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d60f2:	68db      	ldr	r3, [r3, #12]
   d60f4:	2202      	movs	r2, #2
   d60f6:	4620      	mov	r0, r4
   d60f8:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d60fa:	792b      	ldrb	r3, [r5, #4]
   d60fc:	07d9      	lsls	r1, r3, #31
   d60fe:	d525      	bpl.n	d614c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6100:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6104:	212f      	movs	r1, #47	; 0x2f
   d6106:	4640      	mov	r0, r8
   d6108:	f001 ff5f 	bl	d7fca <strrchr>
    if (s1) {
   d610c:	b108      	cbz	r0, d6112 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d610e:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6112:	4641      	mov	r1, r8
   d6114:	4620      	mov	r0, r4
   d6116:	f7ff fa0a 	bl	d552e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d611a:	792b      	ldrb	r3, [r5, #4]
   d611c:	079a      	lsls	r2, r3, #30
   d611e:	d509      	bpl.n	d6134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6120:	213a      	movs	r1, #58	; 0x3a
   d6122:	4620      	mov	r0, r4
   d6124:	f7ff fa11 	bl	d554a <_ZN5spark16StreamLogHandler5writeEc>
   d6128:	68eb      	ldr	r3, [r5, #12]
   d612a:	4a41      	ldr	r2, [pc, #260]	; (d6230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d612c:	6a20      	ldr	r0, [r4, #32]
   d612e:	2100      	movs	r1, #0
   d6130:	f000 fe04 	bl	d6d3c <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6134:	792b      	ldrb	r3, [r5, #4]
   d6136:	f013 0f04 	tst.w	r3, #4
   d613a:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d613c:	bf18      	it	ne
   d613e:	493d      	ldrne	r1, [pc, #244]	; (d6234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6140:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6142:	bf08      	it	eq
   d6144:	493c      	ldreq	r1, [pc, #240]	; (d6238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6146:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6148:	4620      	mov	r0, r4
   d614a:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d614c:	792b      	ldrb	r3, [r5, #4]
   d614e:	075b      	lsls	r3, r3, #29
   d6150:	d518      	bpl.n	d6184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6152:	6929      	ldr	r1, [r5, #16]
   d6154:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6156:	4613      	mov	r3, r2
   d6158:	f813 0b01 	ldrb.w	r0, [r3], #1
   d615c:	b138      	cbz	r0, d616e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d615e:	2820      	cmp	r0, #32
   d6160:	d101      	bne.n	d6166 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6162:	4619      	mov	r1, r3
   d6164:	e001      	b.n	d616a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d6166:	2828      	cmp	r0, #40	; 0x28
   d6168:	d001      	beq.n	d616e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d616a:	461a      	mov	r2, r3
   d616c:	e7f3      	b.n	d6156 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d616e:	6823      	ldr	r3, [r4, #0]
   d6170:	1a52      	subs	r2, r2, r1
   d6172:	68db      	ldr	r3, [r3, #12]
   d6174:	4620      	mov	r0, r4
   d6176:	4798      	blx	r3
        write("(): ", 4);
   d6178:	6823      	ldr	r3, [r4, #0]
   d617a:	4930      	ldr	r1, [pc, #192]	; (d623c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d617c:	68db      	ldr	r3, [r3, #12]
   d617e:	2204      	movs	r2, #4
   d6180:	4620      	mov	r0, r4
   d6182:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6184:	2100      	movs	r1, #0
   d6186:	4638      	mov	r0, r7
   d6188:	f7fe fd54 	bl	d4c34 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d618c:	4601      	mov	r1, r0
   d618e:	4620      	mov	r0, r4
   d6190:	f7ff f9cd 	bl	d552e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6194:	6823      	ldr	r3, [r4, #0]
   d6196:	4928      	ldr	r1, [pc, #160]	; (d6238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6198:	68db      	ldr	r3, [r3, #12]
   d619a:	2202      	movs	r2, #2
   d619c:	4620      	mov	r0, r4
   d619e:	4798      	blx	r3
    // Message
    if (msg) {
   d61a0:	b11e      	cbz	r6, d61aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d61a2:	4631      	mov	r1, r6
   d61a4:	4620      	mov	r0, r4
   d61a6:	f7ff f9c2 	bl	d552e <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d61aa:	792b      	ldrb	r3, [r5, #4]
   d61ac:	f013 0f30 	tst.w	r3, #48	; 0x30
   d61b0:	d02d      	beq.n	d620e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d61b2:	6823      	ldr	r3, [r4, #0]
   d61b4:	4922      	ldr	r1, [pc, #136]	; (d6240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d61b6:	68db      	ldr	r3, [r3, #12]
   d61b8:	4620      	mov	r0, r4
   d61ba:	2202      	movs	r2, #2
   d61bc:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d61be:	792b      	ldrb	r3, [r5, #4]
   d61c0:	06d8      	lsls	r0, r3, #27
   d61c2:	d50b      	bpl.n	d61dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d61c4:	6823      	ldr	r3, [r4, #0]
   d61c6:	491f      	ldr	r1, [pc, #124]	; (d6244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d61c8:	68db      	ldr	r3, [r3, #12]
   d61ca:	2207      	movs	r2, #7
   d61cc:	4620      	mov	r0, r4
   d61ce:	4798      	blx	r3
   d61d0:	69ab      	ldr	r3, [r5, #24]
   d61d2:	4a1d      	ldr	r2, [pc, #116]	; (d6248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d61d4:	6a20      	ldr	r0, [r4, #32]
   d61d6:	2100      	movs	r1, #0
   d61d8:	f000 fdb0 	bl	d6d3c <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d61dc:	792b      	ldrb	r3, [r5, #4]
   d61de:	0699      	lsls	r1, r3, #26
   d61e0:	d511      	bpl.n	d6206 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d61e2:	06da      	lsls	r2, r3, #27
   d61e4:	d505      	bpl.n	d61f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d61e6:	6823      	ldr	r3, [r4, #0]
   d61e8:	4912      	ldr	r1, [pc, #72]	; (d6234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d61ea:	68db      	ldr	r3, [r3, #12]
   d61ec:	2202      	movs	r2, #2
   d61ee:	4620      	mov	r0, r4
   d61f0:	4798      	blx	r3
            }
            write("details = ", 10);
   d61f2:	6823      	ldr	r3, [r4, #0]
   d61f4:	4915      	ldr	r1, [pc, #84]	; (d624c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d61f6:	68db      	ldr	r3, [r3, #12]
   d61f8:	4620      	mov	r0, r4
   d61fa:	220a      	movs	r2, #10
   d61fc:	4798      	blx	r3
            write(attr.details);
   d61fe:	69e9      	ldr	r1, [r5, #28]
   d6200:	4620      	mov	r0, r4
   d6202:	f7ff f994 	bl	d552e <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d6206:	215d      	movs	r1, #93	; 0x5d
   d6208:	4620      	mov	r0, r4
   d620a:	f7ff f99e 	bl	d554a <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d620e:	6823      	ldr	r3, [r4, #0]
   d6210:	490f      	ldr	r1, [pc, #60]	; (d6250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6212:	68db      	ldr	r3, [r3, #12]
   d6214:	4620      	mov	r0, r4
   d6216:	2202      	movs	r2, #2
}
   d6218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d621c:	4718      	bx	r3
   d621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6222:	bf00      	nop
   d6224:	2003e5a8 	.word	0x2003e5a8
   d6228:	000d853b 	.word	0x000d853b
   d622c:	000d8542 	.word	0x000d8542
   d6230:	000d8625 	.word	0x000d8625
   d6234:	000d8545 	.word	0x000d8545
   d6238:	000d854a 	.word	0x000d854a
   d623c:	000d8548 	.word	0x000d8548
   d6240:	000d854d 	.word	0x000d854d
   d6244:	000d8550 	.word	0x000d8550
   d6248:	000d8558 	.word	0x000d8558
   d624c:	000d855b 	.word	0x000d855b
   d6250:	000d8566 	.word	0x000d8566

000d6254 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6258:	b085      	sub	sp, #20
   d625a:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d625e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6260:	4606      	mov	r6, r0
   d6262:	460f      	mov	r7, r1
   d6264:	4691      	mov	r9, r2
   d6266:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d6268:	f001 fad4 	bl	d7814 <_Z16_fetch_usbserialv>
   d626c:	4580      	cmp	r8, r0
   d626e:	d105      	bne.n	d627c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6270:	484a      	ldr	r0, [pc, #296]	; (d639c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6272:	f000 fc5a 	bl	d6b2a <_ZN5spark12NetworkClass9listeningEv>
   d6276:	2800      	cmp	r0, #0
   d6278:	f040 808c 	bne.w	d6394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d627c:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d627e:	4a48      	ldr	r2, [pc, #288]	; (d63a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6280:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6282:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d6286:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6288:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d628a:	f88d 8008 	strb.w	r8, [sp, #8]
   d628e:	f7fe fff0 	bl	d5272 <_ZN5spark10JSONWriter11beginObjectEv>
   d6292:	4641      	mov	r1, r8
   d6294:	4648      	mov	r0, r9
   d6296:	f7fe fccd 	bl	d4c34 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d629a:	4942      	ldr	r1, [pc, #264]	; (d63a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d629c:	4680      	mov	r8, r0
   d629e:	2201      	movs	r2, #1
   d62a0:	a801      	add	r0, sp, #4
   d62a2:	f7ff f86b 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d62a6:	4641      	mov	r1, r8
   d62a8:	f7ff f931 	bl	d550e <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d62ac:	b13f      	cbz	r7, d62be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d62ae:	493e      	ldr	r1, [pc, #248]	; (d63a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d62b0:	2201      	movs	r2, #1
   d62b2:	a801      	add	r0, sp, #4
   d62b4:	f7ff f862 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d62b8:	4639      	mov	r1, r7
   d62ba:	f7ff f928 	bl	d550e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d62be:	b13d      	cbz	r5, d62d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d62c0:	493a      	ldr	r1, [pc, #232]	; (d63ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d62c2:	2201      	movs	r2, #1
   d62c4:	a801      	add	r0, sp, #4
   d62c6:	f7ff f859 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d62ca:	4629      	mov	r1, r5
   d62cc:	f7ff f91f 	bl	d550e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d62d0:	7923      	ldrb	r3, [r4, #4]
   d62d2:	07df      	lsls	r7, r3, #31
   d62d4:	d50e      	bpl.n	d62f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d62d6:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d62d8:	212f      	movs	r1, #47	; 0x2f
   d62da:	4628      	mov	r0, r5
   d62dc:	f001 fe75 	bl	d7fca <strrchr>
    if (s1) {
   d62e0:	b100      	cbz	r0, d62e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d62e2:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d62e4:	4932      	ldr	r1, [pc, #200]	; (d63b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d62e6:	2201      	movs	r2, #1
   d62e8:	a801      	add	r0, sp, #4
   d62ea:	f7ff f847 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d62ee:	4629      	mov	r1, r5
   d62f0:	f7ff f90d 	bl	d550e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d62f4:	7923      	ldrb	r3, [r4, #4]
   d62f6:	079d      	lsls	r5, r3, #30
   d62f8:	d507      	bpl.n	d630a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d62fa:	492e      	ldr	r1, [pc, #184]	; (d63b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d62fc:	2202      	movs	r2, #2
   d62fe:	a801      	add	r0, sp, #4
   d6300:	f7ff f83c 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d6304:	68e1      	ldr	r1, [r4, #12]
   d6306:	f7fe ffc1 	bl	d528c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d630a:	7923      	ldrb	r3, [r4, #4]
   d630c:	0758      	lsls	r0, r3, #29
   d630e:	d516      	bpl.n	d633e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6310:	6925      	ldr	r5, [r4, #16]
   d6312:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6314:	463b      	mov	r3, r7
   d6316:	f813 2b01 	ldrb.w	r2, [r3], #1
   d631a:	b13a      	cbz	r2, d632c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d631c:	2a20      	cmp	r2, #32
   d631e:	d101      	bne.n	d6324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6320:	461d      	mov	r5, r3
   d6322:	e001      	b.n	d6328 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d6324:	2a28      	cmp	r2, #40	; 0x28
   d6326:	d001      	beq.n	d632c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6328:	461f      	mov	r7, r3
   d632a:	e7f3      	b.n	d6314 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d632c:	2202      	movs	r2, #2
   d632e:	4922      	ldr	r1, [pc, #136]	; (d63b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6330:	a801      	add	r0, sp, #4
   d6332:	f7ff f823 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d6336:	1b7a      	subs	r2, r7, r5
   d6338:	4629      	mov	r1, r5
   d633a:	f7ff f82e 	bl	d539a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d633e:	7923      	ldrb	r3, [r4, #4]
   d6340:	0719      	lsls	r1, r3, #28
   d6342:	d507      	bpl.n	d6354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6344:	491d      	ldr	r1, [pc, #116]	; (d63bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6346:	2201      	movs	r2, #1
   d6348:	a801      	add	r0, sp, #4
   d634a:	f7ff f817 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d634e:	6961      	ldr	r1, [r4, #20]
   d6350:	f7fe ffae 	bl	d52b0 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6354:	7923      	ldrb	r3, [r4, #4]
   d6356:	06da      	lsls	r2, r3, #27
   d6358:	d508      	bpl.n	d636c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d635a:	2204      	movs	r2, #4
   d635c:	4918      	ldr	r1, [pc, #96]	; (d63c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d635e:	eb0d 0002 	add.w	r0, sp, r2
   d6362:	f7ff f80b 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d6366:	69a1      	ldr	r1, [r4, #24]
   d6368:	f7fe ff90 	bl	d528c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d636c:	7923      	ldrb	r3, [r4, #4]
   d636e:	069b      	lsls	r3, r3, #26
   d6370:	d507      	bpl.n	d6382 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6372:	4914      	ldr	r1, [pc, #80]	; (d63c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6374:	2206      	movs	r2, #6
   d6376:	a801      	add	r0, sp, #4
   d6378:	f7ff f800 	bl	d537c <_ZN5spark10JSONWriter4nameEPKcj>
   d637c:	69e1      	ldr	r1, [r4, #28]
   d637e:	f7ff f8c6 	bl	d550e <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6382:	a801      	add	r0, sp, #4
   d6384:	f7fe ff5f 	bl	d5246 <_ZN5spark10JSONWriter9endObjectEv>
   d6388:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d638a:	490f      	ldr	r1, [pc, #60]	; (d63c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d638c:	6803      	ldr	r3, [r0, #0]
   d638e:	2202      	movs	r2, #2
   d6390:	68db      	ldr	r3, [r3, #12]
   d6392:	4798      	blx	r3
}
   d6394:	b005      	add	sp, #20
   d6396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d639a:	bf00      	nop
   d639c:	2003e5a8 	.word	0x2003e5a8
   d63a0:	000d8484 	.word	0x000d8484
   d63a4:	000d84ce 	.word	0x000d84ce
   d63a8:	000d84e1 	.word	0x000d84e1
   d63ac:	000d859a 	.word	0x000d859a
   d63b0:	000d81a8 	.word	0x000d81a8
   d63b4:	000d8569 	.word	0x000d8569
   d63b8:	000d856c 	.word	0x000d856c
   d63bc:	000d81a1 	.word	0x000d81a1
   d63c0:	000d856f 	.word	0x000d856f
   d63c4:	000d8574 	.word	0x000d8574
   d63c8:	000d8566 	.word	0x000d8566

000d63cc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d63cc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d63ce:	2301      	movs	r3, #1
   d63d0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d63d2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d63d4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d63d6:	b10b      	cbz	r3, d63dc <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d63d8:	68c0      	ldr	r0, [r0, #12]
   d63da:	e006      	b.n	d63ea <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d63dc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d63de:	b128      	cbz	r0, d63ec <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d63e0:	6883      	ldr	r3, [r0, #8]
   d63e2:	b90b      	cbnz	r3, d63e8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d63e4:	f001 fbad 	bl	d7b42 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63e8:	68c3      	ldr	r3, [r0, #12]
   d63ea:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d63ec:	2301      	movs	r3, #1
   d63ee:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d63f0:	2000      	movs	r0, #0
    }
   d63f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d63f6:	f7fe ba4d 	b.w	d4894 <os_thread_exit>

000d63fa <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63fa:	2200      	movs	r2, #0
   d63fc:	4611      	mov	r1, r2
   d63fe:	6840      	ldr	r0, [r0, #4]
   d6400:	f7fe bca6 	b.w	d4d50 <network_listening>

000d6404 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6404:	2200      	movs	r2, #0
   d6406:	4611      	mov	r1, r2
   d6408:	6840      	ldr	r0, [r0, #4]
   d640a:	f7fe bcb1 	b.w	d4d70 <network_get_listen_timeout>

000d640e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d640e:	2200      	movs	r2, #0
   d6410:	6840      	ldr	r0, [r0, #4]
   d6412:	f7fe bca5 	b.w	d4d60 <network_set_listen_timeout>

000d6416 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6416:	2200      	movs	r2, #0
   d6418:	f081 0101 	eor.w	r1, r1, #1
   d641c:	6840      	ldr	r0, [r0, #4]
   d641e:	f7fe bc8f 	b.w	d4d40 <network_listen>

000d6422 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6422:	2300      	movs	r3, #0
   d6424:	461a      	mov	r2, r3
   d6426:	2101      	movs	r1, #1
   d6428:	6840      	ldr	r0, [r0, #4]
   d642a:	f7fe bc81 	b.w	d4d30 <network_off>

000d642e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d642e:	2300      	movs	r3, #0
   d6430:	461a      	mov	r2, r3
   d6432:	4619      	mov	r1, r3
   d6434:	6840      	ldr	r0, [r0, #4]
   d6436:	f7fe bc73 	b.w	d4d20 <network_on>

000d643a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d643a:	2200      	movs	r2, #0
   d643c:	4611      	mov	r1, r2
   d643e:	6840      	ldr	r0, [r0, #4]
   d6440:	f7fe bc66 	b.w	d4d10 <network_ready>

000d6444 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6444:	2200      	movs	r2, #0
   d6446:	4611      	mov	r1, r2
   d6448:	6840      	ldr	r0, [r0, #4]
   d644a:	f7fe bc51 	b.w	d4cf0 <network_connecting>

000d644e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d644e:	2200      	movs	r2, #0
   d6450:	2102      	movs	r1, #2
   d6452:	6840      	ldr	r0, [r0, #4]
   d6454:	f7fe bc54 	b.w	d4d00 <network_disconnect>

000d6458 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6458:	2300      	movs	r3, #0
   d645a:	461a      	mov	r2, r3
   d645c:	6840      	ldr	r0, [r0, #4]
   d645e:	f7fe bc3f 	b.w	d4ce0 <network_connect>

000d6462 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6462:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6464:	4605      	mov	r5, r0
   d6466:	b188      	cbz	r0, d648c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6468:	6804      	ldr	r4, [r0, #0]
   d646a:	b14c      	cbz	r4, d6480 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d646c:	68a3      	ldr	r3, [r4, #8]
   d646e:	b11b      	cbz	r3, d6478 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6470:	2203      	movs	r2, #3
   d6472:	4621      	mov	r1, r4
   d6474:	4620      	mov	r0, r4
   d6476:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6478:	2110      	movs	r1, #16
   d647a:	4620      	mov	r0, r4
   d647c:	f001 fb45 	bl	d7b0a <_ZdlPvj>
   d6480:	4628      	mov	r0, r5
   d6482:	2114      	movs	r1, #20
      }
   d6484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6488:	f001 bb3f 	b.w	d7b0a <_ZdlPvj>
   d648c:	bd38      	pop	{r3, r4, r5, pc}

000d648e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d648e:	b110      	cbz	r0, d6496 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6490:	6803      	ldr	r3, [r0, #0]
   d6492:	685b      	ldr	r3, [r3, #4]
   d6494:	4718      	bx	r3
   d6496:	4770      	bx	lr

000d6498 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6498:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d649a:	6803      	ldr	r3, [r0, #0]
   d649c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d649e:	b1bb      	cbz	r3, d64d0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d64a0:	6858      	ldr	r0, [r3, #4]
   d64a2:	f7fe f9bf 	bl	d4824 <os_thread_is_current>
   d64a6:	b978      	cbnz	r0, d64c8 <_ZN6ThreadD1Ev+0x30>
   d64a8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d64aa:	7c5a      	ldrb	r2, [r3, #17]
   d64ac:	b912      	cbnz	r2, d64b4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d64ae:	6858      	ldr	r0, [r3, #4]
   d64b0:	f7fe f9c0 	bl	d4834 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d64b4:	6823      	ldr	r3, [r4, #0]
   d64b6:	6858      	ldr	r0, [r3, #4]
   d64b8:	f7fe f9c4 	bl	d4844 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64bc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d64be:	2300      	movs	r3, #0
   d64c0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d64c2:	b128      	cbz	r0, d64d0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d64c4:	f7ff ffcd 	bl	d6462 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64c8:	6820      	ldr	r0, [r4, #0]
   d64ca:	b108      	cbz	r0, d64d0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d64cc:	f7ff ffc9 	bl	d6462 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d64d0:	4620      	mov	r0, r4
   d64d2:	bd10      	pop	{r4, pc}

000d64d4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d64d4:	b538      	push	{r3, r4, r5, lr}
   d64d6:	4b0c      	ldr	r3, [pc, #48]	; (d6508 <_ZN5spark9MeshClassD1Ev+0x34>)
   d64d8:	6003      	str	r3, [r0, #0]
   d64da:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64dc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d64e0:	b108      	cbz	r0, d64e6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d64e2:	f7fd fdde 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64e6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d64ea:	b135      	cbz	r5, d64fa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d64ec:	4628      	mov	r0, r5
   d64ee:	f7ff ffd3 	bl	d6498 <_ZN6ThreadD1Ev>
   d64f2:	2104      	movs	r1, #4
   d64f4:	4628      	mov	r0, r5
   d64f6:	f001 fb08 	bl	d7b0a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64fa:	68a0      	ldr	r0, [r4, #8]
   d64fc:	b108      	cbz	r0, d6502 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d64fe:	f7ff ffc6 	bl	d648e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6502:	4620      	mov	r0, r4
   d6504:	bd38      	pop	{r3, r4, r5, pc}
   d6506:	bf00      	nop
   d6508:	000d85d8 	.word	0x000d85d8

000d650c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d650c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6510:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6512:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d6516:	4606      	mov	r6, r0
   d6518:	4688      	mov	r8, r1
   d651a:	4691      	mov	r9, r2
   d651c:	469a      	mov	sl, r3
   d651e:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6520:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6522:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6524:	454b      	cmp	r3, r9
   d6526:	d129      	bne.n	d657c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d6528:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d652a:	4553      	cmp	r3, sl
   d652c:	d126      	bne.n	d657c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d652e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d6532:	455b      	cmp	r3, fp
   d6534:	d122      	bne.n	d657c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6536:	2140      	movs	r1, #64	; 0x40
   d6538:	4640      	mov	r0, r8
   d653a:	f001 fd3a 	bl	d7fb2 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d653e:	4641      	mov	r1, r8
   d6540:	4602      	mov	r2, r0
   d6542:	4620      	mov	r0, r4
   d6544:	f001 fd20 	bl	d7f88 <strncmp>
   d6548:	b9c0      	cbnz	r0, d657c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d654a:	b16f      	cbz	r7, d6568 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d654c:	210c      	movs	r1, #12
   d654e:	4638      	mov	r0, r7
   d6550:	f001 fd2f 	bl	d7fb2 <strnlen>
                if (id_len)
   d6554:	4602      	mov	r2, r0
   d6556:	b138      	cbz	r0, d6568 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d6558:	2358      	movs	r3, #88	; 0x58
   d655a:	fb03 6005 	mla	r0, r3, r5, r6
   d655e:	4639      	mov	r1, r7
   d6560:	3049      	adds	r0, #73	; 0x49
   d6562:	f001 fd11 	bl	d7f88 <strncmp>
   d6566:	e004      	b.n	d6572 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d6568:	2058      	movs	r0, #88	; 0x58
   d656a:	fb00 6505 	mla	r5, r0, r5, r6
   d656e:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d6572:	fab0 f080 	clz	r0, r0
   d6576:	0940      	lsrs	r0, r0, #5
   d6578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d657c:	3501      	adds	r5, #1
   d657e:	2d05      	cmp	r5, #5
   d6580:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d6584:	d1cd      	bne.n	d6522 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d6586:	2000      	movs	r0, #0
}
   d6588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d658c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6590:	b085      	sub	sp, #20
   d6592:	4607      	mov	r7, r0
   d6594:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6598:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d659a:	9601      	str	r6, [sp, #4]
   d659c:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d65a0:	4689      	mov	r9, r1
   d65a2:	9202      	str	r2, [sp, #8]
   d65a4:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d65a6:	f7ff ffb1 	bl	d650c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d65aa:	2800      	cmp	r0, #0
   d65ac:	d13c      	bne.n	d6628 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d65ae:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d65b0:	2358      	movs	r3, #88	; 0x58
   d65b2:	fb03 7504 	mla	r5, r3, r4, r7
   d65b6:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d65ba:	f1b8 0f00 	cmp.w	r8, #0
   d65be:	d12e      	bne.n	d661e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d65c0:	2140      	movs	r1, #64	; 0x40
   d65c2:	4648      	mov	r0, r9
   d65c4:	f001 fcf5 	bl	d7fb2 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d65c8:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d65ca:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d65cc:	4602      	mov	r2, r0
   d65ce:	4628      	mov	r0, r5
   d65d0:	f001 fc1f 	bl	d7e12 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d65d4:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d65d8:	4641      	mov	r1, r8
   d65da:	eb05 000b 	add.w	r0, r5, fp
   d65de:	f001 fc3e 	bl	d7e5e <memset>
            event_handlers[i].handler = handler;
   d65e2:	9b02      	ldr	r3, [sp, #8]
   d65e4:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d65e6:	9b03      	ldr	r3, [sp, #12]
   d65e8:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d65ea:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d65ee:	b12e      	cbz	r6, d65fc <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d65f0:	210c      	movs	r1, #12
   d65f2:	4630      	mov	r0, r6
   d65f4:	f001 fcdd 	bl	d7fb2 <strnlen>
   d65f8:	4605      	mov	r5, r0
   d65fa:	e000      	b.n	d65fe <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d65fc:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d65fe:	2058      	movs	r0, #88	; 0x58
   d6600:	4344      	muls	r4, r0
   d6602:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d6604:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6606:	462a      	mov	r2, r5
   d6608:	4631      	mov	r1, r6
   d660a:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d660c:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d660e:	f001 fc00 	bl	d7e12 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6612:	2000      	movs	r0, #0
   d6614:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d6618:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d661c:	e005      	b.n	d662a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d661e:	3401      	adds	r4, #1
   d6620:	2c05      	cmp	r4, #5
   d6622:	d1c6      	bne.n	d65b2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6624:	4802      	ldr	r0, [pc, #8]	; (d6630 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d6626:	e000      	b.n	d662a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d6628:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d662a:	b005      	add	sp, #20
   d662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6630:	fffffefc 	.word	0xfffffefc

000d6634 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6634:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d6636:	2300      	movs	r3, #0
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	9300      	str	r3, [sp, #0]
   d663c:	f7ff ffa6 	bl	d658c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6640:	b003      	add	sp, #12
   d6642:	f85d fb04 	ldr.w	pc, [sp], #4

000d6646 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6646:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d664a:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d664c:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d664e:	460d      	mov	r5, r1
   d6650:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6652:	f001 fc91 	bl	d7f78 <strlen>
   d6656:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d665a:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d665c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d665e:	b1ab      	cbz	r3, d668c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6660:	2140      	movs	r1, #64	; 0x40
   d6662:	4620      	mov	r0, r4
   d6664:	f001 fca5 	bl	d7fb2 <strnlen>

        if (event_name_length < filter_length)
   d6668:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d666a:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d666c:	d30b      	bcc.n	d6686 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d666e:	4629      	mov	r1, r5
   d6670:	4620      	mov	r0, r4
   d6672:	f001 fbbf 	bl	d7df4 <memcmp>
        if (0 == cmp)
   d6676:	b930      	cbnz	r0, d6686 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d6678:	9000      	str	r0, [sp, #0]
   d667a:	4643      	mov	r3, r8
   d667c:	462a      	mov	r2, r5
   d667e:	4621      	mov	r1, r4
   d6680:	2058      	movs	r0, #88	; 0x58
   d6682:	f7fe fb13 	bl	d4cac <system_invoke_event_handler>
   d6686:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6688:	42b4      	cmp	r4, r6
   d668a:	d1e7      	bne.n	d665c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d668c:	b002      	add	sp, #8
   d668e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6694 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6694:	b530      	push	{r4, r5, lr}
   d6696:	b08d      	sub	sp, #52	; 0x34
   d6698:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d669a:	2211      	movs	r2, #17
   d669c:	2100      	movs	r1, #0
   d669e:	a801      	add	r0, sp, #4
   d66a0:	f001 fbdd 	bl	d7e5e <memset>
    addr.v = 6;
   d66a4:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d66a6:	aa01      	add	r2, sp, #4
   d66a8:	4909      	ldr	r1, [pc, #36]	; (d66d0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d66aa:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d66ae:	200a      	movs	r0, #10
   d66b0:	f7fe f9b0 	bl	d4a14 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d66b4:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d66b6:	a901      	add	r1, sp, #4
   d66b8:	a806      	add	r0, sp, #24
   d66ba:	f7fe fccb 	bl	d5054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d66be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66c0:	3404      	adds	r4, #4
   d66c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66c4:	682b      	ldr	r3, [r5, #0]
   d66c6:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d66c8:	2000      	movs	r0, #0
   d66ca:	b00d      	add	sp, #52	; 0x34
   d66cc:	bd30      	pop	{r4, r5, pc}
   d66ce:	bf00      	nop
   d66d0:	000d8604 	.word	0x000d8604

000d66d4 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d66d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66d8:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d66da:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d66de:	b08a      	sub	sp, #40	; 0x28
   d66e0:	4630      	mov	r0, r6
   d66e2:	f7fe ff21 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d66e6:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d66e8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d66ec:	f7fe f8ca 	bl	d4884 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d66f0:	2c00      	cmp	r4, #0
   d66f2:	d063      	beq.n	d67bc <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d66f4:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d66f8:	b163      	cbz	r3, d6714 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d66fa:	6823      	ldr	r3, [r4, #0]
   d66fc:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d6700:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d6702:	4620      	mov	r0, r4
   d6704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6708:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d670c:	47b8      	blx	r7
        if (len > 0) {
   d670e:	1e04      	subs	r4, r0, #0
   d6710:	dc13      	bgt.n	d673a <_ZN5spark11MeshPublish4pollEv+0x66>
   d6712:	e056      	b.n	d67c2 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d6714:	492d      	ldr	r1, [pc, #180]	; (d67cc <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d6716:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d671a:	f001 fa10 	bl	d7b3e <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d671e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d6722:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d6726:	b113      	cbz	r3, d672e <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6728:	4618      	mov	r0, r3
   d672a:	f7fd fcba 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d672e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6732:	2b00      	cmp	r3, #0
   d6734:	d1e1      	bne.n	d66fa <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d6736:	4826      	ldr	r0, [pc, #152]	; (d67d0 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d6738:	e044      	b.n	d67c4 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d673a:	2320      	movs	r3, #32
   d673c:	4a25      	ldr	r2, [pc, #148]	; (d67d4 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d673e:	9302      	str	r3, [sp, #8]
   d6740:	9200      	str	r2, [sp, #0]
   d6742:	2300      	movs	r3, #0
   d6744:	9401      	str	r4, [sp, #4]
   d6746:	aa02      	add	r2, sp, #8
   d6748:	4923      	ldr	r1, [pc, #140]	; (d67d8 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d674a:	9303      	str	r3, [sp, #12]
   d674c:	2001      	movs	r0, #1
   d674e:	f7fe fa69 	bl	d4c24 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6752:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d6756:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d6758:	781b      	ldrb	r3, [r3, #0]
   d675a:	bb6b      	cbnz	r3, d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d675c:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d675e:	4621      	mov	r1, r4
   d6760:	4638      	mov	r0, r7
   d6762:	f001 fc26 	bl	d7fb2 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d6766:	b338      	cbz	r0, d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d6768:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d676a:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d676c:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6770:	dd22      	ble.n	d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6772:	5c3b      	ldrb	r3, [r7, r0]
   d6774:	bb03      	cbnz	r3, d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d6776:	3c01      	subs	r4, #1
   d6778:	d00e      	beq.n	d6798 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d677a:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d677e:	4621      	mov	r1, r4
   d6780:	4640      	mov	r0, r8
   d6782:	f001 fc16 	bl	d7fb2 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d6786:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6788:	2c00      	cmp	r4, #0
   d678a:	dd15      	ble.n	d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d678c:	f818 3000 	ldrb.w	r3, [r8, r0]
   d6790:	b993      	cbnz	r3, d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d6792:	2c01      	cmp	r4, #1
   d6794:	d002      	beq.n	d679c <_ZN5spark11MeshPublish4pollEv+0xc8>
   d6796:	e00f      	b.n	d67b8 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d6798:	f8df 8044 	ldr.w	r8, [pc, #68]	; d67e0 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d679c:	4630      	mov	r0, r6
   d679e:	f7fe fec3 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d67a2:	4642      	mov	r2, r8
   d67a4:	4639      	mov	r1, r7
   d67a6:	1d28      	adds	r0, r5, #4
   d67a8:	f7ff ff4d 	bl	d6646 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d67ac:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d67b0:	f7fe f868 	bl	d4884 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d67b4:	2000      	movs	r0, #0
   d67b6:	e005      	b.n	d67c4 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d67b8:	4808      	ldr	r0, [pc, #32]	; (d67dc <_ZN5spark11MeshPublish4pollEv+0x108>)
   d67ba:	e003      	b.n	d67c4 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d67bc:	2064      	movs	r0, #100	; 0x64
   d67be:	f7fe f879 	bl	d48b4 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d67c2:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d67c4:	b00a      	add	sp, #40	; 0x28
   d67c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67ca:	bf00      	nop
   d67cc:	000d87a8 	.word	0x000d87a8
   d67d0:	fffffefc 	.word	0xfffffefc
   d67d4:	000d8618 	.word	0x000d8618
   d67d8:	000d8611 	.word	0x000d8611
   d67dc:	fffffee8 	.word	0xfffffee8
   d67e0:	000d8568 	.word	0x000d8568

000d67e4 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d67e4:	b510      	push	{r4, lr}
   d67e6:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d67e8:	f3bf 8f5f 	dmb	sy
   d67ec:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d67f0:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d67f4:	b91b      	cbnz	r3, d67fe <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d67f6:	4620      	mov	r0, r4
   d67f8:	f7ff ff6c 	bl	d66d4 <_ZN5spark11MeshPublish4pollEv>
   d67fc:	e7f4      	b.n	d67e8 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d67fe:	bd10      	pop	{r4, pc}

000d6800 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d6800:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6802:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6804:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6806:	b144      	cbz	r4, d681a <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6808:	4620      	mov	r0, r4
   d680a:	f7ff fe45 	bl	d6498 <_ZN6ThreadD1Ev>
   d680e:	4620      	mov	r0, r4
   d6810:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d6812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6816:	f001 b978 	b.w	d7b0a <_ZdlPvj>
   d681a:	bd10      	pop	{r4, pc}

000d681c <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6820:	4605      	mov	r5, r0
   d6822:	b08a      	sub	sp, #40	; 0x28
   d6824:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6828:	f7fe fe7e 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d682c:	682c      	ldr	r4, [r5, #0]
   d682e:	2c00      	cmp	r4, #0
   d6830:	d17b      	bne.n	d692a <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d6832:	204c      	movs	r0, #76	; 0x4c
   d6834:	f7fd fc2f 	bl	d4096 <_Znwj>
   d6838:	4606      	mov	r6, r0
   d683a:	2800      	cmp	r0, #0
   d683c:	d073      	beq.n	d6926 <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d683e:	f000 fe4f 	bl	d74e0 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d6842:	4622      	mov	r2, r4
   d6844:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d6848:	4630      	mov	r0, r6
   d684a:	f000 fe79 	bl	d7540 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d684e:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d6850:	483a      	ldr	r0, [pc, #232]	; (d693c <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6852:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d6856:	f7fe f8ad 	bl	d49b4 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d685a:	6833      	ldr	r3, [r6, #0]
   d685c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6860:	6a1b      	ldr	r3, [r3, #32]
   d6862:	f249 0169 	movw	r1, #36969	; 0x9069
   d6866:	4630      	mov	r0, r6
   d6868:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d686a:	a804      	add	r0, sp, #16
   d686c:	f7fe fbe4 	bl	d5038 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6870:	a804      	add	r0, sp, #16
   d6872:	f7ff ff0f 	bl	d6694 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6876:	2800      	cmp	r0, #0
   d6878:	db4a      	blt.n	d6910 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d687a:	a904      	add	r1, sp, #16
   d687c:	4630      	mov	r0, r6
   d687e:	f000 fecb 	bl	d7618 <_ZN3UDP13joinMulticastERK9IPAddress>
   d6882:	2800      	cmp	r0, #0
   d6884:	db44      	blt.n	d6910 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6886:	f3bf 8f5f 	dmb	sy
   d688a:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d688e:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6892:	492b      	ldr	r1, [pc, #172]	; (d6940 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6894:	2004      	movs	r0, #4
   d6896:	f001 f943 	bl	d7b20 <_ZnwjRKSt9nothrow_t>
   d689a:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d689e:	4607      	mov	r7, r0
   d68a0:	b348      	cbz	r0, d68f6 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d68a2:	4927      	ldr	r1, [pc, #156]	; (d6940 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d68a4:	2014      	movs	r0, #20
   d68a6:	f001 f93b 	bl	d7b20 <_ZnwjRKSt9nothrow_t>
   d68aa:	b128      	cbz	r0, d68b8 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d68ac:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d68ae:	6004      	str	r4, [r0, #0]
   d68b0:	6044      	str	r4, [r0, #4]
   d68b2:	6084      	str	r4, [r0, #8]
   d68b4:	60c4      	str	r4, [r0, #12]
   d68b6:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68b8:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d68ba:	b1b0      	cbz	r0, d68ea <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d68bc:	4b21      	ldr	r3, [pc, #132]	; (d6944 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d68be:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d68c0:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68c2:	4921      	ldr	r1, [pc, #132]	; (d6948 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d68c4:	60dd      	str	r5, [r3, #12]
   d68c6:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d68cc:	e88d 0009 	stmia.w	sp, {r0, r3}
   d68d0:	2203      	movs	r2, #3
   d68d2:	4b1e      	ldr	r3, [pc, #120]	; (d694c <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d68d4:	3004      	adds	r0, #4
   d68d6:	f7fd ff9d 	bl	d4814 <os_thread_create>
   d68da:	b930      	cbnz	r0, d68ea <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d68dc:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d68de:	7c1b      	ldrb	r3, [r3, #16]
   d68e0:	b94b      	cbnz	r3, d68f6 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d68e2:	2001      	movs	r0, #1
   d68e4:	f7fd ffe6 	bl	d48b4 <HAL_Delay_Milliseconds>
   d68e8:	e7f8      	b.n	d68dc <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68ea:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68ec:	2300      	movs	r3, #0
   d68ee:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d68f0:	b108      	cbz	r0, d68f6 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d68f2:	f7ff fdb6 	bl	d6462 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d68f6:	4639      	mov	r1, r7
   d68f8:	4640      	mov	r0, r8
   d68fa:	f7ff ff81 	bl	d6800 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d68fe:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d6902:	b13b      	cbz	r3, d6914 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6904:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6906:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6908:	b130      	cbz	r0, d6918 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d690a:	f7ff fdc0 	bl	d648e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d690e:	e00c      	b.n	d692a <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d6910:	4604      	mov	r4, r0
   d6912:	e003      	b.n	d691c <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d6914:	4c0e      	ldr	r4, [pc, #56]	; (d6950 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d6916:	e001      	b.n	d691c <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d6918:	4604      	mov	r4, r0
   d691a:	e007      	b.n	d692c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d691c:	b136      	cbz	r6, d692c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d691e:	4630      	mov	r0, r6
   d6920:	f7ff fdb5 	bl	d648e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6924:	e002      	b.n	d692c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d6926:	4c0a      	ldr	r4, [pc, #40]	; (d6950 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d6928:	e000      	b.n	d692c <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d692a:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d692c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6930:	f7fd ffa8 	bl	d4884 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d6934:	4620      	mov	r0, r4
   d6936:	b00a      	add	sp, #40	; 0x28
   d6938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d693c:	000d8628 	.word	0x000d8628
   d6940:	000d87a8 	.word	0x000d87a8
   d6944:	000d67e5 	.word	0x000d67e5
   d6948:	000d862c 	.word	0x000d862c
   d694c:	000d63cd 	.word	0x000d63cd
   d6950:	fffffefc 	.word	0xfffffefc

000d6954 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d6954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6958:	4605      	mov	r5, r0
   d695a:	b08c      	sub	sp, #48	; 0x30
   d695c:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d695e:	460f      	mov	r7, r1
   d6960:	b109      	cbz	r1, d6966 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d6962:	780b      	ldrb	r3, [r1, #0]
   d6964:	b90b      	cbnz	r3, d696a <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d6966:	4c35      	ldr	r4, [pc, #212]	; (d6a3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d6968:	e064      	b.n	d6a34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d696a:	4608      	mov	r0, r1
   d696c:	f001 fb04 	bl	d7f78 <strlen>
   d6970:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6972:	2e00      	cmp	r6, #0
   d6974:	d05c      	beq.n	d6a30 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d6976:	4630      	mov	r0, r6
   d6978:	f001 fafe 	bl	d7f78 <strlen>
   d697c:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d697e:	f108 0302 	add.w	r3, r8, #2
   d6982:	4423      	add	r3, r4
   d6984:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d6988:	d84f      	bhi.n	d6a2a <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d698a:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d698e:	f7fe fdcb 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6992:	4628      	mov	r0, r5
   d6994:	f7ff ff42 	bl	d681c <_ZN5spark11MeshPublish13initializeUdpEv>
   d6998:	2800      	cmp	r0, #0
   d699a:	db40      	blt.n	d6a1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d699c:	4668      	mov	r0, sp
   d699e:	f7fe fb4b 	bl	d5038 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d69a2:	4668      	mov	r0, sp
   d69a4:	f7ff fe76 	bl	d6694 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d69a8:	2800      	cmp	r0, #0
   d69aa:	db38      	blt.n	d6a1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d69ac:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d69b0:	f8da 3000 	ldr.w	r3, [sl]
   d69b4:	f10d 0c04 	add.w	ip, sp, #4
   d69b8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d69bc:	4b20      	ldr	r3, [pc, #128]	; (d6a40 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d69be:	9306      	str	r3, [sp, #24]
   d69c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d69c4:	f10d 0e1c 	add.w	lr, sp, #28
   d69c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d69cc:	f8dc 3000 	ldr.w	r3, [ip]
   d69d0:	f88e 3000 	strb.w	r3, [lr]
   d69d4:	f249 0269 	movw	r2, #36969	; 0x9069
   d69d8:	a906      	add	r1, sp, #24
   d69da:	4650      	mov	r0, sl
   d69dc:	47c8      	blx	r9
   d69de:	2800      	cmp	r0, #0
   d69e0:	db1d      	blt.n	d6a1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d69e2:	2300      	movs	r3, #0
   d69e4:	6828      	ldr	r0, [r5, #0]
   d69e6:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d69ea:	6803      	ldr	r3, [r0, #0]
   d69ec:	2201      	movs	r2, #1
   d69ee:	68db      	ldr	r3, [r3, #12]
   d69f0:	a906      	add	r1, sp, #24
   d69f2:	4798      	blx	r3
   d69f4:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d69f6:	6803      	ldr	r3, [r0, #0]
   d69f8:	f108 0201 	add.w	r2, r8, #1
   d69fc:	68db      	ldr	r3, [r3, #12]
   d69fe:	4639      	mov	r1, r7
   d6a00:	4798      	blx	r3
    if (dataLen > 0) {
   d6a02:	b12c      	cbz	r4, d6a10 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d6a04:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d6a06:	6803      	ldr	r3, [r0, #0]
   d6a08:	4622      	mov	r2, r4
   d6a0a:	68db      	ldr	r3, [r3, #12]
   d6a0c:	4631      	mov	r1, r6
   d6a0e:	4798      	blx	r3
   d6a10:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d6a12:	6803      	ldr	r3, [r0, #0]
   d6a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a16:	4798      	blx	r3
   d6a18:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6a1c:	e000      	b.n	d6a20 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6a1e:	4604      	mov	r4, r0
   d6a20:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6a24:	f7fd ff2e 	bl	d4884 <os_mutex_recursive_unlock>
   d6a28:	e004      	b.n	d6a34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6a2a:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6a2e:	e001      	b.n	d6a34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6a30:	4634      	mov	r4, r6
   d6a32:	e7a4      	b.n	d697e <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d6a34:	4620      	mov	r0, r4
   d6a36:	b00c      	add	sp, #48	; 0x30
   d6a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a3c:	fffffef2 	.word	0xfffffef2
   d6a40:	000d8450 	.word	0x000d8450

000d6a44 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d6a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a46:	4605      	mov	r5, r0
   d6a48:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6a4c:	460e      	mov	r6, r1
   d6a4e:	4617      	mov	r7, r2
   d6a50:	f7fe fd6a 	bl	d5528 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6a54:	4628      	mov	r0, r5
   d6a56:	f7ff fee1 	bl	d681c <_ZN5spark11MeshPublish13initializeUdpEv>
   d6a5a:	2800      	cmp	r0, #0
   d6a5c:	db07      	blt.n	d6a6e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d6a5e:	463a      	mov	r2, r7
   d6a60:	4631      	mov	r1, r6
   d6a62:	1d28      	adds	r0, r5, #4
   d6a64:	f7ff fde6 	bl	d6634 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d6a68:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6a6c:	e000      	b.n	d6a70 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d6a6e:	4604      	mov	r4, r0
   d6a70:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6a74:	f7fd ff06 	bl	d4884 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d6a78:	4620      	mov	r0, r4
   d6a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6a7c:	b538      	push	{r3, r4, r5, lr}
   d6a7e:	4c0e      	ldr	r4, [pc, #56]	; (d6ab8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6a80:	4b0e      	ldr	r3, [pc, #56]	; (d6abc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6a82:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a84:	2500      	movs	r5, #0
   d6a86:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6a88:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a8c:	6063      	str	r3, [r4, #4]
   d6a8e:	60a5      	str	r5, [r4, #8]
   d6a90:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a94:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a98:	f7fd fee4 	bl	d4864 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a9c:	4b08      	ldr	r3, [pc, #32]	; (d6ac0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a9e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6aa2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6aa6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	4a06      	ldr	r2, [pc, #24]	; (d6ac4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6aac:	4906      	ldr	r1, [pc, #24]	; (d6ac8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6ab2:	f001 b825 	b.w	d7b00 <__aeabi_atexit>
   d6ab6:	bf00      	nop
   d6ab8:	2003e3d4 	.word	0x2003e3d4
   d6abc:	000d863c 	.word	0x000d863c
   d6ac0:	000d85d8 	.word	0x000d85d8
   d6ac4:	2003e368 	.word	0x2003e368
   d6ac8:	000d64d5 	.word	0x000d64d5

000d6acc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6acc:	2300      	movs	r3, #0
   d6ace:	461a      	mov	r2, r3
   d6ad0:	6840      	ldr	r0, [r0, #4]
   d6ad2:	f7fe b905 	b.w	d4ce0 <network_connect>

000d6ad6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6ad6:	2200      	movs	r2, #0
   d6ad8:	2102      	movs	r1, #2
   d6ada:	6840      	ldr	r0, [r0, #4]
   d6adc:	f7fe b910 	b.w	d4d00 <network_disconnect>

000d6ae0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6ae0:	2200      	movs	r2, #0
   d6ae2:	4611      	mov	r1, r2
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7fe b903 	b.w	d4cf0 <network_connecting>

000d6aea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6aea:	2200      	movs	r2, #0
   d6aec:	4611      	mov	r1, r2
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7fe b90e 	b.w	d4d10 <network_ready>

000d6af4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6af4:	2300      	movs	r3, #0
   d6af6:	461a      	mov	r2, r3
   d6af8:	4619      	mov	r1, r3
   d6afa:	6840      	ldr	r0, [r0, #4]
   d6afc:	f7fe b910 	b.w	d4d20 <network_on>

000d6b00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b00:	2300      	movs	r3, #0
   d6b02:	461a      	mov	r2, r3
   d6b04:	4619      	mov	r1, r3
   d6b06:	6840      	ldr	r0, [r0, #4]
   d6b08:	f7fe b912 	b.w	d4d30 <network_off>

000d6b0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b0c:	2200      	movs	r2, #0
   d6b0e:	f081 0101 	eor.w	r1, r1, #1
   d6b12:	6840      	ldr	r0, [r0, #4]
   d6b14:	f7fe b914 	b.w	d4d40 <network_listen>

000d6b18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b18:	2200      	movs	r2, #0
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	f7fe b920 	b.w	d4d60 <network_set_listen_timeout>

000d6b20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b20:	2200      	movs	r2, #0
   d6b22:	4611      	mov	r1, r2
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	f7fe b923 	b.w	d4d70 <network_get_listen_timeout>

000d6b2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	4611      	mov	r1, r2
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	f7fe b90e 	b.w	d4d50 <network_listening>

000d6b34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b38:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b3a:	b095      	sub	sp, #84	; 0x54
   d6b3c:	4616      	mov	r6, r2
   d6b3e:	460d      	mov	r5, r1
   d6b40:	4607      	mov	r7, r0
    IPAddress addr;
   d6b42:	f7fe fa79 	bl	d5038 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6b46:	4621      	mov	r1, r4
   d6b48:	2220      	movs	r2, #32
   d6b4a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b4c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b4e:	f001 f986 	bl	d7e5e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b52:	2340      	movs	r3, #64	; 0x40
   d6b54:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b56:	4621      	mov	r1, r4
   d6b58:	466b      	mov	r3, sp
   d6b5a:	aa0c      	add	r2, sp, #48	; 0x30
   d6b5c:	4630      	mov	r0, r6
   d6b5e:	f7fd ff81 	bl	d4a64 <netdb_getaddrinfo>
    if (!r) {
   d6b62:	4604      	mov	r4, r0
   d6b64:	2800      	cmp	r0, #0
   d6b66:	d144      	bne.n	d6bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b68:	4602      	mov	r2, r0
   d6b6a:	2101      	movs	r1, #1
   d6b6c:	6868      	ldr	r0, [r5, #4]
   d6b6e:	f7fe f8cf 	bl	d4d10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b72:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b74:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b76:	4622      	mov	r2, r4
   d6b78:	6868      	ldr	r0, [r5, #4]
   d6b7a:	f7fe f8c9 	bl	d4d10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b7e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b80:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6b82:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b84:	2e00      	cmp	r6, #0
   d6b86:	d034      	beq.n	d6bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6b88:	2900      	cmp	r1, #0
   d6b8a:	d132      	bne.n	d6bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6b8c:	6873      	ldr	r3, [r6, #4]
   d6b8e:	2b02      	cmp	r3, #2
   d6b90:	d002      	beq.n	d6b98 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6b92:	2b0a      	cmp	r3, #10
   d6b94:	d009      	beq.n	d6baa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6b96:	e02a      	b.n	d6bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6b98:	f1b8 0f00 	cmp.w	r8, #0
   d6b9c:	d027      	beq.n	d6bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6b9e:	6971      	ldr	r1, [r6, #20]
   d6ba0:	4638      	mov	r0, r7
   d6ba2:	3104      	adds	r1, #4
   d6ba4:	f7fe fa8b 	bl	d50be <_ZN9IPAddressaSEPKh>
   d6ba8:	e020      	b.n	d6bec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6baa:	f1b9 0f00 	cmp.w	r9, #0
   d6bae:	d01e      	beq.n	d6bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6bb0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6bb2:	2211      	movs	r2, #17
   d6bb4:	a801      	add	r0, sp, #4
   d6bb6:	f001 f952 	bl	d7e5e <memset>
                    a.v = 6;
   d6bba:	2306      	movs	r3, #6
   d6bbc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bc0:	ad01      	add	r5, sp, #4
   d6bc2:	f104 0308 	add.w	r3, r4, #8
   d6bc6:	3418      	adds	r4, #24
   d6bc8:	6818      	ldr	r0, [r3, #0]
   d6bca:	6859      	ldr	r1, [r3, #4]
   d6bcc:	462a      	mov	r2, r5
   d6bce:	c203      	stmia	r2!, {r0, r1}
   d6bd0:	3308      	adds	r3, #8
   d6bd2:	42a3      	cmp	r3, r4
   d6bd4:	4615      	mov	r5, r2
   d6bd6:	d1f7      	bne.n	d6bc8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6bd8:	a901      	add	r1, sp, #4
   d6bda:	a806      	add	r0, sp, #24
   d6bdc:	ad07      	add	r5, sp, #28
   d6bde:	f7fe fa39 	bl	d5054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6be4:	1d3c      	adds	r4, r7, #4
   d6be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6be8:	682b      	ldr	r3, [r5, #0]
   d6bea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6bec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bee:	69f6      	ldr	r6, [r6, #28]
   d6bf0:	e7c8      	b.n	d6b84 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6bf2:	9800      	ldr	r0, [sp, #0]
   d6bf4:	f7fd ff2e 	bl	d4a54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6bf8:	4638      	mov	r0, r7
   d6bfa:	b015      	add	sp, #84	; 0x54
   d6bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c00:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c02:	4a03      	ldr	r2, [pc, #12]	; (d6c10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c04:	601a      	str	r2, [r3, #0]
   d6c06:	2200      	movs	r2, #0
   d6c08:	605a      	str	r2, [r3, #4]
   d6c0a:	4770      	bx	lr
   d6c0c:	2003e5a8 	.word	0x2003e5a8
   d6c10:	000d863c 	.word	0x000d863c

000d6c14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c16:	4606      	mov	r6, r0
   d6c18:	460d      	mov	r5, r1
   d6c1a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6c1c:	2400      	movs	r4, #0
  while (size--) {
   d6c1e:	42bd      	cmp	r5, r7
   d6c20:	d00c      	beq.n	d6c3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6c22:	6833      	ldr	r3, [r6, #0]
   d6c24:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6c28:	689b      	ldr	r3, [r3, #8]
   d6c2a:	4630      	mov	r0, r6
   d6c2c:	4798      	blx	r3
     if (chunk>=0)
   d6c2e:	2800      	cmp	r0, #0
   d6c30:	db01      	blt.n	d6c36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6c32:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6c34:	e7f3      	b.n	d6c1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6c36:	2c00      	cmp	r4, #0
   d6c38:	bf08      	it	eq
   d6c3a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6c3c:	4620      	mov	r0, r4
   d6c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c40 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6c40:	b570      	push	{r4, r5, r6, lr}
   d6c42:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6c44:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6c46:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6c48:	b149      	cbz	r1, d6c5e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6c4a:	f001 f995 	bl	d7f78 <strlen>
   d6c4e:	682b      	ldr	r3, [r5, #0]
   d6c50:	4602      	mov	r2, r0
   d6c52:	4621      	mov	r1, r4
   d6c54:	4628      	mov	r0, r5
   d6c56:	68db      	ldr	r3, [r3, #12]
    }
   d6c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6c5c:	4718      	bx	r3
    }
   d6c5e:	bd70      	pop	{r4, r5, r6, pc}

000d6c60 <_ZN5Print5printEPKc>:
   d6c60:	b508      	push	{r3, lr}
   d6c62:	f7ff ffed 	bl	d6c40 <_ZN5Print5writeEPKc>
   d6c66:	bd08      	pop	{r3, pc}

000d6c68 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6c68:	6803      	ldr	r3, [r0, #0]
   d6c6a:	689b      	ldr	r3, [r3, #8]
   d6c6c:	4718      	bx	r3

000d6c6e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6c6e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6c70:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6c72:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6c74:	f7ff fff8 	bl	d6c68 <_ZN5Print5printEc>
  n += print('\n');
   d6c78:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6c7a:	4604      	mov	r4, r0
  n += print('\n');
   d6c7c:	4628      	mov	r0, r5
   d6c7e:	f7ff fff3 	bl	d6c68 <_ZN5Print5printEc>
  return n;
}
   d6c82:	4420      	add	r0, r4
   d6c84:	bd38      	pop	{r3, r4, r5, pc}

000d6c86 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6c86:	b538      	push	{r3, r4, r5, lr}
   d6c88:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c8a:	f7ff ffd9 	bl	d6c40 <_ZN5Print5writeEPKc>
   d6c8e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6c90:	4628      	mov	r0, r5
   d6c92:	f7ff ffec 	bl	d6c6e <_ZN5Print7printlnEv>
  return n;
}
   d6c96:	4420      	add	r0, r4
   d6c98:	bd38      	pop	{r3, r4, r5, pc}

000d6c9a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6c9a:	b530      	push	{r4, r5, lr}
   d6c9c:	b08b      	sub	sp, #44	; 0x2c
   d6c9e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6ca0:	2100      	movs	r1, #0
   d6ca2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6ca6:	2a01      	cmp	r2, #1
   d6ca8:	bf98      	it	ls
   d6caa:	220a      	movls	r2, #10
   d6cac:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6cb0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6cb4:	fb05 3312 	mls	r3, r5, r2, r3
   d6cb8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6cbc:	2b09      	cmp	r3, #9
   d6cbe:	bf94      	ite	ls
   d6cc0:	3330      	addls	r3, #48	; 0x30
   d6cc2:	3337      	addhi	r3, #55	; 0x37
   d6cc4:	b2db      	uxtb	r3, r3
   d6cc6:	4621      	mov	r1, r4
   d6cc8:	f804 3901 	strb.w	r3, [r4], #-1
   d6ccc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6cce:	2d00      	cmp	r5, #0
   d6cd0:	d1ee      	bne.n	d6cb0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6cd2:	f7ff ffb5 	bl	d6c40 <_ZN5Print5writeEPKc>
}
   d6cd6:	b00b      	add	sp, #44	; 0x2c
   d6cd8:	bd30      	pop	{r4, r5, pc}

000d6cda <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6cda:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6cdc:	b92a      	cbnz	r2, d6cea <_ZN5Print5printEmi+0x10>
   d6cde:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6ce4:	689b      	ldr	r3, [r3, #8]
   d6ce6:	b2c9      	uxtb	r1, r1
   d6ce8:	4718      	bx	r3
  else return printNumber(n, base);
   d6cea:	b2d2      	uxtb	r2, r2
}
   d6cec:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6cf0:	f7ff bfd3 	b.w	d6c9a <_ZN5Print11printNumberEmh>

000d6cf4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6cf4:	f7ff bff1 	b.w	d6cda <_ZN5Print5printEmi>

000d6cf8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6cfc:	4607      	mov	r7, r0
   d6cfe:	460e      	mov	r6, r1
  if (base == 0) {
   d6d00:	4615      	mov	r5, r2
   d6d02:	b92a      	cbnz	r2, d6d10 <_ZN5Print5printEli+0x18>
    return write(n);
   d6d04:	6803      	ldr	r3, [r0, #0]
   d6d06:	b2c9      	uxtb	r1, r1
   d6d08:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6d0e:	4718      	bx	r3
  } else if (base == 10) {
   d6d10:	2a0a      	cmp	r2, #10
   d6d12:	d102      	bne.n	d6d1a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6d14:	2900      	cmp	r1, #0
   d6d16:	da01      	bge.n	d6d1c <_ZN5Print5printEli+0x24>
   d6d18:	e004      	b.n	d6d24 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6d1a:	b2d2      	uxtb	r2, r2
  }
}
   d6d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6d20:	f7ff bfbb 	b.w	d6c9a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6d24:	212d      	movs	r1, #45	; 0x2d
   d6d26:	f7ff ff9f 	bl	d6c68 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6d2a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6d2c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6d2e:	4271      	negs	r1, r6
   d6d30:	4638      	mov	r0, r7
   d6d32:	f7ff ffb2 	bl	d6c9a <_ZN5Print11printNumberEmh>
   d6d36:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d3c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d3c:	b40c      	push	{r2, r3}
   d6d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d42:	b087      	sub	sp, #28
   d6d44:	af00      	add	r7, sp, #0
   d6d46:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6d4a:	4605      	mov	r5, r0
   d6d4c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6d50:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d52:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6d54:	4623      	mov	r3, r4
   d6d56:	464a      	mov	r2, r9
   d6d58:	2114      	movs	r1, #20
   d6d5a:	1d38      	adds	r0, r7, #4
   d6d5c:	f7fe f828 	bl	d4db0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6d60:	2813      	cmp	r0, #19
   d6d62:	d805      	bhi.n	d6d70 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d64:	1d39      	adds	r1, r7, #4
   d6d66:	4628      	mov	r0, r5
   d6d68:	f7ff ff6a 	bl	d6c40 <_ZN5Print5writeEPKc>
   d6d6c:	4604      	mov	r4, r0
   d6d6e:	e013      	b.n	d6d98 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d70:	f100 0308 	add.w	r3, r0, #8
   d6d74:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6d78:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d7a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6d7e:	1c41      	adds	r1, r0, #1
   d6d80:	4623      	mov	r3, r4
   d6d82:	464a      	mov	r2, r9
   d6d84:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6d86:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6d88:	f7fe f812 	bl	d4db0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d8c:	4669      	mov	r1, sp
   d6d8e:	4628      	mov	r0, r5
   d6d90:	f7ff ff56 	bl	d6c40 <_ZN5Print5writeEPKc>
   d6d94:	4604      	mov	r4, r0
   d6d96:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6d98:	b11e      	cbz	r6, d6da2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6d9a:	4628      	mov	r0, r5
   d6d9c:	f7ff ff67 	bl	d6c6e <_ZN5Print7printlnEv>
   d6da0:	4404      	add	r4, r0
    return n;
}
   d6da2:	4620      	mov	r0, r4
   d6da4:	371c      	adds	r7, #28
   d6da6:	46bd      	mov	sp, r7
   d6da8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6dac:	b002      	add	sp, #8
   d6dae:	4770      	bx	lr

000d6db0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6db0:	b510      	push	{r4, lr}
  if (0 == max) {
   d6db2:	4604      	mov	r4, r0
   d6db4:	b130      	cbz	r0, d6dc4 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6db6:	f001 f883 	bl	d7ec0 <rand>
   d6dba:	fb90 f3f4 	sdiv	r3, r0, r4
   d6dbe:	fb03 0014 	mls	r0, r3, r4, r0
   d6dc2:	bd10      	pop	{r4, pc}
}
   d6dc4:	bd10      	pop	{r4, pc}

000d6dc6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6dc6:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d6dc8:	b510      	push	{r4, lr}
   d6dca:	4604      	mov	r4, r0
  if (min >= max) {
   d6dcc:	da04      	bge.n	d6dd8 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d6dce:	1a08      	subs	r0, r1, r0
   d6dd0:	f7ff ffee 	bl	d6db0 <_Z6randomi>
   d6dd4:	4420      	add	r0, r4
   d6dd6:	bd10      	pop	{r4, pc}
}
   d6dd8:	bd10      	pop	{r4, pc}

000d6dda <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6dda:	b510      	push	{r4, lr}
   d6ddc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6dde:	f7fe f83b 	bl	d4e58 <_ZNSt14_Function_baseD1Ev>
   d6de2:	4620      	mov	r0, r4
   d6de4:	bd10      	pop	{r4, pc}
	...

000d6de8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6de8:	4803      	ldr	r0, [pc, #12]	; (d6df8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6dea:	4a04      	ldr	r2, [pc, #16]	; (d6dfc <_GLOBAL__sub_I_RGB+0x14>)
   d6dec:	4904      	ldr	r1, [pc, #16]	; (d6e00 <_GLOBAL__sub_I_RGB+0x18>)
   d6dee:	2300      	movs	r3, #0
   d6df0:	6083      	str	r3, [r0, #8]
   d6df2:	f000 be85 	b.w	d7b00 <__aeabi_atexit>
   d6df6:	bf00      	nop
   d6df8:	2003e5b0 	.word	0x2003e5b0
   d6dfc:	2003e368 	.word	0x2003e368
   d6e00:	000d6ddb 	.word	0x000d6ddb

000d6e04 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6e04:	4770      	bx	lr

000d6e06 <_ZN8SPIClassD0Ev>:
   d6e06:	b510      	push	{r4, lr}
   d6e08:	2110      	movs	r1, #16
   d6e0a:	4604      	mov	r4, r0
   d6e0c:	f000 fe7d 	bl	d7b0a <_ZdlPvj>
   d6e10:	4620      	mov	r0, r4
   d6e12:	bd10      	pop	{r4, pc}

000d6e14 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6e14:	b570      	push	{r4, r5, r6, lr}
   d6e16:	4b08      	ldr	r3, [pc, #32]	; (d6e38 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6e18:	6003      	str	r3, [r0, #0]
   d6e1a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6e1c:	2500      	movs	r5, #0
   d6e1e:	460e      	mov	r6, r1
   d6e20:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6e24:	f7fd fd16 	bl	d4854 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6e28:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6e2a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6e2c:	f7fd fe52 	bl	d4ad4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6e30:	60a5      	str	r5, [r4, #8]
}
   d6e32:	4620      	mov	r0, r4
   d6e34:	bd70      	pop	{r4, r5, r6, pc}
   d6e36:	bf00      	nop
   d6e38:	000d8670 	.word	0x000d8670

000d6e3c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6e3c:	7900      	ldrb	r0, [r0, #4]
   d6e3e:	f7fd be51 	b.w	d4ae4 <HAL_SPI_Is_Enabled>

000d6e42 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6e42:	2300      	movs	r3, #0
   d6e44:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6e46:	6043      	str	r3, [r0, #4]
	len = 0;
   d6e48:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6e4a:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6e4c:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6e4e:	680c      	ldr	r4, [r1, #0]
   d6e50:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6e52:	684c      	ldr	r4, [r1, #4]
   d6e54:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6e56:	688c      	ldr	r4, [r1, #8]
   d6e58:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6e5a:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6e5c:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6e5e:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6e60:	bd10      	pop	{r4, pc}

000d6e62 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e62:	b510      	push	{r4, lr}
   d6e64:	4604      	mov	r4, r0
{
	free(buffer);
   d6e66:	6800      	ldr	r0, [r0, #0]
   d6e68:	f7fd ff92 	bl	d4d90 <free>
}
   d6e6c:	4620      	mov	r0, r4
   d6e6e:	bd10      	pop	{r4, pc}

000d6e70 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6e70:	b510      	push	{r4, lr}
   d6e72:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6e74:	6800      	ldr	r0, [r0, #0]
   d6e76:	b108      	cbz	r0, d6e7c <_ZN6String10invalidateEv+0xc>
   d6e78:	f7fd ff8a 	bl	d4d90 <free>
	buffer = NULL;
   d6e7c:	2300      	movs	r3, #0
   d6e7e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6e80:	60a3      	str	r3, [r4, #8]
   d6e82:	6063      	str	r3, [r4, #4]
   d6e84:	bd10      	pop	{r4, pc}

000d6e86 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6e86:	b538      	push	{r3, r4, r5, lr}
   d6e88:	4604      	mov	r4, r0
   d6e8a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6e8c:	6800      	ldr	r0, [r0, #0]
   d6e8e:	3101      	adds	r1, #1
   d6e90:	f7fd ff86 	bl	d4da0 <realloc>
	if (newbuffer) {
   d6e94:	b110      	cbz	r0, d6e9c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6e96:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6e9a:	2001      	movs	r0, #1
	}
	return 0;
}
   d6e9c:	bd38      	pop	{r3, r4, r5, pc}

000d6e9e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e9e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6ea0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6ea2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6ea4:	b113      	cbz	r3, d6eac <_ZN6String7reserveEj+0xe>
   d6ea6:	6843      	ldr	r3, [r0, #4]
   d6ea8:	428b      	cmp	r3, r1
   d6eaa:	d207      	bcs.n	d6ebc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6eac:	4620      	mov	r0, r4
   d6eae:	f7ff ffea 	bl	d6e86 <_ZN6String12changeBufferEj>
   d6eb2:	b120      	cbz	r0, d6ebe <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6eb4:	68a3      	ldr	r3, [r4, #8]
   d6eb6:	b90b      	cbnz	r3, d6ebc <_ZN6String7reserveEj+0x1e>
   d6eb8:	6822      	ldr	r2, [r4, #0]
   d6eba:	7013      	strb	r3, [r2, #0]
   d6ebc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6ebe:	bd10      	pop	{r4, pc}

000d6ec0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6ec0:	b570      	push	{r4, r5, r6, lr}
   d6ec2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6ec4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6ec6:	4604      	mov	r4, r0
   d6ec8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6eca:	f7ff ffe8 	bl	d6e9e <_ZN6String7reserveEj>
   d6ece:	b918      	cbnz	r0, d6ed8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	f7ff ffcd 	bl	d6e70 <_ZN6String10invalidateEv>
		return *this;
   d6ed6:	e009      	b.n	d6eec <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6ed8:	462a      	mov	r2, r5
   d6eda:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6edc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6ede:	6820      	ldr	r0, [r4, #0]
   d6ee0:	f000 ff97 	bl	d7e12 <memcpy>
	buffer[len] = 0;
   d6ee4:	6822      	ldr	r2, [r4, #0]
   d6ee6:	68a3      	ldr	r3, [r4, #8]
   d6ee8:	2100      	movs	r1, #0
   d6eea:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6eec:	4620      	mov	r0, r4
   d6eee:	bd70      	pop	{r4, r5, r6, pc}

000d6ef0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ef0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ef2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ef4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ef6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ef8:	6043      	str	r3, [r0, #4]
	len = 0;
   d6efa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6efc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6efe:	460d      	mov	r5, r1
   d6f00:	b139      	cbz	r1, d6f12 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6f02:	4608      	mov	r0, r1
   d6f04:	f001 f838 	bl	d7f78 <strlen>
   d6f08:	4629      	mov	r1, r5
   d6f0a:	4602      	mov	r2, r0
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	f7ff ffd7 	bl	d6ec0 <_ZN6String4copyEPKcj>
}
   d6f12:	4620      	mov	r0, r4
   d6f14:	bd38      	pop	{r3, r4, r5, pc}

000d6f16 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f16:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6f18:	b510      	push	{r4, lr}
   d6f1a:	460b      	mov	r3, r1
   d6f1c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f1e:	d007      	beq.n	d6f30 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f20:	6809      	ldr	r1, [r1, #0]
   d6f22:	b119      	cbz	r1, d6f2c <_ZN6StringaSERKS_+0x16>
   d6f24:	689a      	ldr	r2, [r3, #8]
   d6f26:	f7ff ffcb 	bl	d6ec0 <_ZN6String4copyEPKcj>
   d6f2a:	e001      	b.n	d6f30 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6f2c:	f7ff ffa0 	bl	d6e70 <_ZN6String10invalidateEv>

	return *this;
}
   d6f30:	4620      	mov	r0, r4
   d6f32:	bd10      	pop	{r4, pc}

000d6f34 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f34:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f36:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f38:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f3a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f3c:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f3e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f40:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f42:	f7ff ffe8 	bl	d6f16 <_ZN6StringaSERKS_>
}
   d6f46:	4620      	mov	r0, r4
   d6f48:	bd10      	pop	{r4, pc}

000d6f4a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f4a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f4c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f4e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f50:	b912      	cbnz	r2, d6f58 <_ZNK6String6equalsEPKc+0xe>
   d6f52:	b919      	cbnz	r1, d6f5c <_ZNK6String6equalsEPKc+0x12>
   d6f54:	2001      	movs	r0, #1
   d6f56:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6f58:	b911      	cbnz	r1, d6f60 <_ZNK6String6equalsEPKc+0x16>
   d6f5a:	6803      	ldr	r3, [r0, #0]
   d6f5c:	7818      	ldrb	r0, [r3, #0]
   d6f5e:	e002      	b.n	d6f66 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6f60:	6800      	ldr	r0, [r0, #0]
   d6f62:	f000 ffff 	bl	d7f64 <strcmp>
   d6f66:	fab0 f080 	clz	r0, r0
   d6f6a:	0940      	lsrs	r0, r0, #5
}
   d6f6c:	bd08      	pop	{r3, pc}
	...

000d6f70 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6f70:	4b04      	ldr	r3, [pc, #16]	; (d6f84 <_GLOBAL__sub_I_System+0x14>)
   d6f72:	2000      	movs	r0, #0
   d6f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f78:	7018      	strb	r0, [r3, #0]
   d6f7a:	8058      	strh	r0, [r3, #2]
   d6f7c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6f7e:	f7fd be69 	b.w	d4c54 <set_system_mode>
   d6f82:	bf00      	nop
   d6f84:	2003e5c0 	.word	0x2003e5c0

000d6f88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6f88:	4b02      	ldr	r3, [pc, #8]	; (d6f94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6f8a:	681a      	ldr	r2, [r3, #0]
   d6f8c:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6f8e:	601a      	str	r2, [r3, #0]
   d6f90:	4770      	bx	lr
   d6f92:	bf00      	nop
   d6f94:	2003e2fc 	.word	0x2003e2fc
   d6f98:	2003e5c8 	.word	0x2003e5c8

000d6f9c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6f9c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6f9e:	6804      	ldr	r4, [r0, #0]
   d6fa0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6fa2:	46a4      	mov	ip, r4
    }
   d6fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6fa8:	4760      	bx	ip

000d6faa <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6faa:	6803      	ldr	r3, [r0, #0]
   d6fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6fae:	4718      	bx	r3

000d6fb0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6fb0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6fb2:	4770      	bx	lr

000d6fb4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6fb4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6fb6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6fb8:	1a10      	subs	r0, r2, r0
   d6fba:	4770      	bx	lr

000d6fbc <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6fbc:	b513      	push	{r0, r1, r4, lr}
   d6fbe:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6fc0:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6fc2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d6fc6:	68d4      	ldr	r4, [r2, #12]
   d6fc8:	4619      	mov	r1, r3
   d6fca:	2201      	movs	r2, #1
   d6fcc:	47a0      	blx	r4
}
   d6fce:	b002      	add	sp, #8
   d6fd0:	bd10      	pop	{r4, pc}

000d6fd2 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6fd2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6fd4:	6803      	ldr	r3, [r0, #0]
   d6fd6:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6fd8:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6fda:	4798      	blx	r3
   d6fdc:	b128      	cbz	r0, d6fea <_ZN3UDP4readEv+0x18>
   d6fde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6fe0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6fe2:	1c59      	adds	r1, r3, #1
   d6fe4:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6fe6:	5cd0      	ldrb	r0, [r2, r3]
   d6fe8:	bd10      	pop	{r4, pc}
   d6fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6fee:	bd10      	pop	{r4, pc}

000d6ff0 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6ff0:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6ff2:	6803      	ldr	r3, [r0, #0]
   d6ff4:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6ff6:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6ff8:	4798      	blx	r3
   d6ffa:	b118      	cbz	r0, d7004 <_ZN3UDP4peekEv+0x14>
   d6ffc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6ffe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7000:	5cd0      	ldrb	r0, [r2, r3]
   d7002:	bd10      	pop	{r4, pc}
   d7004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7008:	bd10      	pop	{r4, pc}

000d700a <_ZN3UDP5flushEv>:

void UDP::flush() {
   d700a:	4770      	bx	lr

000d700c <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d700c:	b410      	push	{r4}
   d700e:	4603      	mov	r3, r0
   d7010:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7012:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d7014:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d7016:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d7018:	6803      	ldr	r3, [r0, #0]
   d701a:	1a52      	subs	r2, r2, r1
   d701c:	68db      	ldr	r3, [r3, #12]
   d701e:	4421      	add	r1, r4
}
   d7020:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7024:	4718      	bx	r3

000d7026 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d7026:	f1a0 0010 	sub.w	r0, r0, #16
   d702a:	f7ff bfef 	b.w	d700c <_ZNK3UDP7printToER5Print>

000d702e <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d702e:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d7030:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7032:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7034:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d7036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7038:	4604      	mov	r4, r0
   d703a:	460f      	mov	r7, r1
   d703c:	4615      	mov	r5, r2
    stop();
   d703e:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d7040:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7042:	4632      	mov	r2, r6
   d7044:	2100      	movs	r1, #0
   d7046:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d7048:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d704a:	f000 ff08 	bl	d7e5e <memset>
    saddr.sin6_len = sizeof(saddr);
   d704e:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7052:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d7054:	260a      	movs	r6, #10
   d7056:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d705a:	f7fd fcf3 	bl	d4a44 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d705e:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7060:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7064:	2102      	movs	r1, #2
   d7066:	4630      	mov	r0, r6
   d7068:	f7fd fd2c 	bl	d4ac4 <sock_socket>

    if (_sock < 0) {
   d706c:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d706e:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7070:	db24      	blt.n	d70bc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7072:	2204      	movs	r2, #4
   d7074:	9200      	str	r2, [sp, #0]
   d7076:	ab02      	add	r3, sp, #8
   d7078:	f640 71ff 	movw	r1, #4095	; 0xfff
   d707c:	f7fd fd02 	bl	d4a84 <sock_setsockopt>
   d7080:	b9e0      	cbnz	r0, d70bc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7082:	b195      	cbz	r5, d70aa <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7084:	9003      	str	r0, [sp, #12]
   d7086:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d708a:	a903      	add	r1, sp, #12
   d708c:	b2e8      	uxtb	r0, r5
   d708e:	f7fd fc99 	bl	d49c4 <if_index_to_name>
   d7092:	b998      	cbnz	r0, d70bc <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7094:	2306      	movs	r3, #6
   d7096:	9300      	str	r3, [sp, #0]
   d7098:	f241 020b 	movw	r2, #4107	; 0x100b
   d709c:	ab03      	add	r3, sp, #12
   d709e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d70a2:	6960      	ldr	r0, [r4, #20]
   d70a4:	f7fd fcee 	bl	d4a84 <sock_setsockopt>
   d70a8:	b940      	cbnz	r0, d70bc <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d70aa:	221c      	movs	r2, #28
   d70ac:	a905      	add	r1, sp, #20
   d70ae:	6960      	ldr	r0, [r4, #20]
   d70b0:	f7fd fce0 	bl	d4a74 <sock_bind>
   d70b4:	b910      	cbnz	r0, d70bc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d70b6:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d70b8:	2001      	movs	r0, #1
   d70ba:	e004      	b.n	d70c6 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d70bc:	6823      	ldr	r3, [r4, #0]
   d70be:	4620      	mov	r0, r4
   d70c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d70c2:	4798      	blx	r3
   d70c4:	2000      	movs	r0, #0
    }
    return bound;
}
   d70c6:	b00d      	add	sp, #52	; 0x34
   d70c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70ca <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d70ca:	b510      	push	{r4, lr}
   d70cc:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d70ce:	6940      	ldr	r0, [r0, #20]
   d70d0:	2800      	cmp	r0, #0
   d70d2:	db01      	blt.n	d70d8 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d70d4:	f7fd fcde 	bl	d4a94 <sock_close>
    }

    _sock = -1;
   d70d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d70dc:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d70de:	2300      	movs	r3, #0
   d70e0:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d70e2:	8723      	strh	r3, [r4, #56]	; 0x38
   d70e4:	bd10      	pop	{r4, pc}

000d70e6 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d70e6:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d70e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d70ea:	4605      	mov	r5, r0
   d70ec:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d70ee:	b113      	cbz	r3, d70f6 <_ZN3UDP5writeEPKhj+0x10>
   d70f0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d70f2:	1a24      	subs	r4, r4, r0
   d70f4:	e000      	b.n	d70f8 <_ZN3UDP5writeEPKhj+0x12>
   d70f6:	461c      	mov	r4, r3
   d70f8:	4294      	cmp	r4, r2
   d70fa:	bf28      	it	cs
   d70fc:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d70fe:	4622      	mov	r2, r4
   d7100:	4418      	add	r0, r3
   d7102:	f000 fe86 	bl	d7e12 <memcpy>
    _offset += size;
   d7106:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d7108:	4423      	add	r3, r4
   d710a:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d710c:	4620      	mov	r0, r4
   d710e:	bd38      	pop	{r3, r4, r5, pc}

000d7110 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7110:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d7112:	6803      	ldr	r3, [r0, #0]
   d7114:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7116:	4604      	mov	r4, r0
   d7118:	460e      	mov	r6, r1
   d711a:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d711c:	4798      	blx	r3
   d711e:	b188      	cbz	r0, d7144 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d7120:	6823      	ldr	r3, [r4, #0]
   d7122:	4620      	mov	r0, r4
   d7124:	691b      	ldr	r3, [r3, #16]
   d7126:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d7128:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d712a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d712c:	4285      	cmp	r5, r0
   d712e:	bfa8      	it	ge
   d7130:	4605      	movge	r5, r0
   d7132:	4419      	add	r1, r3
   d7134:	462a      	mov	r2, r5
   d7136:	4630      	mov	r0, r6
   d7138:	f000 fe6b 	bl	d7e12 <memcpy>
        _offset += read;
   d713c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d713e:	442b      	add	r3, r5
   d7140:	86e3      	strh	r3, [r4, #54]	; 0x36
   d7142:	e001      	b.n	d7148 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d7144:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d7148:	4628      	mov	r0, r5
   d714a:	bd70      	pop	{r4, r5, r6, pc}

000d714c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d714c:	b570      	push	{r4, r5, r6, lr}
   d714e:	4604      	mov	r4, r0
   d7150:	4b05      	ldr	r3, [pc, #20]	; (d7168 <_ZN3UDP8remoteIPEv+0x1c>)
   d7152:	f844 3b04 	str.w	r3, [r4], #4
   d7156:	f101 0520 	add.w	r5, r1, #32
   d715a:	4606      	mov	r6, r0
   d715c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d715e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7160:	682b      	ldr	r3, [r5, #0]
   d7162:	7023      	strb	r3, [r4, #0]
   d7164:	4630      	mov	r0, r6
   d7166:	bd70      	pop	{r4, r5, r6, pc}
   d7168:	000d8450 	.word	0x000d8450

000d716c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d716c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d716e:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7170:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7172:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7174:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d7176:	4a0a      	ldr	r2, [pc, #40]	; (d71a0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d7178:	9202      	str	r2, [sp, #8]
   d717a:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d717c:	468e      	mov	lr, r1
   d717e:	4606      	mov	r6, r0
   d7180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7182:	ac03      	add	r4, sp, #12
   d7184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7186:	682b      	ldr	r3, [r5, #0]
   d7188:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d718a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d718e:	9300      	str	r3, [sp, #0]
   d7190:	4662      	mov	r2, ip
   d7192:	ab02      	add	r3, sp, #8
   d7194:	4671      	mov	r1, lr
   d7196:	4630      	mov	r0, r6
   d7198:	47b8      	blx	r7
    }
   d719a:	b009      	add	sp, #36	; 0x24
   d719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d719e:	bf00      	nop
   d71a0:	000d8450 	.word	0x000d8450

000d71a4 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d71a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d71a6:	6803      	ldr	r3, [r0, #0]
   d71a8:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d71ac:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d71ae:	4b0d      	ldr	r3, [pc, #52]	; (d71e4 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d71b0:	b089      	sub	sp, #36	; 0x24
   d71b2:	f100 0620 	add.w	r6, r0, #32
   d71b6:	4604      	mov	r4, r0
   d71b8:	9302      	str	r3, [sp, #8]
   d71ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d71bc:	ad03      	add	r5, sp, #12
   d71be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d71c0:	6833      	ldr	r3, [r6, #0]
   d71c2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d71c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d71c6:	9300      	str	r3, [sp, #0]
   d71c8:	4672      	mov	r2, lr
   d71ca:	ab02      	add	r3, sp, #8
   d71cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d71ce:	4620      	mov	r0, r4
   d71d0:	47b8      	blx	r7
    flush(); // wait for send to complete
   d71d2:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d71d4:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d71d6:	69db      	ldr	r3, [r3, #28]
   d71d8:	4620      	mov	r0, r4
   d71da:	4798      	blx	r3
    return result;
}
   d71dc:	4628      	mov	r0, r5
   d71de:	b009      	add	sp, #36	; 0x24
   d71e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71e2:	bf00      	nop
   d71e4:	000d8450 	.word	0x000d8450

000d71e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d71e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d71ea:	7843      	ldrb	r3, [r0, #1]
   d71ec:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d71ee:	b08d      	sub	sp, #52	; 0x34
   d71f0:	4605      	mov	r5, r0
   d71f2:	460c      	mov	r4, r1
   d71f4:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d71f6:	d101      	bne.n	d71fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d71f8:	1d01      	adds	r1, r0, #4
   d71fa:	e033      	b.n	d7264 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d71fc:	2b0a      	cmp	r3, #10
   d71fe:	d135      	bne.n	d726c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7200:	2211      	movs	r2, #17
   d7202:	2100      	movs	r1, #0
   d7204:	a801      	add	r0, sp, #4
   d7206:	f000 fe2a 	bl	d7e5e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d720a:	68ab      	ldr	r3, [r5, #8]
   d720c:	b943      	cbnz	r3, d7220 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d720e:	68eb      	ldr	r3, [r5, #12]
   d7210:	b933      	cbnz	r3, d7220 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d7212:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7216:	692e      	ldr	r6, [r5, #16]
   d7218:	f7fd fc04 	bl	d4a24 <inet_htonl>
   d721c:	4286      	cmp	r6, r0
   d721e:	d01f      	beq.n	d7260 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7220:	f105 0308 	add.w	r3, r5, #8
   d7224:	ae01      	add	r6, sp, #4
   d7226:	f105 0e18 	add.w	lr, r5, #24
   d722a:	6818      	ldr	r0, [r3, #0]
   d722c:	6859      	ldr	r1, [r3, #4]
   d722e:	4632      	mov	r2, r6
   d7230:	c203      	stmia	r2!, {r0, r1}
   d7232:	3308      	adds	r3, #8
   d7234:	4573      	cmp	r3, lr
   d7236:	4616      	mov	r6, r2
   d7238:	d1f7      	bne.n	d722a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d723a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d723c:	a901      	add	r1, sp, #4
   d723e:	a806      	add	r0, sp, #24
   d7240:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7242:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7246:	f7fd ff05 	bl	d5054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d724a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d724c:	3404      	adds	r4, #4
   d724e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7250:	6833      	ldr	r3, [r6, #0]
   d7252:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d7254:	b157      	cbz	r7, d726c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d7256:	8868      	ldrh	r0, [r5, #2]
   d7258:	f7fd fbec 	bl	d4a34 <inet_ntohs>
   d725c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d725e:	e005      	b.n	d726c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7260:	f105 0114 	add.w	r1, r5, #20
   d7264:	4620      	mov	r0, r4
   d7266:	f7fd ff2a 	bl	d50be <_ZN9IPAddressaSEPKh>
   d726a:	e7f3      	b.n	d7254 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d726c:	b00d      	add	sp, #52	; 0x34
   d726e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7270 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d7270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7274:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d7276:	ab0e      	add	r3, sp, #56	; 0x38
   d7278:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d727a:	4606      	mov	r6, r0
   d727c:	4617      	mov	r7, r2
   d727e:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d7280:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7284:	462a      	mov	r2, r5
   d7286:	4629      	mov	r1, r5
   d7288:	f7fd fbec 	bl	d4a64 <netdb_getaddrinfo>
   d728c:	2800      	cmp	r0, #0
   d728e:	db1f      	blt.n	d72d0 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7290:	9b01      	ldr	r3, [sp, #4]
   d7292:	b1fb      	cbz	r3, d72d4 <_ZN3UDP11beginPacketEPKct+0x64>
   d7294:	695b      	ldr	r3, [r3, #20]
   d7296:	b1eb      	cbz	r3, d72d4 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d7298:	a802      	add	r0, sp, #8
   d729a:	f7fd fecd 	bl	d5038 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d729e:	9b01      	ldr	r3, [sp, #4]
   d72a0:	462a      	mov	r2, r5
   d72a2:	6958      	ldr	r0, [r3, #20]
   d72a4:	a902      	add	r1, sp, #8
   d72a6:	f7ff ff9f 	bl	d71e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d72aa:	a802      	add	r0, sp, #8
   d72ac:	f7fd fee4 	bl	d5078 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d72b0:	b180      	cbz	r0, d72d4 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d72b2:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d72b4:	ad03      	add	r5, sp, #12
   d72b6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d72ba:	4b0b      	ldr	r3, [pc, #44]	; (d72e8 <_ZN3UDP11beginPacketEPKct+0x78>)
   d72bc:	9308      	str	r3, [sp, #32]
   d72be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72c0:	ac09      	add	r4, sp, #36	; 0x24
   d72c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72c4:	682b      	ldr	r3, [r5, #0]
   d72c6:	7023      	strb	r3, [r4, #0]
   d72c8:	463a      	mov	r2, r7
   d72ca:	a908      	add	r1, sp, #32
   d72cc:	4630      	mov	r0, r6
   d72ce:	47c0      	blx	r8
   d72d0:	4604      	mov	r4, r0
   d72d2:	e001      	b.n	d72d8 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d72d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d72d8:	9801      	ldr	r0, [sp, #4]
   d72da:	f7fd fbbb 	bl	d4a54 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d72de:	4620      	mov	r0, r4
   d72e0:	b00e      	add	sp, #56	; 0x38
   d72e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72e6:	bf00      	nop
   d72e8:	000d8450 	.word	0x000d8450

000d72ec <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d72ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d72f0:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d72f4:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d72f8:	b08c      	sub	sp, #48	; 0x30
   d72fa:	4605      	mov	r5, r0
   d72fc:	460c      	mov	r4, r1
   d72fe:	4617      	mov	r7, r2
   d7300:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d7302:	db00      	blt.n	d7306 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d7304:	b911      	cbnz	r1, d730c <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d7306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d730a:	e035      	b.n	d7378 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d730c:	f04f 0a1c 	mov.w	sl, #28
   d7310:	ae05      	add	r6, sp, #20
   d7312:	4652      	mov	r2, sl
   d7314:	2100      	movs	r1, #0
   d7316:	4630      	mov	r0, r6
   d7318:	f000 fda1 	bl	d7e5e <memset>
        socklen_t slen = sizeof(saddr);
   d731c:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d7320:	f1b9 0f00 	cmp.w	r9, #0
   d7324:	d014      	beq.n	d7350 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d7326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d732a:	fbb9 f1f2 	udiv	r1, r9, r2
   d732e:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d7330:	fb02 9111 	mls	r1, r2, r1, r9
   d7334:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d7336:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d7338:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d733a:	9300      	str	r3, [sp, #0]
   d733c:	f241 0206 	movw	r2, #4102	; 0x1006
   d7340:	ab03      	add	r3, sp, #12
   d7342:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7346:	4640      	mov	r0, r8
   d7348:	f7fd fb9c 	bl	d4a84 <sock_setsockopt>
            if (ret) {
   d734c:	b108      	cbz	r0, d7352 <_ZN3UDP13receivePacketEPhjm+0x66>
   d734e:	e013      	b.n	d7378 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d7350:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d7352:	ab02      	add	r3, sp, #8
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	4621      	mov	r1, r4
   d7358:	4603      	mov	r3, r0
   d735a:	9600      	str	r6, [sp, #0]
   d735c:	463a      	mov	r2, r7
   d735e:	6968      	ldr	r0, [r5, #20]
   d7360:	f7fd fba0 	bl	d4aa4 <sock_recvfrom>
        if (ret >= 0) {
   d7364:	1e04      	subs	r4, r0, #0
   d7366:	db06      	blt.n	d7376 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d7368:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d736c:	f105 011c 	add.w	r1, r5, #28
   d7370:	4630      	mov	r0, r6
   d7372:	f7ff ff39 	bl	d71e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d7376:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d7378:	b00c      	add	sp, #48	; 0x30
   d737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d737e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d737e:	b538      	push	{r3, r4, r5, lr}
   d7380:	4605      	mov	r5, r0
   d7382:	4614      	mov	r4, r2
   d7384:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d7386:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d7388:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d738a:	d111      	bne.n	d73b0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d738c:	231c      	movs	r3, #28
   d738e:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d7390:	230a      	movs	r3, #10
   d7392:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d7394:	f7fd fb56 	bl	d4a44 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d7398:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d739a:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d739e:	1d2b      	adds	r3, r5, #4
   d73a0:	3514      	adds	r5, #20
   d73a2:	f853 2b04 	ldr.w	r2, [r3], #4
   d73a6:	f844 2b04 	str.w	r2, [r4], #4
   d73aa:	42ab      	cmp	r3, r5
   d73ac:	d1f9      	bne.n	d73a2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d73ae:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d73b0:	2b04      	cmp	r3, #4
   d73b2:	d10a      	bne.n	d73ca <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d73b4:	2310      	movs	r3, #16
   d73b6:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d73b8:	2302      	movs	r3, #2
   d73ba:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d73bc:	f7fd fb42 	bl	d4a44 <inet_htons>
   d73c0:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d73c2:	6868      	ldr	r0, [r5, #4]
   d73c4:	f7fd fb2e 	bl	d4a24 <inet_htonl>
   d73c8:	6060      	str	r0, [r4, #4]
   d73ca:	bd38      	pop	{r3, r4, r5, pc}

000d73cc <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d73cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d73d0:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d73d2:	ac03      	add	r4, sp, #12
   d73d4:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d73d6:	4699      	mov	r9, r3
   d73d8:	4606      	mov	r6, r0
   d73da:	460f      	mov	r7, r1
   d73dc:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d73de:	2100      	movs	r1, #0
   d73e0:	462a      	mov	r2, r5
   d73e2:	4620      	mov	r0, r4
   d73e4:	f000 fd3b 	bl	d7e5e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d73e8:	4622      	mov	r2, r4
   d73ea:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d73ee:	4648      	mov	r0, r9
   d73f0:	f7ff ffc5 	bl	d737e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d73f4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d73f8:	b143      	cbz	r3, d740c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d73fa:	e88d 0030 	stmia.w	sp, {r4, r5}
   d73fe:	2300      	movs	r3, #0
   d7400:	4642      	mov	r2, r8
   d7402:	4639      	mov	r1, r7
   d7404:	6970      	ldr	r0, [r6, #20]
   d7406:	f7fd fb55 	bl	d4ab4 <sock_sendto>
   d740a:	e001      	b.n	d7410 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d740c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d7410:	b00b      	add	sp, #44	; 0x2c
   d7412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7416 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7416:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7418:	b091      	sub	sp, #68	; 0x44
   d741a:	460c      	mov	r4, r1
   d741c:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d741e:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7420:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d7422:	a809      	add	r0, sp, #36	; 0x24
   d7424:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7426:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d7428:	f000 fd19 	bl	d7e5e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d742c:	aa09      	add	r2, sp, #36	; 0x24
   d742e:	2100      	movs	r1, #0
   d7430:	4620      	mov	r0, r4
   d7432:	f7ff ffa4 	bl	d737e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d7436:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d743a:	2b02      	cmp	r3, #2
   d743c:	d12e      	bne.n	d749c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d743e:	2300      	movs	r3, #0
   d7440:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d7442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7444:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d7446:	b1dd      	cbz	r5, d7480 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d7448:	a902      	add	r1, sp, #8
   d744a:	4628      	mov	r0, r5
   d744c:	f7fd fac2 	bl	d49d4 <if_get_by_index>
   d7450:	b9b0      	cbnz	r0, d7480 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d7452:	a910      	add	r1, sp, #64	; 0x40
   d7454:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d7458:	9802      	ldr	r0, [sp, #8]
   d745a:	f7fd fac3 	bl	d49e4 <if_get_addrs>
   d745e:	b960      	cbnz	r0, d747a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d7460:	9b03      	ldr	r3, [sp, #12]
   d7462:	b153      	cbz	r3, d747a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d7464:	68da      	ldr	r2, [r3, #12]
   d7466:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d7468:	7851      	ldrb	r1, [r2, #1]
   d746a:	2902      	cmp	r1, #2
   d746c:	d103      	bne.n	d7476 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d746e:	6852      	ldr	r2, [r2, #4]
   d7470:	b10a      	cbz	r2, d7476 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d7472:	9205      	str	r2, [sp, #20]
   d7474:	e001      	b.n	d747a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d7476:	681b      	ldr	r3, [r3, #0]
   d7478:	e7f3      	b.n	d7462 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d747a:	9803      	ldr	r0, [sp, #12]
   d747c:	f7fd faba 	bl	d49f4 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d7480:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d7482:	f04f 0308 	mov.w	r3, #8
   d7486:	9300      	str	r3, [sp, #0]
   d7488:	bf18      	it	ne
   d748a:	2203      	movne	r2, #3
   d748c:	ab04      	add	r3, sp, #16
   d748e:	bf08      	it	eq
   d7490:	2204      	moveq	r2, #4
   d7492:	2100      	movs	r1, #0
   d7494:	4630      	mov	r0, r6
   d7496:	f7fd faf5 	bl	d4a84 <sock_setsockopt>
   d749a:	e01e      	b.n	d74da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d749c:	2b0a      	cmp	r3, #10
   d749e:	d11a      	bne.n	d74d6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d74a0:	ac04      	add	r4, sp, #16
   d74a2:	2214      	movs	r2, #20
   d74a4:	2100      	movs	r1, #0
   d74a6:	4620      	mov	r0, r4
   d74a8:	f000 fcd9 	bl	d7e5e <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d74ac:	ab0b      	add	r3, sp, #44	; 0x2c
   d74ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d74b0:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d74b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d74b6:	f04f 0314 	mov.w	r3, #20
   d74ba:	9300      	str	r3, [sp, #0]
   d74bc:	bf18      	it	ne
   d74be:	220c      	movne	r2, #12
   d74c0:	4623      	mov	r3, r4
   d74c2:	bf08      	it	eq
   d74c4:	220d      	moveq	r2, #13
   d74c6:	2129      	movs	r1, #41	; 0x29
   d74c8:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d74ca:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d74cc:	f7fd fada 	bl	d4a84 <sock_setsockopt>
   d74d0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d74d4:	e001      	b.n	d74da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d74d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d74da:	b011      	add	sp, #68	; 0x44
   d74dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d74e0 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d74e0:	b538      	push	{r3, r4, r5, lr}
   d74e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d74e6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d74e8:	4b0b      	ldr	r3, [pc, #44]	; (d7518 <_ZN3UDPC1Ev+0x38>)
   d74ea:	f103 0208 	add.w	r2, r3, #8
   d74ee:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d74f0:	2500      	movs	r5, #0
   d74f2:	6103      	str	r3, [r0, #16]
   d74f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d74f8:	4604      	mov	r4, r0
   d74fa:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d74fc:	6002      	str	r2, [r0, #0]
   d74fe:	6143      	str	r3, [r0, #20]
   d7500:	301c      	adds	r0, #28
   d7502:	f7fd fd99 	bl	d5038 <_ZN9IPAddressC1Ev>
   d7506:	f44f 7300 	mov.w	r3, #512	; 0x200
   d750a:	86e5      	strh	r5, [r4, #54]	; 0x36
   d750c:	8725      	strh	r5, [r4, #56]	; 0x38
   d750e:	63e5      	str	r5, [r4, #60]	; 0x3c
   d7510:	6423      	str	r3, [r4, #64]	; 0x40
   d7512:	6465      	str	r5, [r4, #68]	; 0x44
}
   d7514:	4620      	mov	r0, r4
   d7516:	bd38      	pop	{r3, r4, r5, pc}
   d7518:	000d86a4 	.word	0x000d86a4

000d751c <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d751c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d751e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d7522:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d7524:	b123      	cbz	r3, d7530 <_ZN3UDP13releaseBufferEv+0x14>
   d7526:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d7528:	b110      	cbz	r0, d7530 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d752a:	2101      	movs	r1, #1
   d752c:	f000 faed 	bl	d7b0a <_ZdlPvj>
    }
    _buffer = NULL;
   d7530:	2300      	movs	r3, #0
   d7532:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d7534:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d7538:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d753a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d753c:	8723      	strh	r3, [r4, #56]	; 0x38
   d753e:	bd10      	pop	{r4, pc}

000d7540 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d7540:	b570      	push	{r4, r5, r6, lr}
   d7542:	4604      	mov	r4, r0
   d7544:	4616      	mov	r6, r2
   d7546:	460d      	mov	r5, r1
    releaseBuffer();
   d7548:	f7ff ffe8 	bl	d751c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d754c:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d754e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d7550:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d7552:	b93e      	cbnz	r6, d7564 <_ZN3UDP9setBufferEjPh+0x24>
   d7554:	b135      	cbz	r5, d7564 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d7556:	4628      	mov	r0, r5
   d7558:	f7fc fd9f 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d755c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d755e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d7560:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d7564:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7566:	b103      	cbz	r3, d756a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d7568:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d756a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d756c:	3000      	adds	r0, #0
   d756e:	bf18      	it	ne
   d7570:	2001      	movne	r0, #1
   d7572:	bd70      	pop	{r4, r5, r6, pc}

000d7574 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7576:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d7578:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d757a:	4605      	mov	r5, r0
   d757c:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d757e:	b91a      	cbnz	r2, d7588 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d7580:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7582:	b109      	cbz	r1, d7588 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d7584:	f7ff ffdc 	bl	d7540 <_ZN3UDP9setBufferEjPh>
   d7588:	3404      	adds	r4, #4
   d758a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d758c:	f105 0620 	add.w	r6, r5, #32
   d7590:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7592:	6823      	ldr	r3, [r4, #0]
   d7594:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7596:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d7598:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d759a:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d759c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d759e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d75a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75a2 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d75a2:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d75a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d75a6:	4604      	mov	r4, r0
   d75a8:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d75aa:	b91a      	cbnz	r2, d75b4 <_ZN3UDP11parsePacketEm+0x12>
   d75ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d75ae:	b109      	cbz	r1, d75b4 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d75b0:	f7ff ffc6 	bl	d7540 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d75b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d75b6:	2200      	movs	r2, #0
   d75b8:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d75ba:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d75bc:	b149      	cbz	r1, d75d2 <_ZN3UDP11parsePacketEm+0x30>
   d75be:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d75c0:	b13a      	cbz	r2, d75d2 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d75c2:	6823      	ldr	r3, [r4, #0]
   d75c4:	4620      	mov	r0, r4
   d75c6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d75c8:	4633      	mov	r3, r6
   d75ca:	47a8      	blx	r5
        if (result > 0) {
   d75cc:	2800      	cmp	r0, #0
            _total = result;
   d75ce:	bfc8      	it	gt
   d75d0:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d75d2:	6823      	ldr	r3, [r4, #0]
   d75d4:	4620      	mov	r0, r4
   d75d6:	691b      	ldr	r3, [r3, #16]
}
   d75d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d75dc:	4718      	bx	r3
	...

000d75e0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d75e0:	b510      	push	{r4, lr}
   d75e2:	4b07      	ldr	r3, [pc, #28]	; (d7600 <_ZN3UDPD1Ev+0x20>)
   d75e4:	f103 0208 	add.w	r2, r3, #8
   d75e8:	336c      	adds	r3, #108	; 0x6c
   d75ea:	4604      	mov	r4, r0
   d75ec:	6002      	str	r2, [r0, #0]
   d75ee:	6103      	str	r3, [r0, #16]
   d75f0:	f7ff fd6b 	bl	d70ca <_ZN3UDP4stopEv>
   d75f4:	4620      	mov	r0, r4
   d75f6:	f7ff ff91 	bl	d751c <_ZN3UDP13releaseBufferEv>
   d75fa:	4620      	mov	r0, r4
   d75fc:	bd10      	pop	{r4, pc}
   d75fe:	bf00      	nop
   d7600:	000d86a4 	.word	0x000d86a4

000d7604 <_ZN3UDPD0Ev>:
   d7604:	b510      	push	{r4, lr}
   d7606:	4604      	mov	r4, r0
   d7608:	f7ff ffea 	bl	d75e0 <_ZN3UDPD1Ev>
   d760c:	4620      	mov	r0, r4
   d760e:	214c      	movs	r1, #76	; 0x4c
   d7610:	f000 fa7b 	bl	d7b0a <_ZdlPvj>
   d7614:	4620      	mov	r0, r4
   d7616:	bd10      	pop	{r4, pc}

000d7618 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d7618:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d761a:	6940      	ldr	r0, [r0, #20]
   d761c:	2800      	cmp	r0, #0
   d761e:	db04      	blt.n	d762a <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d7620:	2301      	movs	r3, #1
   d7622:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d7626:	f7ff bef6 	b.w	d7416 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d762a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d762e:	4770      	bx	lr

000d7630 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7630:	4770      	bx	lr

000d7632 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7632:	7441      	strb	r1, [r0, #17]
   d7634:	4770      	bx	lr

000d7636 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7636:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7638:	7c00      	ldrb	r0, [r0, #16]
   d763a:	f7fd fa9b 	bl	d4b74 <HAL_USART_Available_Data_For_Write>
}
   d763e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7642:	bd08      	pop	{r3, pc}

000d7644 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7644:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7646:	7c00      	ldrb	r0, [r0, #16]
   d7648:	f7fd fa6c 	bl	d4b24 <HAL_USART_Available_Data>
}
   d764c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7650:	bd08      	pop	{r3, pc}

000d7652 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7652:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7654:	7c00      	ldrb	r0, [r0, #16]
   d7656:	f7fd fa75 	bl	d4b44 <HAL_USART_Peek_Data>
}
   d765a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d765e:	bf28      	it	cs
   d7660:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7664:	bd08      	pop	{r3, pc}

000d7666 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7666:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7668:	7c00      	ldrb	r0, [r0, #16]
   d766a:	f7fd fa63 	bl	d4b34 <HAL_USART_Read_Data>
}
   d766e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7672:	bf28      	it	cs
   d7674:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7678:	bd08      	pop	{r3, pc}

000d767a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d767a:	7c00      	ldrb	r0, [r0, #16]
   d767c:	f7fd ba6a 	b.w	d4b54 <HAL_USART_Flush_Data>

000d7680 <_ZN11USARTSerialD0Ev>:
   d7680:	b510      	push	{r4, lr}
   d7682:	2114      	movs	r1, #20
   d7684:	4604      	mov	r4, r0
   d7686:	f000 fa40 	bl	d7b0a <_ZdlPvj>
   d768a:	4620      	mov	r0, r4
   d768c:	bd10      	pop	{r4, pc}

000d768e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d768e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7690:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7692:	4604      	mov	r4, r0
   d7694:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7696:	b925      	cbnz	r5, d76a2 <_ZN11USARTSerial5writeEh+0x14>
   d7698:	7c00      	ldrb	r0, [r0, #16]
   d769a:	f7fd fa6b 	bl	d4b74 <HAL_USART_Available_Data_For_Write>
   d769e:	2800      	cmp	r0, #0
   d76a0:	dd05      	ble.n	d76ae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d76a2:	4631      	mov	r1, r6
   d76a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d76a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d76aa:	f7fd ba33 	b.w	d4b14 <HAL_USART_Write_Data>
  }
  return 0;
}
   d76ae:	4628      	mov	r0, r5
   d76b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d76b4:	b510      	push	{r4, lr}
   d76b6:	4604      	mov	r4, r0
   d76b8:	4608      	mov	r0, r1
   d76ba:	4611      	mov	r1, r2
   d76bc:	2200      	movs	r2, #0
   d76be:	6062      	str	r2, [r4, #4]
   d76c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d76c4:	60a2      	str	r2, [r4, #8]
   d76c6:	4a05      	ldr	r2, [pc, #20]	; (d76dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d76c8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d76ca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d76cc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d76ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d76d0:	461a      	mov	r2, r3
   d76d2:	f7fd fa0f 	bl	d4af4 <HAL_USART_Init>
}
   d76d6:	4620      	mov	r0, r4
   d76d8:	bd10      	pop	{r4, pc}
   d76da:	bf00      	nop
   d76dc:	000d871c 	.word	0x000d871c

000d76e0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d76e0:	2300      	movs	r3, #0
   d76e2:	7c00      	ldrb	r0, [r0, #16]
   d76e4:	f7fd ba4e 	b.w	d4b84 <HAL_USART_BeginConfig>

000d76e8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d76e8:	2200      	movs	r2, #0
   d76ea:	f7ff bff9 	b.w	d76e0 <_ZN11USARTSerial5beginEmm>

000d76ee <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d76ee:	7c00      	ldrb	r0, [r0, #16]
   d76f0:	f7fd ba08 	b.w	d4b04 <HAL_USART_End>

000d76f4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d76f4:	7c00      	ldrb	r0, [r0, #16]
   d76f6:	f7fd ba35 	b.w	d4b64 <HAL_USART_Is_Enabled>
	...

000d76fc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d76fc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d76fe:	4d0c      	ldr	r5, [pc, #48]	; (d7730 <_Z22__fetch_global_Serial1v+0x34>)
   d7700:	6829      	ldr	r1, [r5, #0]
   d7702:	f011 0401 	ands.w	r4, r1, #1
   d7706:	d111      	bne.n	d772c <_Z22__fetch_global_Serial1v+0x30>
   d7708:	4628      	mov	r0, r5
   d770a:	f7fc fcd7 	bl	d40bc <__cxa_guard_acquire>
   d770e:	b168      	cbz	r0, d772c <_Z22__fetch_global_Serial1v+0x30>
   d7710:	4a08      	ldr	r2, [pc, #32]	; (d7734 <_Z22__fetch_global_Serial1v+0x38>)
   d7712:	4b09      	ldr	r3, [pc, #36]	; (d7738 <_Z22__fetch_global_Serial1v+0x3c>)
   d7714:	4809      	ldr	r0, [pc, #36]	; (d773c <_Z22__fetch_global_Serial1v+0x40>)
   d7716:	4621      	mov	r1, r4
   d7718:	f7ff ffcc 	bl	d76b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d771c:	4628      	mov	r0, r5
   d771e:	f7fc fcd2 	bl	d40c6 <__cxa_guard_release>
   d7722:	4a07      	ldr	r2, [pc, #28]	; (d7740 <_Z22__fetch_global_Serial1v+0x44>)
   d7724:	4907      	ldr	r1, [pc, #28]	; (d7744 <_Z22__fetch_global_Serial1v+0x48>)
   d7726:	4805      	ldr	r0, [pc, #20]	; (d773c <_Z22__fetch_global_Serial1v+0x40>)
   d7728:	f000 f9ea 	bl	d7b00 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d772c:	4803      	ldr	r0, [pc, #12]	; (d773c <_Z22__fetch_global_Serial1v+0x40>)
   d772e:	bd38      	pop	{r3, r4, r5, pc}
   d7730:	2003e664 	.word	0x2003e664
   d7734:	2003e668 	.word	0x2003e668
   d7738:	2003e5e0 	.word	0x2003e5e0
   d773c:	2003e5cc 	.word	0x2003e5cc
   d7740:	2003e368 	.word	0x2003e368
   d7744:	000d7631 	.word	0x000d7631

000d7748 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7748:	7441      	strb	r1, [r0, #17]
   d774a:	4770      	bx	lr

000d774c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d774c:	4770      	bx	lr

000d774e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d774e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7750:	2100      	movs	r1, #0
   d7752:	7c00      	ldrb	r0, [r0, #16]
   d7754:	f7fd fa46 	bl	d4be4 <HAL_USB_USART_Receive_Data>
}
   d7758:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d775c:	bf28      	it	cs
   d775e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7762:	bd08      	pop	{r3, pc}

000d7764 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7764:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7766:	2101      	movs	r1, #1
   d7768:	7c00      	ldrb	r0, [r0, #16]
   d776a:	f7fd fa3b 	bl	d4be4 <HAL_USB_USART_Receive_Data>
}
   d776e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7772:	bf28      	it	cs
   d7774:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7778:	bd08      	pop	{r3, pc}

000d777a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d777a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d777c:	7c00      	ldrb	r0, [r0, #16]
   d777e:	f7fd fa29 	bl	d4bd4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7782:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7786:	bd08      	pop	{r3, pc}

000d7788 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7788:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d778a:	7c00      	ldrb	r0, [r0, #16]
   d778c:	f7fd fa1a 	bl	d4bc4 <HAL_USB_USART_Available_Data>
}
   d7790:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7794:	bd08      	pop	{r3, pc}

000d7796 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7796:	7c00      	ldrb	r0, [r0, #16]
   d7798:	f7fd ba34 	b.w	d4c04 <HAL_USB_USART_Flush_Data>

000d779c <_ZN9USBSerialD0Ev>:
   d779c:	b510      	push	{r4, lr}
   d779e:	2114      	movs	r1, #20
   d77a0:	4604      	mov	r4, r0
   d77a2:	f000 f9b2 	bl	d7b0a <_ZdlPvj>
   d77a6:	4620      	mov	r0, r4
   d77a8:	bd10      	pop	{r4, pc}

000d77aa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d77aa:	b538      	push	{r3, r4, r5, lr}
   d77ac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d77ae:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d77b0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d77b2:	f7fd fa0f 	bl	d4bd4 <HAL_USB_USART_Available_Data_For_Write>
   d77b6:	2800      	cmp	r0, #0
   d77b8:	dc01      	bgt.n	d77be <_ZN9USBSerial5writeEh+0x14>
   d77ba:	7c60      	ldrb	r0, [r4, #17]
   d77bc:	b128      	cbz	r0, d77ca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d77be:	4629      	mov	r1, r5
   d77c0:	7c20      	ldrb	r0, [r4, #16]
   d77c2:	f7fd fa17 	bl	d4bf4 <HAL_USB_USART_Send_Data>
   d77c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d77ca:	bd38      	pop	{r3, r4, r5, pc}

000d77cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d77cc:	b510      	push	{r4, lr}
   d77ce:	4604      	mov	r4, r0
   d77d0:	2300      	movs	r3, #0
   d77d2:	6063      	str	r3, [r4, #4]
   d77d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d77d8:	60a3      	str	r3, [r4, #8]
   d77da:	4b05      	ldr	r3, [pc, #20]	; (d77f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d77dc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d77de:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d77e0:	4608      	mov	r0, r1
{
  _serial = serial;
   d77e2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d77e4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d77e6:	4611      	mov	r1, r2
   d77e8:	f7fd f9d4 	bl	d4b94 <HAL_USB_USART_Init>
}
   d77ec:	4620      	mov	r0, r4
   d77ee:	bd10      	pop	{r4, pc}
   d77f0:	000d874c 	.word	0x000d874c

000d77f4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d77f4:	2200      	movs	r2, #0
   d77f6:	7c00      	ldrb	r0, [r0, #16]
   d77f8:	f7fd b9d4 	b.w	d4ba4 <HAL_USB_USART_Begin>

000d77fc <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d77fc:	7c00      	ldrb	r0, [r0, #16]
   d77fe:	f7fd b9d9 	b.w	d4bb4 <HAL_USB_USART_End>

000d7802 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7802:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7804:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7806:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7808:	2100      	movs	r1, #0
   d780a:	f000 fb28 	bl	d7e5e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d780e:	4620      	mov	r0, r4
   d7810:	bd10      	pop	{r4, pc}
	...

000d7814 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7814:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7816:	4d0e      	ldr	r5, [pc, #56]	; (d7850 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7818:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d781a:	a801      	add	r0, sp, #4
   d781c:	f7ff fff1 	bl	d7802 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7820:	6829      	ldr	r1, [r5, #0]
   d7822:	f011 0401 	ands.w	r4, r1, #1
   d7826:	d110      	bne.n	d784a <_Z16_fetch_usbserialv+0x36>
   d7828:	4628      	mov	r0, r5
   d782a:	f7fc fc47 	bl	d40bc <__cxa_guard_acquire>
   d782e:	b160      	cbz	r0, d784a <_Z16_fetch_usbserialv+0x36>
   d7830:	aa01      	add	r2, sp, #4
   d7832:	4621      	mov	r1, r4
   d7834:	4807      	ldr	r0, [pc, #28]	; (d7854 <_Z16_fetch_usbserialv+0x40>)
   d7836:	f7ff ffc9 	bl	d77cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d783a:	4628      	mov	r0, r5
   d783c:	f7fc fc43 	bl	d40c6 <__cxa_guard_release>
   d7840:	4a05      	ldr	r2, [pc, #20]	; (d7858 <_Z16_fetch_usbserialv+0x44>)
   d7842:	4906      	ldr	r1, [pc, #24]	; (d785c <_Z16_fetch_usbserialv+0x48>)
   d7844:	4803      	ldr	r0, [pc, #12]	; (d7854 <_Z16_fetch_usbserialv+0x40>)
   d7846:	f000 f95b 	bl	d7b00 <__aeabi_atexit>
	return _usbserial;
}
   d784a:	4802      	ldr	r0, [pc, #8]	; (d7854 <_Z16_fetch_usbserialv+0x40>)
   d784c:	b007      	add	sp, #28
   d784e:	bd30      	pop	{r4, r5, pc}
   d7850:	2003e6ec 	.word	0x2003e6ec
   d7854:	2003e6f0 	.word	0x2003e6f0
   d7858:	2003e368 	.word	0x2003e368
   d785c:	000d774d 	.word	0x000d774d

000d7860 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7860:	2200      	movs	r2, #0
   d7862:	4611      	mov	r1, r2
   d7864:	6840      	ldr	r0, [r0, #4]
   d7866:	f7fd ba53 	b.w	d4d10 <network_ready>

000d786a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d786a:	2200      	movs	r2, #0
   d786c:	4611      	mov	r1, r2
   d786e:	6840      	ldr	r0, [r0, #4]
   d7870:	f7fd ba6e 	b.w	d4d50 <network_listening>

000d7874 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7874:	2200      	movs	r2, #0
   d7876:	4611      	mov	r1, r2
   d7878:	6840      	ldr	r0, [r0, #4]
   d787a:	f7fd ba79 	b.w	d4d70 <network_get_listen_timeout>

000d787e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d787e:	2200      	movs	r2, #0
   d7880:	6840      	ldr	r0, [r0, #4]
   d7882:	f7fd ba6d 	b.w	d4d60 <network_set_listen_timeout>

000d7886 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7886:	2200      	movs	r2, #0
   d7888:	f081 0101 	eor.w	r1, r1, #1
   d788c:	6840      	ldr	r0, [r0, #4]
   d788e:	f7fd ba57 	b.w	d4d40 <network_listen>

000d7892 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7892:	2300      	movs	r3, #0
   d7894:	461a      	mov	r2, r3
   d7896:	4619      	mov	r1, r3
   d7898:	6840      	ldr	r0, [r0, #4]
   d789a:	f7fd ba49 	b.w	d4d30 <network_off>

000d789e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d789e:	2300      	movs	r3, #0
   d78a0:	461a      	mov	r2, r3
   d78a2:	4619      	mov	r1, r3
   d78a4:	6840      	ldr	r0, [r0, #4]
   d78a6:	f7fd ba3b 	b.w	d4d20 <network_on>

000d78aa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d78aa:	2200      	movs	r2, #0
   d78ac:	4611      	mov	r1, r2
   d78ae:	6840      	ldr	r0, [r0, #4]
   d78b0:	f7fd ba1e 	b.w	d4cf0 <network_connecting>

000d78b4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d78b4:	2200      	movs	r2, #0
   d78b6:	2102      	movs	r1, #2
   d78b8:	6840      	ldr	r0, [r0, #4]
   d78ba:	f7fd ba21 	b.w	d4d00 <network_disconnect>

000d78be <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d78be:	2300      	movs	r3, #0
   d78c0:	461a      	mov	r2, r3
   d78c2:	6840      	ldr	r0, [r0, #4]
   d78c4:	f7fd ba0c 	b.w	d4ce0 <network_connect>

000d78c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d78c8:	4b02      	ldr	r3, [pc, #8]	; (d78d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d78ca:	2204      	movs	r2, #4
   d78cc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d78ce:	4a02      	ldr	r2, [pc, #8]	; (d78d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d78d0:	601a      	str	r2, [r3, #0]
   d78d2:	4770      	bx	lr
   d78d4:	2003e704 	.word	0x2003e704
   d78d8:	000d877c 	.word	0x000d877c

000d78dc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d78dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d78de:	4b0c      	ldr	r3, [pc, #48]	; (d7910 <serialEventRun+0x34>)
   d78e0:	b133      	cbz	r3, d78f0 <serialEventRun+0x14>
   d78e2:	f7ff ff97 	bl	d7814 <_Z16_fetch_usbserialv>
   d78e6:	6803      	ldr	r3, [r0, #0]
   d78e8:	691b      	ldr	r3, [r3, #16]
   d78ea:	4798      	blx	r3
   d78ec:	2800      	cmp	r0, #0
   d78ee:	dc09      	bgt.n	d7904 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d78f0:	4b08      	ldr	r3, [pc, #32]	; (d7914 <serialEventRun+0x38>)
   d78f2:	b163      	cbz	r3, d790e <serialEventRun+0x32>
   d78f4:	f7ff ff02 	bl	d76fc <_Z22__fetch_global_Serial1v>
   d78f8:	6803      	ldr	r3, [r0, #0]
   d78fa:	691b      	ldr	r3, [r3, #16]
   d78fc:	4798      	blx	r3
   d78fe:	2800      	cmp	r0, #0
   d7900:	dc03      	bgt.n	d790a <serialEventRun+0x2e>
   d7902:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7904:	f3af 8000 	nop.w
   d7908:	e7f2      	b.n	d78f0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d790a:	f3af 8000 	nop.w
   d790e:	bd08      	pop	{r3, pc}
	...

000d7918 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7918:	b508      	push	{r3, lr}
	serialEventRun();
   d791a:	f7ff ffdf 	bl	d78dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d791e:	f7fc ffd9 	bl	d48d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7922:	4b01      	ldr	r3, [pc, #4]	; (d7928 <_post_loop+0x10>)
   d7924:	6018      	str	r0, [r3, #0]
   d7926:	bd08      	pop	{r3, pc}
   d7928:	2003e710 	.word	0x2003e710

000d792c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d792c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d792e:	2300      	movs	r3, #0
   d7930:	9300      	str	r3, [sp, #0]
   d7932:	461a      	mov	r2, r3
   d7934:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7938:	f7fd f9ae 	bl	d4c98 <system_ctrl_set_result>
}
   d793c:	b003      	add	sp, #12
   d793e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7944 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7944:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7946:	8843      	ldrh	r3, [r0, #2]
   d7948:	2b0a      	cmp	r3, #10
   d794a:	d008      	beq.n	d795e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d794c:	2b50      	cmp	r3, #80	; 0x50
   d794e:	d109      	bne.n	d7964 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7950:	4b09      	ldr	r3, [pc, #36]	; (d7978 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7952:	681b      	ldr	r3, [r3, #0]
   d7954:	b13b      	cbz	r3, d7966 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7956:	b003      	add	sp, #12
   d7958:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d795c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d795e:	f7ff ffe5 	bl	d792c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7962:	e006      	b.n	d7972 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7964:	2300      	movs	r3, #0
   d7966:	9300      	str	r3, [sp, #0]
   d7968:	461a      	mov	r2, r3
   d796a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d796e:	f7fd f993 	bl	d4c98 <system_ctrl_set_result>
        break;
    }
}
   d7972:	b003      	add	sp, #12
   d7974:	f85d fb04 	ldr.w	pc, [sp], #4
   d7978:	2003e70c 	.word	0x2003e70c

000d797c <module_user_init_hook>:

void module_user_init_hook()
{
   d797c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d797e:	f7fc ff91 	bl	d48a4 <HAL_RNG_GetRandomNumber>
   d7982:	4604      	mov	r4, r0
    srand(seed);
   d7984:	f000 fa74 	bl	d7e70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7988:	4b07      	ldr	r3, [pc, #28]	; (d79a8 <module_user_init_hook+0x2c>)
   d798a:	b113      	cbz	r3, d7992 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d798c:	4620      	mov	r0, r4
   d798e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7992:	2100      	movs	r1, #0
   d7994:	4804      	ldr	r0, [pc, #16]	; (d79a8 <module_user_init_hook+0x2c>)
   d7996:	f7fd f99b 	bl	d4cd0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d799a:	2100      	movs	r1, #0
   d799c:	4803      	ldr	r0, [pc, #12]	; (d79ac <module_user_init_hook+0x30>)
}
   d799e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d79a2:	f7fd b96f 	b.w	d4c84 <system_ctrl_set_app_request_handler>
   d79a6:	bf00      	nop
   d79a8:	00000000 	.word	0x00000000
   d79ac:	000d7945 	.word	0x000d7945

000d79b0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d79b0:	b510      	push	{r4, lr}
   d79b2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d79b4:	480f      	ldr	r0, [pc, #60]	; (d79f4 <pinAvailable+0x44>)
   d79b6:	f7ff fa41 	bl	d6e3c <_ZN8SPIClass9isEnabledEv>
   d79ba:	b128      	cbz	r0, d79c8 <pinAvailable+0x18>
   d79bc:	f1a4 030b 	sub.w	r3, r4, #11
   d79c0:	2b02      	cmp	r3, #2
   d79c2:	d801      	bhi.n	d79c8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d79c4:	2000      	movs	r0, #0
   d79c6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d79c8:	f000 f858 	bl	d7a7c <_Z19__fetch_global_Wirev>
   d79cc:	f7fd faf6 	bl	d4fbc <_ZN7TwoWire9isEnabledEv>
   d79d0:	b108      	cbz	r0, d79d6 <pinAvailable+0x26>
   d79d2:	2c01      	cmp	r4, #1
   d79d4:	d9f6      	bls.n	d79c4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d79d6:	f7ff fe91 	bl	d76fc <_Z22__fetch_global_Serial1v>
   d79da:	f7ff fe8b 	bl	d76f4 <_ZN11USARTSerial9isEnabledEv>
   d79de:	b118      	cbz	r0, d79e8 <pinAvailable+0x38>
   d79e0:	f1a4 0309 	sub.w	r3, r4, #9
   d79e4:	2b01      	cmp	r3, #1
   d79e6:	d9ed      	bls.n	d79c4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d79e8:	2c23      	cmp	r4, #35	; 0x23
   d79ea:	bf8c      	ite	hi
   d79ec:	2000      	movhi	r0, #0
   d79ee:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d79f0:	bd10      	pop	{r4, pc}
   d79f2:	bf00      	nop
   d79f4:	2003e72c 	.word	0x2003e72c

000d79f8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d79f8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d79fa:	b538      	push	{r3, r4, r5, lr}
   d79fc:	4604      	mov	r4, r0
   d79fe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7a00:	d80a      	bhi.n	d7a18 <pinMode+0x20>
   d7a02:	29ff      	cmp	r1, #255	; 0xff
   d7a04:	d008      	beq.n	d7a18 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7a06:	f7ff ffd3 	bl	d79b0 <pinAvailable>
   d7a0a:	b128      	cbz	r0, d7a18 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7a0c:	4629      	mov	r1, r5
   d7a0e:	4620      	mov	r0, r4
}
   d7a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7a14:	f7fc bf76 	b.w	d4904 <HAL_Pin_Mode>
   d7a18:	bd38      	pop	{r3, r4, r5, pc}

000d7a1a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7a1a:	b538      	push	{r3, r4, r5, lr}
   d7a1c:	4604      	mov	r4, r0
   d7a1e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7a20:	f7fc ff78 	bl	d4914 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7a24:	28ff      	cmp	r0, #255	; 0xff
   d7a26:	d010      	beq.n	d7a4a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7a28:	2806      	cmp	r0, #6
   d7a2a:	d804      	bhi.n	d7a36 <digitalWrite+0x1c>
   d7a2c:	234d      	movs	r3, #77	; 0x4d
   d7a2e:	fa23 f000 	lsr.w	r0, r3, r0
   d7a32:	07c3      	lsls	r3, r0, #31
   d7a34:	d409      	bmi.n	d7a4a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7a36:	4620      	mov	r0, r4
   d7a38:	f7ff ffba 	bl	d79b0 <pinAvailable>
   d7a3c:	b128      	cbz	r0, d7a4a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7a3e:	4629      	mov	r1, r5
   d7a40:	4620      	mov	r0, r4
}
   d7a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7a46:	f7fc bf6d 	b.w	d4924 <HAL_GPIO_Write>
   d7a4a:	bd38      	pop	{r3, r4, r5, pc}

000d7a4c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7a4c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7a4e:	b510      	push	{r4, lr}
   d7a50:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7a52:	bf9c      	itt	ls
   d7a54:	340e      	addls	r4, #14
   d7a56:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7a58:	4620      	mov	r0, r4
   d7a5a:	f7ff ffa9 	bl	d79b0 <pinAvailable>
   d7a5e:	b150      	cbz	r0, d7a76 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7a60:	2103      	movs	r1, #3
   d7a62:	4620      	mov	r0, r4
   d7a64:	f7fc ff46 	bl	d48f4 <HAL_Validate_Pin_Function>
   d7a68:	2803      	cmp	r0, #3
   d7a6a:	d104      	bne.n	d7a76 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7a6c:	4620      	mov	r0, r4
}
   d7a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7a72:	f7fc bf5f 	b.w	d4934 <HAL_ADC_Read>
}
   d7a76:	2000      	movs	r0, #0
   d7a78:	bd10      	pop	{r4, pc}
	...

000d7a7c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7a7c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7a7e:	4d0b      	ldr	r5, [pc, #44]	; (d7aac <_Z19__fetch_global_Wirev+0x30>)
   d7a80:	6829      	ldr	r1, [r5, #0]
   d7a82:	f011 0401 	ands.w	r4, r1, #1
   d7a86:	d10f      	bne.n	d7aa8 <_Z19__fetch_global_Wirev+0x2c>
   d7a88:	4628      	mov	r0, r5
   d7a8a:	f7fc fb17 	bl	d40bc <__cxa_guard_acquire>
   d7a8e:	b158      	cbz	r0, d7aa8 <_Z19__fetch_global_Wirev+0x2c>
   d7a90:	4621      	mov	r1, r4
   d7a92:	4807      	ldr	r0, [pc, #28]	; (d7ab0 <_Z19__fetch_global_Wirev+0x34>)
   d7a94:	f7fd fa80 	bl	d4f98 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7a98:	4628      	mov	r0, r5
   d7a9a:	f7fc fb14 	bl	d40c6 <__cxa_guard_release>
   d7a9e:	4a05      	ldr	r2, [pc, #20]	; (d7ab4 <_Z19__fetch_global_Wirev+0x38>)
   d7aa0:	4905      	ldr	r1, [pc, #20]	; (d7ab8 <_Z19__fetch_global_Wirev+0x3c>)
   d7aa2:	4803      	ldr	r0, [pc, #12]	; (d7ab0 <_Z19__fetch_global_Wirev+0x34>)
   d7aa4:	f000 f82c 	bl	d7b00 <__aeabi_atexit>
	return wire;
}
   d7aa8:	4801      	ldr	r0, [pc, #4]	; (d7ab0 <_Z19__fetch_global_Wirev+0x34>)
   d7aaa:	bd38      	pop	{r3, r4, r5, pc}
   d7aac:	2003e714 	.word	0x2003e714
   d7ab0:	2003e718 	.word	0x2003e718
   d7ab4:	2003e368 	.word	0x2003e368
   d7ab8:	000d4f41 	.word	0x000d4f41

000d7abc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7abc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7abe:	4c0c      	ldr	r4, [pc, #48]	; (d7af0 <_GLOBAL__sub_I_SPI+0x34>)
   d7ac0:	4e0c      	ldr	r6, [pc, #48]	; (d7af4 <_GLOBAL__sub_I_SPI+0x38>)
   d7ac2:	4d0d      	ldr	r5, [pc, #52]	; (d7af8 <_GLOBAL__sub_I_SPI+0x3c>)
   d7ac4:	2100      	movs	r1, #0
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	f7ff f9a4 	bl	d6e14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7acc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7ace:	4c0b      	ldr	r4, [pc, #44]	; (d7afc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7ad0:	4632      	mov	r2, r6
   d7ad2:	4629      	mov	r1, r5
   d7ad4:	f000 f814 	bl	d7b00 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7ad8:	2101      	movs	r1, #1
   d7ada:	4620      	mov	r0, r4
   d7adc:	f7ff f99a 	bl	d6e14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7ae0:	4632      	mov	r2, r6
   d7ae2:	4629      	mov	r1, r5
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7aea:	f000 b809 	b.w	d7b00 <__aeabi_atexit>
   d7aee:	bf00      	nop
   d7af0:	2003e72c 	.word	0x2003e72c
   d7af4:	2003e368 	.word	0x2003e368
   d7af8:	000d6e05 	.word	0x000d6e05
   d7afc:	2003e73c 	.word	0x2003e73c

000d7b00 <__aeabi_atexit>:
   d7b00:	460b      	mov	r3, r1
   d7b02:	4601      	mov	r1, r0
   d7b04:	4618      	mov	r0, r3
   d7b06:	f000 b967 	b.w	d7dd8 <__cxa_atexit>

000d7b0a <_ZdlPvj>:
   d7b0a:	f7fc bac8 	b.w	d409e <_ZdlPv>
	...

000d7b10 <_ZSt15get_new_handlerv>:
   d7b10:	4b02      	ldr	r3, [pc, #8]	; (d7b1c <_ZSt15get_new_handlerv+0xc>)
   d7b12:	6818      	ldr	r0, [r3, #0]
   d7b14:	f3bf 8f5f 	dmb	sy
   d7b18:	4770      	bx	lr
   d7b1a:	bf00      	nop
   d7b1c:	2003e74c 	.word	0x2003e74c

000d7b20 <_ZnwjRKSt9nothrow_t>:
   d7b20:	b510      	push	{r4, lr}
   d7b22:	2800      	cmp	r0, #0
   d7b24:	bf14      	ite	ne
   d7b26:	4604      	movne	r4, r0
   d7b28:	2401      	moveq	r4, #1
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	f7fd f928 	bl	d4d80 <malloc>
   d7b30:	b920      	cbnz	r0, d7b3c <_ZnwjRKSt9nothrow_t+0x1c>
   d7b32:	f7ff ffed 	bl	d7b10 <_ZSt15get_new_handlerv>
   d7b36:	b108      	cbz	r0, d7b3c <_ZnwjRKSt9nothrow_t+0x1c>
   d7b38:	4780      	blx	r0
   d7b3a:	e7f6      	b.n	d7b2a <_ZnwjRKSt9nothrow_t+0xa>
   d7b3c:	bd10      	pop	{r4, pc}

000d7b3e <_ZnajRKSt9nothrow_t>:
   d7b3e:	f7ff bfef 	b.w	d7b20 <_ZnwjRKSt9nothrow_t>

000d7b42 <_ZSt25__throw_bad_function_callv>:
   d7b42:	b508      	push	{r3, lr}
   d7b44:	f7fd f93c 	bl	d4dc0 <abort>

000d7b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7b48:	4b24      	ldr	r3, [pc, #144]	; (d7bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7b4a:	681a      	ldr	r2, [r3, #0]
   d7b4c:	07d0      	lsls	r0, r2, #31
   d7b4e:	bf5c      	itt	pl
   d7b50:	2201      	movpl	r2, #1
   d7b52:	601a      	strpl	r2, [r3, #0]
   d7b54:	4b22      	ldr	r3, [pc, #136]	; (d7be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7b56:	681a      	ldr	r2, [r3, #0]
   d7b58:	07d1      	lsls	r1, r2, #31
   d7b5a:	bf5c      	itt	pl
   d7b5c:	2201      	movpl	r2, #1
   d7b5e:	601a      	strpl	r2, [r3, #0]
   d7b60:	4b20      	ldr	r3, [pc, #128]	; (d7be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7b62:	681a      	ldr	r2, [r3, #0]
   d7b64:	07d2      	lsls	r2, r2, #31
   d7b66:	bf5c      	itt	pl
   d7b68:	2201      	movpl	r2, #1
   d7b6a:	601a      	strpl	r2, [r3, #0]
   d7b6c:	4b1e      	ldr	r3, [pc, #120]	; (d7be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7b6e:	681a      	ldr	r2, [r3, #0]
   d7b70:	07d0      	lsls	r0, r2, #31
   d7b72:	bf5c      	itt	pl
   d7b74:	2201      	movpl	r2, #1
   d7b76:	601a      	strpl	r2, [r3, #0]
   d7b78:	4b1c      	ldr	r3, [pc, #112]	; (d7bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7b7a:	681a      	ldr	r2, [r3, #0]
   d7b7c:	07d1      	lsls	r1, r2, #31
   d7b7e:	bf5c      	itt	pl
   d7b80:	2201      	movpl	r2, #1
   d7b82:	601a      	strpl	r2, [r3, #0]
   d7b84:	4b1a      	ldr	r3, [pc, #104]	; (d7bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7b86:	681a      	ldr	r2, [r3, #0]
   d7b88:	07d2      	lsls	r2, r2, #31
   d7b8a:	bf5c      	itt	pl
   d7b8c:	2201      	movpl	r2, #1
   d7b8e:	601a      	strpl	r2, [r3, #0]
   d7b90:	4b18      	ldr	r3, [pc, #96]	; (d7bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7b92:	681a      	ldr	r2, [r3, #0]
   d7b94:	07d0      	lsls	r0, r2, #31
   d7b96:	bf5c      	itt	pl
   d7b98:	2201      	movpl	r2, #1
   d7b9a:	601a      	strpl	r2, [r3, #0]
   d7b9c:	4b16      	ldr	r3, [pc, #88]	; (d7bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7b9e:	681a      	ldr	r2, [r3, #0]
   d7ba0:	07d1      	lsls	r1, r2, #31
   d7ba2:	bf5c      	itt	pl
   d7ba4:	2201      	movpl	r2, #1
   d7ba6:	601a      	strpl	r2, [r3, #0]
   d7ba8:	4b14      	ldr	r3, [pc, #80]	; (d7bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7baa:	681a      	ldr	r2, [r3, #0]
   d7bac:	07d2      	lsls	r2, r2, #31
   d7bae:	bf5c      	itt	pl
   d7bb0:	2201      	movpl	r2, #1
   d7bb2:	601a      	strpl	r2, [r3, #0]
   d7bb4:	4b12      	ldr	r3, [pc, #72]	; (d7c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7bb6:	681a      	ldr	r2, [r3, #0]
   d7bb8:	07d0      	lsls	r0, r2, #31
   d7bba:	bf5c      	itt	pl
   d7bbc:	2201      	movpl	r2, #1
   d7bbe:	601a      	strpl	r2, [r3, #0]
   d7bc0:	4b10      	ldr	r3, [pc, #64]	; (d7c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7bc2:	681a      	ldr	r2, [r3, #0]
   d7bc4:	07d1      	lsls	r1, r2, #31
   d7bc6:	bf5c      	itt	pl
   d7bc8:	2201      	movpl	r2, #1
   d7bca:	601a      	strpl	r2, [r3, #0]
   d7bcc:	4b0e      	ldr	r3, [pc, #56]	; (d7c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7bce:	681a      	ldr	r2, [r3, #0]
   d7bd0:	07d2      	lsls	r2, r2, #31
   d7bd2:	bf5c      	itt	pl
   d7bd4:	2201      	movpl	r2, #1
   d7bd6:	601a      	strpl	r2, [r3, #0]
   d7bd8:	4770      	bx	lr
   d7bda:	bf00      	nop
   d7bdc:	2003e77c 	.word	0x2003e77c
   d7be0:	2003e778 	.word	0x2003e778
   d7be4:	2003e774 	.word	0x2003e774
   d7be8:	2003e770 	.word	0x2003e770
   d7bec:	2003e76c 	.word	0x2003e76c
   d7bf0:	2003e768 	.word	0x2003e768
   d7bf4:	2003e764 	.word	0x2003e764
   d7bf8:	2003e760 	.word	0x2003e760
   d7bfc:	2003e75c 	.word	0x2003e75c
   d7c00:	2003e758 	.word	0x2003e758
   d7c04:	2003e754 	.word	0x2003e754
   d7c08:	2003e750 	.word	0x2003e750

000d7c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c0c:	4b18      	ldr	r3, [pc, #96]	; (d7c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c0e:	681a      	ldr	r2, [r3, #0]
   d7c10:	07d1      	lsls	r1, r2, #31
   d7c12:	bf5c      	itt	pl
   d7c14:	2201      	movpl	r2, #1
   d7c16:	601a      	strpl	r2, [r3, #0]
   d7c18:	4b16      	ldr	r3, [pc, #88]	; (d7c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c1a:	681a      	ldr	r2, [r3, #0]
   d7c1c:	07d2      	lsls	r2, r2, #31
   d7c1e:	bf5c      	itt	pl
   d7c20:	2201      	movpl	r2, #1
   d7c22:	601a      	strpl	r2, [r3, #0]
   d7c24:	4b14      	ldr	r3, [pc, #80]	; (d7c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c26:	681a      	ldr	r2, [r3, #0]
   d7c28:	07d0      	lsls	r0, r2, #31
   d7c2a:	bf5c      	itt	pl
   d7c2c:	2201      	movpl	r2, #1
   d7c2e:	601a      	strpl	r2, [r3, #0]
   d7c30:	4b12      	ldr	r3, [pc, #72]	; (d7c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c32:	681a      	ldr	r2, [r3, #0]
   d7c34:	07d1      	lsls	r1, r2, #31
   d7c36:	bf5c      	itt	pl
   d7c38:	2201      	movpl	r2, #1
   d7c3a:	601a      	strpl	r2, [r3, #0]
   d7c3c:	4b10      	ldr	r3, [pc, #64]	; (d7c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c3e:	681a      	ldr	r2, [r3, #0]
   d7c40:	07d2      	lsls	r2, r2, #31
   d7c42:	bf5c      	itt	pl
   d7c44:	2201      	movpl	r2, #1
   d7c46:	601a      	strpl	r2, [r3, #0]
   d7c48:	4b0e      	ldr	r3, [pc, #56]	; (d7c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c4a:	681a      	ldr	r2, [r3, #0]
   d7c4c:	07d0      	lsls	r0, r2, #31
   d7c4e:	bf5c      	itt	pl
   d7c50:	2201      	movpl	r2, #1
   d7c52:	601a      	strpl	r2, [r3, #0]
   d7c54:	4b0c      	ldr	r3, [pc, #48]	; (d7c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c56:	681a      	ldr	r2, [r3, #0]
   d7c58:	07d1      	lsls	r1, r2, #31
   d7c5a:	bf5c      	itt	pl
   d7c5c:	2201      	movpl	r2, #1
   d7c5e:	601a      	strpl	r2, [r3, #0]
   d7c60:	4b0a      	ldr	r3, [pc, #40]	; (d7c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c62:	681a      	ldr	r2, [r3, #0]
   d7c64:	07d2      	lsls	r2, r2, #31
   d7c66:	bf5c      	itt	pl
   d7c68:	2201      	movpl	r2, #1
   d7c6a:	601a      	strpl	r2, [r3, #0]
   d7c6c:	4770      	bx	lr
   d7c6e:	bf00      	nop
   d7c70:	2003e79c 	.word	0x2003e79c
   d7c74:	2003e798 	.word	0x2003e798
   d7c78:	2003e794 	.word	0x2003e794
   d7c7c:	2003e790 	.word	0x2003e790
   d7c80:	2003e78c 	.word	0x2003e78c
   d7c84:	2003e788 	.word	0x2003e788
   d7c88:	2003e784 	.word	0x2003e784
   d7c8c:	2003e780 	.word	0x2003e780

000d7c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c90:	4b18      	ldr	r3, [pc, #96]	; (d7cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c92:	681a      	ldr	r2, [r3, #0]
   d7c94:	07d1      	lsls	r1, r2, #31
   d7c96:	bf5c      	itt	pl
   d7c98:	2201      	movpl	r2, #1
   d7c9a:	601a      	strpl	r2, [r3, #0]
   d7c9c:	4b16      	ldr	r3, [pc, #88]	; (d7cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c9e:	681a      	ldr	r2, [r3, #0]
   d7ca0:	07d2      	lsls	r2, r2, #31
   d7ca2:	bf5c      	itt	pl
   d7ca4:	2201      	movpl	r2, #1
   d7ca6:	601a      	strpl	r2, [r3, #0]
   d7ca8:	4b14      	ldr	r3, [pc, #80]	; (d7cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7caa:	681a      	ldr	r2, [r3, #0]
   d7cac:	07d0      	lsls	r0, r2, #31
   d7cae:	bf5c      	itt	pl
   d7cb0:	2201      	movpl	r2, #1
   d7cb2:	601a      	strpl	r2, [r3, #0]
   d7cb4:	4b12      	ldr	r3, [pc, #72]	; (d7d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7cb6:	681a      	ldr	r2, [r3, #0]
   d7cb8:	07d1      	lsls	r1, r2, #31
   d7cba:	bf5c      	itt	pl
   d7cbc:	2201      	movpl	r2, #1
   d7cbe:	601a      	strpl	r2, [r3, #0]
   d7cc0:	4b10      	ldr	r3, [pc, #64]	; (d7d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7cc2:	681a      	ldr	r2, [r3, #0]
   d7cc4:	07d2      	lsls	r2, r2, #31
   d7cc6:	bf5c      	itt	pl
   d7cc8:	2201      	movpl	r2, #1
   d7cca:	601a      	strpl	r2, [r3, #0]
   d7ccc:	4b0e      	ldr	r3, [pc, #56]	; (d7d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7cce:	681a      	ldr	r2, [r3, #0]
   d7cd0:	07d0      	lsls	r0, r2, #31
   d7cd2:	bf5c      	itt	pl
   d7cd4:	2201      	movpl	r2, #1
   d7cd6:	601a      	strpl	r2, [r3, #0]
   d7cd8:	4b0c      	ldr	r3, [pc, #48]	; (d7d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7cda:	681a      	ldr	r2, [r3, #0]
   d7cdc:	07d1      	lsls	r1, r2, #31
   d7cde:	bf5c      	itt	pl
   d7ce0:	2201      	movpl	r2, #1
   d7ce2:	601a      	strpl	r2, [r3, #0]
   d7ce4:	4b0a      	ldr	r3, [pc, #40]	; (d7d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7ce6:	681a      	ldr	r2, [r3, #0]
   d7ce8:	07d2      	lsls	r2, r2, #31
   d7cea:	bf5c      	itt	pl
   d7cec:	2201      	movpl	r2, #1
   d7cee:	601a      	strpl	r2, [r3, #0]
   d7cf0:	4770      	bx	lr
   d7cf2:	bf00      	nop
   d7cf4:	2003e7bc 	.word	0x2003e7bc
   d7cf8:	2003e7b8 	.word	0x2003e7b8
   d7cfc:	2003e7b4 	.word	0x2003e7b4
   d7d00:	2003e7b0 	.word	0x2003e7b0
   d7d04:	2003e7ac 	.word	0x2003e7ac
   d7d08:	2003e7a8 	.word	0x2003e7a8
   d7d0c:	2003e7a4 	.word	0x2003e7a4
   d7d10:	2003e7a0 	.word	0x2003e7a0

000d7d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7d14:	4b24      	ldr	r3, [pc, #144]	; (d7da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7d16:	681a      	ldr	r2, [r3, #0]
   d7d18:	07d0      	lsls	r0, r2, #31
   d7d1a:	bf5c      	itt	pl
   d7d1c:	2201      	movpl	r2, #1
   d7d1e:	601a      	strpl	r2, [r3, #0]
   d7d20:	4b22      	ldr	r3, [pc, #136]	; (d7dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7d22:	681a      	ldr	r2, [r3, #0]
   d7d24:	07d1      	lsls	r1, r2, #31
   d7d26:	bf5c      	itt	pl
   d7d28:	2201      	movpl	r2, #1
   d7d2a:	601a      	strpl	r2, [r3, #0]
   d7d2c:	4b20      	ldr	r3, [pc, #128]	; (d7db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7d2e:	681a      	ldr	r2, [r3, #0]
   d7d30:	07d2      	lsls	r2, r2, #31
   d7d32:	bf5c      	itt	pl
   d7d34:	2201      	movpl	r2, #1
   d7d36:	601a      	strpl	r2, [r3, #0]
   d7d38:	4b1e      	ldr	r3, [pc, #120]	; (d7db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7d3a:	681a      	ldr	r2, [r3, #0]
   d7d3c:	07d0      	lsls	r0, r2, #31
   d7d3e:	bf5c      	itt	pl
   d7d40:	2201      	movpl	r2, #1
   d7d42:	601a      	strpl	r2, [r3, #0]
   d7d44:	4b1c      	ldr	r3, [pc, #112]	; (d7db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7d46:	681a      	ldr	r2, [r3, #0]
   d7d48:	07d1      	lsls	r1, r2, #31
   d7d4a:	bf5c      	itt	pl
   d7d4c:	2201      	movpl	r2, #1
   d7d4e:	601a      	strpl	r2, [r3, #0]
   d7d50:	4b1a      	ldr	r3, [pc, #104]	; (d7dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7d52:	681a      	ldr	r2, [r3, #0]
   d7d54:	07d2      	lsls	r2, r2, #31
   d7d56:	bf5c      	itt	pl
   d7d58:	2201      	movpl	r2, #1
   d7d5a:	601a      	strpl	r2, [r3, #0]
   d7d5c:	4b18      	ldr	r3, [pc, #96]	; (d7dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7d5e:	681a      	ldr	r2, [r3, #0]
   d7d60:	07d0      	lsls	r0, r2, #31
   d7d62:	bf5c      	itt	pl
   d7d64:	2201      	movpl	r2, #1
   d7d66:	601a      	strpl	r2, [r3, #0]
   d7d68:	4b16      	ldr	r3, [pc, #88]	; (d7dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7d6a:	681a      	ldr	r2, [r3, #0]
   d7d6c:	07d1      	lsls	r1, r2, #31
   d7d6e:	bf5c      	itt	pl
   d7d70:	2201      	movpl	r2, #1
   d7d72:	601a      	strpl	r2, [r3, #0]
   d7d74:	4b14      	ldr	r3, [pc, #80]	; (d7dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7d76:	681a      	ldr	r2, [r3, #0]
   d7d78:	07d2      	lsls	r2, r2, #31
   d7d7a:	bf5c      	itt	pl
   d7d7c:	2201      	movpl	r2, #1
   d7d7e:	601a      	strpl	r2, [r3, #0]
   d7d80:	4b12      	ldr	r3, [pc, #72]	; (d7dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7d82:	681a      	ldr	r2, [r3, #0]
   d7d84:	07d0      	lsls	r0, r2, #31
   d7d86:	bf5c      	itt	pl
   d7d88:	2201      	movpl	r2, #1
   d7d8a:	601a      	strpl	r2, [r3, #0]
   d7d8c:	4b10      	ldr	r3, [pc, #64]	; (d7dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7d8e:	681a      	ldr	r2, [r3, #0]
   d7d90:	07d1      	lsls	r1, r2, #31
   d7d92:	bf5c      	itt	pl
   d7d94:	2201      	movpl	r2, #1
   d7d96:	601a      	strpl	r2, [r3, #0]
   d7d98:	4b0e      	ldr	r3, [pc, #56]	; (d7dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7d9a:	681a      	ldr	r2, [r3, #0]
   d7d9c:	07d2      	lsls	r2, r2, #31
   d7d9e:	bf5c      	itt	pl
   d7da0:	2201      	movpl	r2, #1
   d7da2:	601a      	strpl	r2, [r3, #0]
   d7da4:	4770      	bx	lr
   d7da6:	bf00      	nop
   d7da8:	2003e7ec 	.word	0x2003e7ec
   d7dac:	2003e7e8 	.word	0x2003e7e8
   d7db0:	2003e7e4 	.word	0x2003e7e4
   d7db4:	2003e7e0 	.word	0x2003e7e0
   d7db8:	2003e7dc 	.word	0x2003e7dc
   d7dbc:	2003e7d8 	.word	0x2003e7d8
   d7dc0:	2003e7d4 	.word	0x2003e7d4
   d7dc4:	2003e7d0 	.word	0x2003e7d0
   d7dc8:	2003e7cc 	.word	0x2003e7cc
   d7dcc:	2003e7c8 	.word	0x2003e7c8
   d7dd0:	2003e7c4 	.word	0x2003e7c4
   d7dd4:	2003e7c0 	.word	0x2003e7c0

000d7dd8 <__cxa_atexit>:
   d7dd8:	b510      	push	{r4, lr}
   d7dda:	4c05      	ldr	r4, [pc, #20]	; (d7df0 <__cxa_atexit+0x18>)
   d7ddc:	4613      	mov	r3, r2
   d7dde:	b12c      	cbz	r4, d7dec <__cxa_atexit+0x14>
   d7de0:	460a      	mov	r2, r1
   d7de2:	4601      	mov	r1, r0
   d7de4:	2002      	movs	r0, #2
   d7de6:	f3af 8000 	nop.w
   d7dea:	bd10      	pop	{r4, pc}
   d7dec:	4620      	mov	r0, r4
   d7dee:	bd10      	pop	{r4, pc}
   d7df0:	00000000 	.word	0x00000000

000d7df4 <memcmp>:
   d7df4:	b510      	push	{r4, lr}
   d7df6:	3901      	subs	r1, #1
   d7df8:	4402      	add	r2, r0
   d7dfa:	4290      	cmp	r0, r2
   d7dfc:	d007      	beq.n	d7e0e <memcmp+0x1a>
   d7dfe:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7e02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7e06:	42a3      	cmp	r3, r4
   d7e08:	d0f7      	beq.n	d7dfa <memcmp+0x6>
   d7e0a:	1b18      	subs	r0, r3, r4
   d7e0c:	bd10      	pop	{r4, pc}
   d7e0e:	2000      	movs	r0, #0
   d7e10:	bd10      	pop	{r4, pc}

000d7e12 <memcpy>:
   d7e12:	b510      	push	{r4, lr}
   d7e14:	1e43      	subs	r3, r0, #1
   d7e16:	440a      	add	r2, r1
   d7e18:	4291      	cmp	r1, r2
   d7e1a:	d004      	beq.n	d7e26 <memcpy+0x14>
   d7e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e20:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7e24:	e7f8      	b.n	d7e18 <memcpy+0x6>
   d7e26:	bd10      	pop	{r4, pc}

000d7e28 <memmove>:
   d7e28:	4288      	cmp	r0, r1
   d7e2a:	b510      	push	{r4, lr}
   d7e2c:	eb01 0302 	add.w	r3, r1, r2
   d7e30:	d801      	bhi.n	d7e36 <memmove+0xe>
   d7e32:	1e42      	subs	r2, r0, #1
   d7e34:	e00b      	b.n	d7e4e <memmove+0x26>
   d7e36:	4298      	cmp	r0, r3
   d7e38:	d2fb      	bcs.n	d7e32 <memmove+0xa>
   d7e3a:	1881      	adds	r1, r0, r2
   d7e3c:	1ad2      	subs	r2, r2, r3
   d7e3e:	42d3      	cmn	r3, r2
   d7e40:	d004      	beq.n	d7e4c <memmove+0x24>
   d7e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7e46:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7e4a:	e7f8      	b.n	d7e3e <memmove+0x16>
   d7e4c:	bd10      	pop	{r4, pc}
   d7e4e:	4299      	cmp	r1, r3
   d7e50:	d004      	beq.n	d7e5c <memmove+0x34>
   d7e52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e56:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7e5a:	e7f8      	b.n	d7e4e <memmove+0x26>
   d7e5c:	bd10      	pop	{r4, pc}

000d7e5e <memset>:
   d7e5e:	4402      	add	r2, r0
   d7e60:	4603      	mov	r3, r0
   d7e62:	4293      	cmp	r3, r2
   d7e64:	d002      	beq.n	d7e6c <memset+0xe>
   d7e66:	f803 1b01 	strb.w	r1, [r3], #1
   d7e6a:	e7fa      	b.n	d7e62 <memset+0x4>
   d7e6c:	4770      	bx	lr
	...

000d7e70 <srand>:
   d7e70:	b538      	push	{r3, r4, r5, lr}
   d7e72:	4b12      	ldr	r3, [pc, #72]	; (d7ebc <srand+0x4c>)
   d7e74:	681c      	ldr	r4, [r3, #0]
   d7e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e78:	4605      	mov	r5, r0
   d7e7a:	b9d3      	cbnz	r3, d7eb2 <srand+0x42>
   d7e7c:	2018      	movs	r0, #24
   d7e7e:	f7fc ff7f 	bl	d4d80 <malloc>
   d7e82:	f243 330e 	movw	r3, #13070	; 0x330e
   d7e86:	63a0      	str	r0, [r4, #56]	; 0x38
   d7e88:	8003      	strh	r3, [r0, #0]
   d7e8a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7e8e:	8043      	strh	r3, [r0, #2]
   d7e90:	f241 2334 	movw	r3, #4660	; 0x1234
   d7e94:	8083      	strh	r3, [r0, #4]
   d7e96:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7e9a:	80c3      	strh	r3, [r0, #6]
   d7e9c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ea0:	8103      	strh	r3, [r0, #8]
   d7ea2:	2305      	movs	r3, #5
   d7ea4:	8143      	strh	r3, [r0, #10]
   d7ea6:	230b      	movs	r3, #11
   d7ea8:	8183      	strh	r3, [r0, #12]
   d7eaa:	2201      	movs	r2, #1
   d7eac:	2300      	movs	r3, #0
   d7eae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7eb4:	2200      	movs	r2, #0
   d7eb6:	611d      	str	r5, [r3, #16]
   d7eb8:	615a      	str	r2, [r3, #20]
   d7eba:	bd38      	pop	{r3, r4, r5, pc}
   d7ebc:	2003e364 	.word	0x2003e364

000d7ec0 <rand>:
   d7ec0:	4b19      	ldr	r3, [pc, #100]	; (d7f28 <rand+0x68>)
   d7ec2:	b510      	push	{r4, lr}
   d7ec4:	681c      	ldr	r4, [r3, #0]
   d7ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ec8:	b9d3      	cbnz	r3, d7f00 <rand+0x40>
   d7eca:	2018      	movs	r0, #24
   d7ecc:	f7fc ff58 	bl	d4d80 <malloc>
   d7ed0:	f243 330e 	movw	r3, #13070	; 0x330e
   d7ed4:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ed6:	8003      	strh	r3, [r0, #0]
   d7ed8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7edc:	8043      	strh	r3, [r0, #2]
   d7ede:	f241 2334 	movw	r3, #4660	; 0x1234
   d7ee2:	8083      	strh	r3, [r0, #4]
   d7ee4:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7ee8:	80c3      	strh	r3, [r0, #6]
   d7eea:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7eee:	8103      	strh	r3, [r0, #8]
   d7ef0:	2305      	movs	r3, #5
   d7ef2:	8143      	strh	r3, [r0, #10]
   d7ef4:	230b      	movs	r3, #11
   d7ef6:	8183      	strh	r3, [r0, #12]
   d7ef8:	2201      	movs	r2, #1
   d7efa:	2300      	movs	r3, #0
   d7efc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7f00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d7f02:	4c0a      	ldr	r4, [pc, #40]	; (d7f2c <rand+0x6c>)
   d7f04:	690b      	ldr	r3, [r1, #16]
   d7f06:	6948      	ldr	r0, [r1, #20]
   d7f08:	4a09      	ldr	r2, [pc, #36]	; (d7f30 <rand+0x70>)
   d7f0a:	435c      	muls	r4, r3
   d7f0c:	fb02 4000 	mla	r0, r2, r0, r4
   d7f10:	fba3 2302 	umull	r2, r3, r3, r2
   d7f14:	3201      	adds	r2, #1
   d7f16:	4403      	add	r3, r0
   d7f18:	f143 0300 	adc.w	r3, r3, #0
   d7f1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d7f20:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7f24:	bd10      	pop	{r4, pc}
   d7f26:	bf00      	nop
   d7f28:	2003e364 	.word	0x2003e364
   d7f2c:	5851f42d 	.word	0x5851f42d
   d7f30:	4c957f2d 	.word	0x4c957f2d

000d7f34 <strchr>:
   d7f34:	b2c9      	uxtb	r1, r1
   d7f36:	4603      	mov	r3, r0
   d7f38:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f3c:	b11a      	cbz	r2, d7f46 <strchr+0x12>
   d7f3e:	4291      	cmp	r1, r2
   d7f40:	d1f9      	bne.n	d7f36 <strchr+0x2>
   d7f42:	4618      	mov	r0, r3
   d7f44:	4770      	bx	lr
   d7f46:	2900      	cmp	r1, #0
   d7f48:	bf0c      	ite	eq
   d7f4a:	4618      	moveq	r0, r3
   d7f4c:	2000      	movne	r0, #0
   d7f4e:	4770      	bx	lr

000d7f50 <strchrnul>:
   d7f50:	b510      	push	{r4, lr}
   d7f52:	4604      	mov	r4, r0
   d7f54:	f7ff ffee 	bl	d7f34 <strchr>
   d7f58:	b918      	cbnz	r0, d7f62 <strchrnul+0x12>
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f000 f80c 	bl	d7f78 <strlen>
   d7f60:	4420      	add	r0, r4
   d7f62:	bd10      	pop	{r4, pc}

000d7f64 <strcmp>:
   d7f64:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f68:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f6c:	2a01      	cmp	r2, #1
   d7f6e:	bf28      	it	cs
   d7f70:	429a      	cmpcs	r2, r3
   d7f72:	d0f7      	beq.n	d7f64 <strcmp>
   d7f74:	1ad0      	subs	r0, r2, r3
   d7f76:	4770      	bx	lr

000d7f78 <strlen>:
   d7f78:	4603      	mov	r3, r0
   d7f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f7e:	2a00      	cmp	r2, #0
   d7f80:	d1fb      	bne.n	d7f7a <strlen+0x2>
   d7f82:	1a18      	subs	r0, r3, r0
   d7f84:	3801      	subs	r0, #1
   d7f86:	4770      	bx	lr

000d7f88 <strncmp>:
   d7f88:	b530      	push	{r4, r5, lr}
   d7f8a:	b182      	cbz	r2, d7fae <strncmp+0x26>
   d7f8c:	1e45      	subs	r5, r0, #1
   d7f8e:	3901      	subs	r1, #1
   d7f90:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7f94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7f98:	42a3      	cmp	r3, r4
   d7f9a:	d106      	bne.n	d7faa <strncmp+0x22>
   d7f9c:	43ec      	mvns	r4, r5
   d7f9e:	4414      	add	r4, r2
   d7fa0:	42e0      	cmn	r0, r4
   d7fa2:	d001      	beq.n	d7fa8 <strncmp+0x20>
   d7fa4:	2b00      	cmp	r3, #0
   d7fa6:	d1f3      	bne.n	d7f90 <strncmp+0x8>
   d7fa8:	461c      	mov	r4, r3
   d7faa:	1b18      	subs	r0, r3, r4
   d7fac:	bd30      	pop	{r4, r5, pc}
   d7fae:	4610      	mov	r0, r2
   d7fb0:	bd30      	pop	{r4, r5, pc}

000d7fb2 <strnlen>:
   d7fb2:	b510      	push	{r4, lr}
   d7fb4:	4603      	mov	r3, r0
   d7fb6:	4401      	add	r1, r0
   d7fb8:	428b      	cmp	r3, r1
   d7fba:	d004      	beq.n	d7fc6 <strnlen+0x14>
   d7fbc:	781a      	ldrb	r2, [r3, #0]
   d7fbe:	1c5c      	adds	r4, r3, #1
   d7fc0:	b10a      	cbz	r2, d7fc6 <strnlen+0x14>
   d7fc2:	4623      	mov	r3, r4
   d7fc4:	e7f8      	b.n	d7fb8 <strnlen+0x6>
   d7fc6:	1a18      	subs	r0, r3, r0
   d7fc8:	bd10      	pop	{r4, pc}

000d7fca <strrchr>:
   d7fca:	b538      	push	{r3, r4, r5, lr}
   d7fcc:	4603      	mov	r3, r0
   d7fce:	460d      	mov	r5, r1
   d7fd0:	b141      	cbz	r1, d7fe4 <strrchr+0x1a>
   d7fd2:	2400      	movs	r4, #0
   d7fd4:	4629      	mov	r1, r5
   d7fd6:	4618      	mov	r0, r3
   d7fd8:	f7ff ffac 	bl	d7f34 <strchr>
   d7fdc:	b130      	cbz	r0, d7fec <strrchr+0x22>
   d7fde:	1c43      	adds	r3, r0, #1
   d7fe0:	4604      	mov	r4, r0
   d7fe2:	e7f7      	b.n	d7fd4 <strrchr+0xa>
   d7fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7fe8:	f7ff bfa4 	b.w	d7f34 <strchr>
   d7fec:	4620      	mov	r0, r4
   d7fee:	bd38      	pop	{r3, r4, r5, pc}

000d7ff0 <strstr>:
   d7ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ff2:	7803      	ldrb	r3, [r0, #0]
   d7ff4:	b963      	cbnz	r3, d8010 <strstr+0x20>
   d7ff6:	780b      	ldrb	r3, [r1, #0]
   d7ff8:	2b00      	cmp	r3, #0
   d7ffa:	bf18      	it	ne
   d7ffc:	2000      	movne	r0, #0
   d7ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8000:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d8004:	b162      	cbz	r2, d8020 <strstr+0x30>
   d8006:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d800a:	4297      	cmp	r7, r2
   d800c:	4630      	mov	r0, r6
   d800e:	d0f7      	beq.n	d8000 <strstr+0x10>
   d8010:	4603      	mov	r3, r0
   d8012:	1c46      	adds	r6, r0, #1
   d8014:	7800      	ldrb	r0, [r0, #0]
   d8016:	b110      	cbz	r0, d801e <strstr+0x2e>
   d8018:	1e4d      	subs	r5, r1, #1
   d801a:	1e5c      	subs	r4, r3, #1
   d801c:	e7f0      	b.n	d8000 <strstr+0x10>
   d801e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8020:	4618      	mov	r0, r3
   d8022:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8024 <_strtol_r>:
   d8024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8028:	4680      	mov	r8, r0
   d802a:	4840      	ldr	r0, [pc, #256]	; (d812c <_strtol_r+0x108>)
   d802c:	f8d0 9000 	ldr.w	r9, [r0]
   d8030:	460f      	mov	r7, r1
   d8032:	463d      	mov	r5, r7
   d8034:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8038:	eb09 0004 	add.w	r0, r9, r4
   d803c:	7840      	ldrb	r0, [r0, #1]
   d803e:	f000 0008 	and.w	r0, r0, #8
   d8042:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8046:	b108      	cbz	r0, d804c <_strtol_r+0x28>
   d8048:	462f      	mov	r7, r5
   d804a:	e7f2      	b.n	d8032 <_strtol_r+0xe>
   d804c:	2c2d      	cmp	r4, #45	; 0x2d
   d804e:	d103      	bne.n	d8058 <_strtol_r+0x34>
   d8050:	1cbd      	adds	r5, r7, #2
   d8052:	787c      	ldrb	r4, [r7, #1]
   d8054:	2601      	movs	r6, #1
   d8056:	e003      	b.n	d8060 <_strtol_r+0x3c>
   d8058:	2c2b      	cmp	r4, #43	; 0x2b
   d805a:	bf04      	itt	eq
   d805c:	787c      	ldrbeq	r4, [r7, #1]
   d805e:	1cbd      	addeq	r5, r7, #2
   d8060:	b113      	cbz	r3, d8068 <_strtol_r+0x44>
   d8062:	2b10      	cmp	r3, #16
   d8064:	d10a      	bne.n	d807c <_strtol_r+0x58>
   d8066:	e05b      	b.n	d8120 <_strtol_r+0xfc>
   d8068:	2c30      	cmp	r4, #48	; 0x30
   d806a:	d157      	bne.n	d811c <_strtol_r+0xf8>
   d806c:	7828      	ldrb	r0, [r5, #0]
   d806e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8072:	2858      	cmp	r0, #88	; 0x58
   d8074:	d14d      	bne.n	d8112 <_strtol_r+0xee>
   d8076:	786c      	ldrb	r4, [r5, #1]
   d8078:	2310      	movs	r3, #16
   d807a:	3502      	adds	r5, #2
   d807c:	2e00      	cmp	r6, #0
   d807e:	bf14      	ite	ne
   d8080:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8084:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8088:	2700      	movs	r7, #0
   d808a:	fbbc faf3 	udiv	sl, ip, r3
   d808e:	4638      	mov	r0, r7
   d8090:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8094:	eb09 0e04 	add.w	lr, r9, r4
   d8098:	f89e e001 	ldrb.w	lr, [lr, #1]
   d809c:	f01e 0f04 	tst.w	lr, #4
   d80a0:	d001      	beq.n	d80a6 <_strtol_r+0x82>
   d80a2:	3c30      	subs	r4, #48	; 0x30
   d80a4:	e00b      	b.n	d80be <_strtol_r+0x9a>
   d80a6:	f01e 0e03 	ands.w	lr, lr, #3
   d80aa:	d01b      	beq.n	d80e4 <_strtol_r+0xc0>
   d80ac:	f1be 0f01 	cmp.w	lr, #1
   d80b0:	bf0c      	ite	eq
   d80b2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d80b6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d80ba:	ebce 0404 	rsb	r4, lr, r4
   d80be:	42a3      	cmp	r3, r4
   d80c0:	dd10      	ble.n	d80e4 <_strtol_r+0xc0>
   d80c2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d80c6:	d00a      	beq.n	d80de <_strtol_r+0xba>
   d80c8:	4550      	cmp	r0, sl
   d80ca:	d806      	bhi.n	d80da <_strtol_r+0xb6>
   d80cc:	d101      	bne.n	d80d2 <_strtol_r+0xae>
   d80ce:	4564      	cmp	r4, ip
   d80d0:	dc03      	bgt.n	d80da <_strtol_r+0xb6>
   d80d2:	fb03 4000 	mla	r0, r3, r0, r4
   d80d6:	2701      	movs	r7, #1
   d80d8:	e001      	b.n	d80de <_strtol_r+0xba>
   d80da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d80de:	f815 4b01 	ldrb.w	r4, [r5], #1
   d80e2:	e7d7      	b.n	d8094 <_strtol_r+0x70>
   d80e4:	1c7b      	adds	r3, r7, #1
   d80e6:	d10c      	bne.n	d8102 <_strtol_r+0xde>
   d80e8:	2e00      	cmp	r6, #0
   d80ea:	f04f 0322 	mov.w	r3, #34	; 0x22
   d80ee:	bf14      	ite	ne
   d80f0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d80f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d80f8:	f8c8 3000 	str.w	r3, [r8]
   d80fc:	b92a      	cbnz	r2, d810a <_strtol_r+0xe6>
   d80fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8102:	b106      	cbz	r6, d8106 <_strtol_r+0xe2>
   d8104:	4240      	negs	r0, r0
   d8106:	b172      	cbz	r2, d8126 <_strtol_r+0x102>
   d8108:	b107      	cbz	r7, d810c <_strtol_r+0xe8>
   d810a:	1e69      	subs	r1, r5, #1
   d810c:	6011      	str	r1, [r2, #0]
   d810e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8112:	2430      	movs	r4, #48	; 0x30
   d8114:	2b00      	cmp	r3, #0
   d8116:	d1b1      	bne.n	d807c <_strtol_r+0x58>
   d8118:	2308      	movs	r3, #8
   d811a:	e7af      	b.n	d807c <_strtol_r+0x58>
   d811c:	230a      	movs	r3, #10
   d811e:	e7ad      	b.n	d807c <_strtol_r+0x58>
   d8120:	2c30      	cmp	r4, #48	; 0x30
   d8122:	d0a3      	beq.n	d806c <_strtol_r+0x48>
   d8124:	e7aa      	b.n	d807c <_strtol_r+0x58>
   d8126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d812a:	bf00      	nop
   d812c:	2003e300 	.word	0x2003e300

000d8130 <strtol>:
   d8130:	4613      	mov	r3, r2
   d8132:	460a      	mov	r2, r1
   d8134:	4601      	mov	r1, r0
   d8136:	4802      	ldr	r0, [pc, #8]	; (d8140 <strtol+0x10>)
   d8138:	6800      	ldr	r0, [r0, #0]
   d813a:	f7ff bf73 	b.w	d8024 <_strtol_r>
   d813e:	bf00      	nop
   d8140:	2003e364 	.word	0x2003e364

000d8144 <dynalib_user>:
   d8144:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8154:	00000000                                ....

000d8158 <_ZTVN5spark10LogHandlerE>:
	...
   d8168:	000d40a9 000d40cd                       .@...@..

000d8170 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8178:	000d413d 000d4171 000d60a1 000d40cf     =A..qA...`...@..
   d8188:	45574f50 464f2052 00000046 45534552     POWER OFF...RESE
   d8198:	6f500054 4e726577 6f007465 666f006e     T.PowerNet.on.of
   d81a8:	6f740066 77506c67 65720072 00746573     f.toglPwr.reset.
   d81b8:	2d203141 574f5020 4f205245 0a004646     A1 - POWER OFF..
   d81c8:	72656c41 65732074 7420746e 656d206f     Alert sent to me
   d81d8:	6e206873 6f777465 002e6b72 6961570a     sh network...Wai
   d81e8:	676e6974 726f6620 776f7020 2e2e7265     ting for power..
   d81f8:	0a000a2e 2d2d2d0a 2d2d2d2d 2d2d2d2d     .....-----------
   d8208:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   d8218:	2d2d2d2d 0a2d2d2d 74694300 72413a79     -------..City:Ar
   d8228:	316e6f67 6f50000a 20726577 4f207369     gon1..Power is O
   d8238:	65530a4e 672d666c 72656e65 64657461     N.Self-generated
   d8248:	776f7020 6c207265 6c657665 00203a73      power levels: .
   d8258:	65776f50 73692072 46464f20 74754f0a     Power is OFF.Out
   d8268:	72756f73 20646563 65776f70 656c2072     sourced power le
   d8278:	736c6576 34412f20 5000203a 7265776f     vels /A4: .Power
   d8288:	20736920 0a46464f 7374754f 6372756f      is OFF.Outsourc
   d8298:	70206465 7265776f 76656c20 20736c65     ed power levels 
   d82a8:	3a33412f 500a0020 7265776f 70757320     /A3: ..Power sup
   d82b8:	65696c70 79622064 67206120 69636172     plied by a graci
   d82c8:	2073756f 6769656e 726f6268 754f0a00     ous neighbor..Ou
   d82d8:	756f7374 64656372 776f7020 6c207265     tsourced power l
   d82e8:	6c657665 00203a73 6f4f0a0a 20217370     evels: ...Oops! 
   d82f8:	61656c50 70206573 24207961 54422035     Please pay $5 BT
   d8308:	6f662043 656d2072 206f7420 6b726f77     C for me to work
   d8318:	61676120 20216e69 530a000a 2d666c65      again! ...Self-
   d8328:	656e6567 65746172 6f702064 20726577     generated power 
   d8338:	6576656c 2f20736c 203a3541 00315800     levels /A5: .X1.
   d8348:	5f5f0a0a 5f5f5f5f 5f5f5f5f 5f5f5f5f     ..______________
   d8358:	5f5f5f5f 5f5f5f5f 5f5f5f5f 5f5f5f5f     ________________
   d8368:	45520a00 54554f52 20474e49 45574f50     ..REROUTING POWE
   d8378:	4f542052 00732520 74003258 65736568     R TO %s.X2.these
   d8388:	65726120 746f6e20 65687420 6f726420      are not the dro
   d8398:	20736469 20756f79 20657261 6b6f6f6c     ids you are look
   d83a8:	20676e69 2e726f66 0a002e2e 48207325     ing for.....%s H
   d83b8:	4e207361 6f50206f 21726577 000a2021     as No Power!! ..
   d83c8:	2d203141 53545220 20314100 3158202d     A1 - RTS.A1 - X1
   d83d8:	53544320 20314100 3258202d 53544320      CTS.A1 - X2 CTS
   d83e8:	00000000                                ....

000d83ec <_ZTVN5spark13EthernetClassE>:
	...
   d83f4:	000d4f23 000d4f19 000d4f0f 000d4f05     #O...O...O...O..
   d8404:	000d4ef9 000d4eed 000d4ee1 000d4ed9     .N...N...N...N..
   d8414:	000d4ecf 000d4ec5 000d6b35              .N...N..5k..

000d8420 <_ZTV7TwoWire>:
	...
   d8428:	000d4f41 000d4f8b 000d4f63 000d4f43     AO...O..cO..CO..
   d8438:	000d4f6b 000d4f73 000d4f7b 000d4f83     kO..sO..{O...O..

000d8448 <_ZTV9IPAddress>:
	...
   d8450:	000d4fd5 000d4fc5 000d4fc7 00302e30     .O...O...O..0.0.
   d8460:	736c6166 72740065 25006575 67250075     false.true.%u.%g
   d8470:	6c756e00 2575006c 00783430              .null.u%04x.

000d847c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8484:	000d5485 000d54ab 000d545f 000d5103     .T...T.._T...Q..

000d8494 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d849c:	000d5901 000d5915 000d6255 000d5467     .Y...Y..Ub..gT..

000d84ac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d84b4:	000d5481 000d54c7 000d5819 000d54d5     .T...T...X...T..
   d84c4:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d84d4:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d84e4:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d84f4:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d8504:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d8514:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d8524:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d8534:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d8544:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d8554:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d8564:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d8574:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d8584:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d8594:	61700072 0063696e 006c6c61              r.panic.all.

000d85a0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d85a8:	000d58d5 000d58ed 000d60a1 000d40cf     .X...X...`...@..

000d85b8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d85c0:	000d5483 000d54b9 000d5fc9 000d5469     .T...T..._..iT..

000d85d0 <_ZTVN5spark9MeshClassE>:
	...
   d85d8:	000d6459 000d644f 000d6445 000d643b     Yd..Od..Ed..;d..
   d85e8:	000d642f 000d6423 000d6417 000d640f     /d..#d...d...d..
   d85f8:	000d6405 000d63fb 000d6b35 33306666     .d...c..5k..ff03
   d8608:	3a313a3a 31303031 72697700 00676e69     ::1:1001.wiring.
   d8618:	73726170 61702065 74656b63 00642520     parse packet %d.
   d8628:	00316874 6873656d 00627570              th1.meshpub.

000d8634 <_ZTVN5spark12NetworkClassE>:
	...
   d863c:	000d6acd 000d6ad7 000d6ae1 000d6aeb     .j...j...j...j..
   d864c:	000d6af5 000d6b01 000d6b0d 000d6b19     .j...k...k...k..
   d865c:	000d6b21 000d6b2b 000d6b35              !k..+k..5k..

000d8668 <_ZTV8SPIClass>:
	...
   d8670:	000d6e05 000d6e07 2b25005a 3a643330     .n...n..Z.%+03d:
   d8680:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d8690:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d86a0:	00000000                                ....

000d86a4 <_ZTV3UDP>:
	...
   d86ac:	000d75e1 000d7605 000d6fbd 000d70e7     .u...v...o...p..
   d86bc:	000d6fb5 000d6fd3 000d6ff1 000d700b     .o...o...o...p..
   d86cc:	000d702f 000d70cb 000d73cd 000d716d     /p...p...s..mq..
   d86dc:	000d72ed 000d6f9d 000d7575 000d7271     .r...o..uu..qr..
   d86ec:	000d71a5 000d75a3 000d7111 000d6fab     .q...u...q...o..
   d86fc:	000d714d 000d6fb1 000d700d fffffff0     Mq...o...p......
   d870c:	00000000 000d7027                       ....'p..

000d8714 <_ZTV11USARTSerial>:
	...
   d871c:	000d7631 000d7681 000d768f 000d6c15     1v...v...v...l..
   d872c:	000d7645 000d7667 000d7653 000d767b     Ev..gv..Sv..{v..
   d873c:	000d7633 000d7637                       3v..7v..

000d8744 <_ZTV9USBSerial>:
	...
   d874c:	000d774d 000d779d 000d77ab 000d6c15     Mw...w...w...l..
   d875c:	000d7789 000d774f 000d7765 000d7797     .w..Ow..ew...w..
   d876c:	000d777b 000d7749                       {w..Iw..

000d8774 <_ZTVN5spark9WiFiClassE>:
	...
   d877c:	000d78bf 000d78b5 000d78ab 000d7861     .x...x...x..ax..
   d878c:	000d789f 000d7893 000d7887 000d787f     .x...x...x...x..
   d879c:	000d7875 000d786b 000d6b35              ux..kx..5k..

000d87a8 <_ZSt7nothrow>:
	...

000d87a9 <_ctype_>:
   d87a9:	20202000 20202020 28282020 20282828     .         ((((( 
   d87b9:	20202020 20202020 20202020 20202020                     
   d87c9:	10108820 10101010 10101010 10101010      ...............
   d87d9:	04040410 04040404 10040404 10101010     ................
   d87e9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d87f9:	01010101 01010101 01010101 10101010     ................
   d8809:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8819:	02020202 02020202 02020202 10101010     ................
   d8829:	00000020 00000000 00000000 00000000      ...............
	...

000d88ac <__sf_fake_stdin>:
	...

000d88cc <__sf_fake_stdout>:
	...

000d88ec <__sf_fake_stderr>:
	...
   d890c:	00000043                                         C.

000d890e <link_const_variable_data_end>:
	...

000d8910 <link_constructors_location>:
   d8910:	000d476d 	.word	0x000d476d
   d8914:	000d4e49 	.word	0x000d4e49
   d8918:	000d4f2d 	.word	0x000d4f2d
   d891c:	000d6091 	.word	0x000d6091
   d8920:	000d6a7d 	.word	0x000d6a7d
   d8924:	000d6c01 	.word	0x000d6c01
   d8928:	000d6de9 	.word	0x000d6de9
   d892c:	000d6f71 	.word	0x000d6f71
   d8930:	000d6f89 	.word	0x000d6f89
   d8934:	000d78c9 	.word	0x000d78c9
   d8938:	000d7abd 	.word	0x000d7abd
   d893c:	000d7b49 	.word	0x000d7b49
   d8940:	000d7c0d 	.word	0x000d7c0d
   d8944:	000d7c91 	.word	0x000d7c91
   d8948:	000d7d15 	.word	0x000d7d15

000d894c <link_constructors_end>:
   d894c:	00000000 	.word	0x00000000
