
/Users/gaby/Desktop/gridsim2/x2/target/1.4.4/xenon/x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004854  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018918  2**0
                  CONTENTS
  4 .data         0000007c  2003e2f4  000d8870  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000480  2003e370  2003e370  0001e370  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d88ec  000d88ec  000188ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8914  000d8914  00018914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e834c  00000000  00000000  00018918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011c89  00000000  00000000  00100c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000219f0  00000000  00000000  001128ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a68  00000000  00000000  001342dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004d88  00000000  00000000  00136d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035021  00000000  00000000  0013bacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028dac  00000000  00000000  00170aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010368b  00000000  00000000  0019989a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ddc0  00000000  00000000  0029cf28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 feb4 	bl	d7d9a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fed4 	bl	d7de6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2f4 	.word	0x2003e2f4
   d4048:	000d8870 	.word	0x000d8870
   d404c:	2003e370 	.word	0x2003e370
   d4050:	2003e370 	.word	0x2003e370
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fc53 	bl	d7904 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d886c 	.word	0x000d886c
   d4080:	000d8834 	.word	0x000d8834

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b87e 	b.w	d4184 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f929 	bl	d42e0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bc05 	b.w	d78a0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be6d 	b.w	d4d74 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 be6b 	b.w	d4d74 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 be71 	b.w	d4d84 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 be6f 	b.w	d4d84 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fdaa 	bl	d4c08 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d48b9 	.word	0x000d48b9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z8resetAll6String>:
    delay(3000);
}

//cloud commands

int resetAll(String empty){
   d40d8:	b508      	push	{r3, lr}
    Mesh.publish("PowerNet", "RESET");
   d40da:	4a05      	ldr	r2, [pc, #20]	; (d40f0 <_Z8resetAll6String+0x18>)
   d40dc:	4905      	ldr	r1, [pc, #20]	; (d40f4 <_Z8resetAll6String+0x1c>)
   d40de:	4806      	ldr	r0, [pc, #24]	; (d40f8 <_Z8resetAll6String+0x20>)
   d40e0:	f002 fc32 	bl	d6948 <_ZN5spark11MeshPublish7publishEPKcS2_>
    digitalWrite(D4, HIGH);
   d40e4:	2101      	movs	r1, #1
   d40e6:	2004      	movs	r0, #4
   d40e8:	f003 fc5b 	bl	d79a2 <digitalWrite>
    return 0;
}
   d40ec:	2000      	movs	r0, #0
   d40ee:	bd08      	pop	{r3, pc}
   d40f0:	000d811c 	.word	0x000d811c
   d40f4:	000d8122 	.word	0x000d8122
   d40f8:	2003e3e4 	.word	0x2003e3e4

000d40fc <_Z11togglePower6String>:

int togglePower(String command){
   d40fc:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40fe:	490d      	ldr	r1, [pc, #52]	; (d4134 <_Z11togglePower6String+0x38>)
   d4100:	4605      	mov	r5, r0
   d4102:	f002 ff1c 	bl	d6f3e <_ZNK6String6equalsEPKc>
     if (command=="on") {
   d4106:	4604      	mov	r4, r0
   d4108:	b128      	cbz	r0, d4116 <_Z11togglePower6String+0x1a>
        digitalWrite(D4,HIGH);
   d410a:	2101      	movs	r1, #1
   d410c:	2004      	movs	r0, #4
   d410e:	f003 fc48 	bl	d79a2 <digitalWrite>
   d4112:	2001      	movs	r0, #1
   d4114:	bd38      	pop	{r3, r4, r5, pc}
   d4116:	4908      	ldr	r1, [pc, #32]	; (d4138 <_Z11togglePower6String+0x3c>)
   d4118:	4628      	mov	r0, r5
   d411a:	f002 ff10 	bl	d6f3e <_ZNK6String6equalsEPKc>
        return 1;
    }
    else if (command=="off") {
   d411e:	b128      	cbz	r0, d412c <_Z11togglePower6String+0x30>
        digitalWrite(D4,LOW);
   d4120:	4621      	mov	r1, r4
   d4122:	2004      	movs	r0, #4
   d4124:	f003 fc3d 	bl	d79a2 <digitalWrite>
        return 0;
   d4128:	4620      	mov	r0, r4
   d412a:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
        return -1;
   d412c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   d4130:	bd38      	pop	{r3, r4, r5, pc}
   d4132:	bf00      	nop
   d4134:	000d812b 	.word	0x000d812b
   d4138:	000d812e 	.word	0x000d812e

000d413c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d413c:	4b0a      	ldr	r3, [pc, #40]	; (d4168 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d413e:	b510      	push	{r4, lr}
   d4140:	4604      	mov	r4, r0
   d4142:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4144:	f001 fac0 	bl	d56c8 <_ZN5spark10LogManager8instanceEv>
   d4148:	4621      	mov	r1, r4
   d414a:	f001 fcad 	bl	d5aa8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d414e:	f003 fb5b 	bl	d7808 <_Z16_fetch_usbserialv>
   d4152:	f003 fb4d 	bl	d77f0 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4156:	4620      	mov	r0, r4
   d4158:	4b04      	ldr	r3, [pc, #16]	; (d416c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d415a:	f840 3b04 	str.w	r3, [r0], #4
   d415e:	f001 fba9 	bl	d58b4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4162:	4620      	mov	r0, r4
   d4164:	bd10      	pop	{r4, pc}
   d4166:	bf00      	nop
   d4168:	000d8100 	.word	0x000d8100
   d416c:	000d80e8 	.word	0x000d80e8

000d4170 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4170:	b510      	push	{r4, lr}
   d4172:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4174:	f7ff ffe2 	bl	d413c <_ZN5spark16SerialLogHandlerD1Ev>
   d4178:	4620      	mov	r0, r4
   d417a:	2124      	movs	r1, #36	; 0x24
   d417c:	f003 fc89 	bl	d7a92 <_ZdlPvj>
   d4180:	4620      	mov	r0, r4
   d4182:	bd10      	pop	{r4, pc}

000d4184 <setup>:
int togglePower(String command);
int resetAll(String empty);

char myID[5]="X2";

void setup() {
   d4184:	b510      	push	{r4, lr}
    pinMode(D4, OUTPUT);
   d4186:	2101      	movs	r1, #1
   d4188:	2004      	movs	r0, #4
   d418a:	f003 fbf9 	bl	d7980 <pinMode>
    pinMode(D5, OUTPUT);
   d418e:	2101      	movs	r1, #1
   d4190:	2005      	movs	r0, #5
   d4192:	f003 fbf5 	bl	d7980 <pinMode>
    pinMode(D6, OUTPUT);
   d4196:	2101      	movs	r1, #1
   d4198:	2006      	movs	r0, #6
   d419a:	f003 fbf1 	bl	d7980 <pinMode>
    pinMode(D7, OUTPUT);
   d419e:	2101      	movs	r1, #1
   d41a0:	2007      	movs	r0, #7
   d41a2:	f003 fbed 	bl	d7980 <pinMode>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d41a6:	4c0e      	ldr	r4, [pc, #56]	; (d41e0 <setup+0x5c>)
    //Starting serial via USB
    Serial.begin();
   d41a8:	f003 fb2e 	bl	d7808 <_Z16_fetch_usbserialv>
   d41ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41b0:	f003 fb1a 	bl	d77e8 <_ZN9USBSerial5beginEl>

    Mesh.subscribe("PowerNet", commsHandler);
   d41b4:	4a0b      	ldr	r2, [pc, #44]	; (d41e4 <setup+0x60>)
   d41b6:	490c      	ldr	r1, [pc, #48]	; (d41e8 <setup+0x64>)
   d41b8:	480c      	ldr	r0, [pc, #48]	; (d41ec <setup+0x68>)
   d41ba:	f002 fc3d 	bl	d6a38 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d41be:	4a0c      	ldr	r2, [pc, #48]	; (d41f0 <setup+0x6c>)
   d41c0:	490c      	ldr	r1, [pc, #48]	; (d41f4 <setup+0x70>)
   d41c2:	4620      	mov	r0, r4
   d41c4:	f000 fe61 	bl	d4e8a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d41c8:	490b      	ldr	r1, [pc, #44]	; (d41f8 <setup+0x74>)
   d41ca:	4a0c      	ldr	r2, [pc, #48]	; (d41fc <setup+0x78>)
   d41cc:	4620      	mov	r0, r4
   d41ce:	f000 fe5c 	bl	d4e8a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    //registering our functions to cloud!
    Particle.function("toglPwr", togglePower);
    Particle.function("reset", resetAll);

    digitalWrite(D4, HIGH);
   d41d2:	2101      	movs	r1, #1
   d41d4:	2004      	movs	r0, #4
    
}
   d41d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mesh.subscribe("PowerNet", commsHandler);
    //registering our functions to cloud!
    Particle.function("toglPwr", togglePower);
    Particle.function("reset", resetAll);

    digitalWrite(D4, HIGH);
   d41da:	f003 bbe2 	b.w	d79a2 <digitalWrite>
   d41de:	bf00      	nop
   d41e0:	000d4e5f 	.word	0x000d4e5f
   d41e4:	000d452d 	.word	0x000d452d
   d41e8:	000d8122 	.word	0x000d8122
   d41ec:	2003e3e4 	.word	0x2003e3e4
   d41f0:	000d8132 	.word	0x000d8132
   d41f4:	000d40fd 	.word	0x000d40fd
   d41f8:	000d40d9 	.word	0x000d40d9
   d41fc:	000d813a 	.word	0x000d813a

000d4200 <_Z5blinkv>:
    }
    delay(2000); 
}

//signal that POWER OFF message was recieved and power is being rerouted
void blink(){
   d4200:	b508      	push	{r3, lr}
    delay(500);
   d4202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4206:	f000 fddd 	bl	d4dc4 <delay>
    digitalWrite(D7, LOW);
   d420a:	2100      	movs	r1, #0
   d420c:	2007      	movs	r0, #7
   d420e:	f003 fbc8 	bl	d79a2 <digitalWrite>
    delay(500);
   d4212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4216:	f000 fdd5 	bl	d4dc4 <delay>
    digitalWrite(D7, HIGH);
   d421a:	2101      	movs	r1, #1
   d421c:	2007      	movs	r0, #7
   d421e:	f003 fbc0 	bl	d79a2 <digitalWrite>
    delay(500);
   d4222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4226:	f000 fdcd 	bl	d4dc4 <delay>
    digitalWrite(D7, LOW);
   d422a:	2100      	movs	r1, #0
   d422c:	2007      	movs	r0, #7
   d422e:	f003 fbb8 	bl	d79a2 <digitalWrite>
    delay(500);
   d4232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4236:	f000 fdc5 	bl	d4dc4 <delay>
    digitalWrite(D7, HIGH);
   d423a:	2101      	movs	r1, #1
   d423c:	2007      	movs	r0, #7
   d423e:	f003 fbb0 	bl	d79a2 <digitalWrite>
    delay(500);
   d4242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4246:	f000 fdbd 	bl	d4dc4 <delay>
    digitalWrite(D7, LOW);
   d424a:	2100      	movs	r1, #0
   d424c:	2007      	movs	r0, #7
   d424e:	f003 fba8 	bl	d79a2 <digitalWrite>
    delay(500);
   d4252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4256:	f000 fdb5 	bl	d4dc4 <delay>
    digitalWrite(D7, HIGH);
   d425a:	2101      	movs	r1, #1
   d425c:	2007      	movs	r0, #7
   d425e:	f003 fba0 	bl	d79a2 <digitalWrite>
    delay(500);
   d4262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4266:	f000 fdad 	bl	d4dc4 <delay>
    digitalWrite(D7, LOW);
   d426a:	2100      	movs	r1, #0
   d426c:	2007      	movs	r0, #7
}
   d426e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
    digitalWrite(D7, LOW);
    delay(500);
    digitalWrite(D7, HIGH);
    delay(500);
    digitalWrite(D7, LOW);
   d4272:	f003 bb96 	b.w	d79a2 <digitalWrite>
	...

000d4278 <_Z7noPowerv>:
}



void noPower(){
    Mesh.publish("PowerNet", "X2 - POWER OFF");
   d4278:	4914      	ldr	r1, [pc, #80]	; (d42cc <_Z7noPowerv+0x54>)
   d427a:	4a15      	ldr	r2, [pc, #84]	; (d42d0 <_Z7noPowerv+0x58>)
   d427c:	4815      	ldr	r0, [pc, #84]	; (d42d4 <_Z7noPowerv+0x5c>)
    }
}



void noPower(){
   d427e:	b508      	push	{r3, lr}
    Mesh.publish("PowerNet", "X2 - POWER OFF");
   d4280:	f002 fb62 	bl	d6948 <_ZN5spark11MeshPublish7publishEPKcS2_>
    Serial.print("\nAlert sent to mesh network.");
   d4284:	f003 fac0 	bl	d7808 <_Z16_fetch_usbserialv>
   d4288:	4913      	ldr	r1, [pc, #76]	; (d42d8 <_Z7noPowerv+0x60>)
   d428a:	f002 fce3 	bl	d6c54 <_ZN5Print5printEPKc>
    do {
        Serial.print("\nWaiting for power...\n");
   d428e:	f003 fabb 	bl	d7808 <_Z16_fetch_usbserialv>
   d4292:	4912      	ldr	r1, [pc, #72]	; (d42dc <_Z7noPowerv+0x64>)
   d4294:	f002 fcde 	bl	d6c54 <_ZN5Print5printEPKc>
        delay(2300);
   d4298:	f640 00fc 	movw	r0, #2300	; 0x8fc
   d429c:	f000 fd92 	bl	d4dc4 <delay>
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
   d42a0:	200e      	movs	r0, #14
   d42a2:	f003 fb97 	bl	d79d4 <analogRead>
   d42a6:	f640 733c 	movw	r3, #3900	; 0xf3c
   d42aa:	4298      	cmp	r0, r3
   d42ac:	dd07      	ble.n	d42be <_Z7noPowerv+0x46>
   d42ae:	200f      	movs	r0, #15
   d42b0:	f003 fb90 	bl	d79d4 <analogRead>
   d42b4:	f640 53ab 	movw	r3, #3499	; 0xdab
   d42b8:	4298      	cmp	r0, r3
   d42ba:	dde8      	ble.n	d428e <_Z7noPowerv+0x16>
   d42bc:	bd08      	pop	{r3, pc}
   d42be:	200e      	movs	r0, #14
   d42c0:	f003 fb88 	bl	d79d4 <analogRead>
   d42c4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d42c8:	dbf1      	blt.n	d42ae <_Z7noPowerv+0x36>
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	000d8122 	.word	0x000d8122
   d42d0:	000d8140 	.word	0x000d8140
   d42d4:	2003e3e4 	.word	0x2003e3e4
   d42d8:	000d814f 	.word	0x000d814f
   d42dc:	000d816c 	.word	0x000d816c

000d42e0 <loop>:

    digitalWrite(D4, HIGH);
    
}

void loop() {
   d42e0:	b510      	push	{r4, lr}
  Serial.printf("\n\n----------------------------------\n");
   d42e2:	f003 fa91 	bl	d7808 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42e6:	4a5e      	ldr	r2, [pc, #376]	; (d4460 <loop+0x180>)
   d42e8:	2100      	movs	r1, #0
   d42ea:	f002 fd21 	bl	d6d30 <_ZN5Print11printf_implEbPKcz>
  Serial.print("City:Xenon2\n");
   d42ee:	f003 fa8b 	bl	d7808 <_Z16_fetch_usbserialv>
   d42f2:	495c      	ldr	r1, [pc, #368]	; (d4464 <loop+0x184>)
   d42f4:	f002 fcae 	bl	d6c54 <_ZN5Print5printEPKc>
//A3 reads power supplied from X1
//A4 reads power supplied from A1
//A5 reads power supplied form SELF

    //read if power is on
    if (analogRead(A5) >= 3500) {
   d42f8:	200e      	movs	r0, #14
   d42fa:	f003 fb6b 	bl	d79d4 <analogRead>
   d42fe:	f640 53ab 	movw	r3, #3499	; 0xdab
   d4302:	4298      	cmp	r0, r3
   d4304:	dd16      	ble.n	d4334 <loop+0x54>
        Serial.print("Power is ON\nSelf-generated power levels: ");
   d4306:	f003 fa7f 	bl	d7808 <_Z16_fetch_usbserialv>
   d430a:	4957      	ldr	r1, [pc, #348]	; (d4468 <loop+0x188>)
   d430c:	f002 fca2 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A5));
   d4310:	f003 fa7a 	bl	d7808 <_Z16_fetch_usbserialv>
   d4314:	4604      	mov	r4, r0
   d4316:	200e      	movs	r0, #14
   d4318:	f003 fb5c 	bl	d79d4 <analogRead>
   d431c:	220a      	movs	r2, #10
   d431e:	4601      	mov	r1, r0
   d4320:	4620      	mov	r0, r4
   d4322:	f002 fce3 	bl	d6cec <_ZN5Print5printEli>
        Serial.printf("\n----------------------------------\n");
   d4326:	f003 fa6f 	bl	d7808 <_Z16_fetch_usbserialv>
   d432a:	4a50      	ldr	r2, [pc, #320]	; (d446c <loop+0x18c>)
   d432c:	2100      	movs	r1, #0
   d432e:	f002 fcff 	bl	d6d30 <_ZN5Print11printf_implEbPKcz>
   d4332:	e037      	b.n	d43a4 <loop+0xc4>
    //read all analogs to see if power is being recieved
    } else if ((analogRead(A5) < 3000) && (analogRead(A3) < 3000 ) && (analogRead(A4)) < 3000) {  
   d4334:	200e      	movs	r0, #14
   d4336:	f003 fb4d 	bl	d79d4 <analogRead>
   d433a:	f640 34b7 	movw	r4, #2999	; 0xbb7
   d433e:	42a0      	cmp	r0, r4
   d4340:	dc36      	bgt.n	d43b0 <loop+0xd0>
   d4342:	2010      	movs	r0, #16
   d4344:	f003 fb46 	bl	d79d4 <analogRead>
   d4348:	42a0      	cmp	r0, r4
   d434a:	dc31      	bgt.n	d43b0 <loop+0xd0>
   d434c:	200f      	movs	r0, #15
   d434e:	f003 fb41 	bl	d79d4 <analogRead>
   d4352:	42a0      	cmp	r0, r4
   d4354:	dc2c      	bgt.n	d43b0 <loop+0xd0>
        Serial.print("Power is OFF\nOutsourced power levels /A4: ");
   d4356:	f003 fa57 	bl	d7808 <_Z16_fetch_usbserialv>
   d435a:	4945      	ldr	r1, [pc, #276]	; (d4470 <loop+0x190>)
   d435c:	f002 fc7a 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A4));        
   d4360:	f003 fa52 	bl	d7808 <_Z16_fetch_usbserialv>
   d4364:	4604      	mov	r4, r0
   d4366:	200f      	movs	r0, #15
   d4368:	f003 fb34 	bl	d79d4 <analogRead>
   d436c:	220a      	movs	r2, #10
   d436e:	4601      	mov	r1, r0
   d4370:	4620      	mov	r0, r4
   d4372:	f002 fcbb 	bl	d6cec <_ZN5Print5printEli>
        Serial.print("Power is OFF\nOutsourced power levels /A3: ");
   d4376:	f003 fa47 	bl	d7808 <_Z16_fetch_usbserialv>
   d437a:	493e      	ldr	r1, [pc, #248]	; (d4474 <loop+0x194>)
   d437c:	f002 fc6a 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A3));
   d4380:	f003 fa42 	bl	d7808 <_Z16_fetch_usbserialv>
   d4384:	4604      	mov	r4, r0
   d4386:	2010      	movs	r0, #16
   d4388:	f003 fb24 	bl	d79d4 <analogRead>
   d438c:	220a      	movs	r2, #10
   d438e:	4601      	mov	r1, r0
   d4390:	4620      	mov	r0, r4
   d4392:	f002 fcab 	bl	d6cec <_ZN5Print5printEli>
        Serial.print("\n\n----------------------------------\n");
   d4396:	f003 fa37 	bl	d7808 <_Z16_fetch_usbserialv>
   d439a:	4931      	ldr	r1, [pc, #196]	; (d4460 <loop+0x180>)
   d439c:	f002 fc5a 	bl	d6c54 <_ZN5Print5printEPKc>
        noPower();
   d43a0:	f7ff ff6a 	bl	d4278 <_Z7noPowerv>
        Serial.print("\nOutsourced power levels /A3: ");
        Serial.print(analogRead(A3));
        Serial.print("\nSelf-generated power levels /A5: ");
        Serial.print(analogRead(A5));
    }
    delay(2000); 
   d43a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d43a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.print("\nOutsourced power levels /A3: ");
        Serial.print(analogRead(A3));
        Serial.print("\nSelf-generated power levels /A5: ");
        Serial.print(analogRead(A5));
    }
    delay(2000); 
   d43ac:	f000 bd0a 	b.w	d4dc4 <delay>
        Serial.print("Power is OFF\nOutsourced power levels /A3: ");
        Serial.print(analogRead(A3));
        Serial.print("\n\n----------------------------------\n");
        noPower();
    //read all analogs and determine if power is being supplied by others
    } else if (analogRead(A5) < 3000 && (analogRead(A4) > 3500 || analogRead(A3) >3500)){
   d43b0:	200e      	movs	r0, #14
   d43b2:	f003 fb0f 	bl	d79d4 <analogRead>
   d43b6:	f640 33b7 	movw	r3, #2999	; 0xbb7
   d43ba:	4298      	cmp	r0, r3
   d43bc:	dc1a      	bgt.n	d43f4 <loop+0x114>
   d43be:	200f      	movs	r0, #15
   d43c0:	f003 fb08 	bl	d79d4 <analogRead>
   d43c4:	f640 54ac 	movw	r4, #3500	; 0xdac
   d43c8:	42a0      	cmp	r0, r4
   d43ca:	dc04      	bgt.n	d43d6 <loop+0xf6>
   d43cc:	2010      	movs	r0, #16
   d43ce:	f003 fb01 	bl	d79d4 <analogRead>
   d43d2:	42a0      	cmp	r0, r4
   d43d4:	dd0e      	ble.n	d43f4 <loop+0x114>
        Serial.print("\nPower supplied by a gracious neighbor");
   d43d6:	f003 fa17 	bl	d7808 <_Z16_fetch_usbserialv>
   d43da:	4927      	ldr	r1, [pc, #156]	; (d4478 <loop+0x198>)
   d43dc:	f002 fc3a 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print("\nOutsourced power levels: ");
   d43e0:	f003 fa12 	bl	d7808 <_Z16_fetch_usbserialv>
   d43e4:	4925      	ldr	r1, [pc, #148]	; (d447c <loop+0x19c>)
   d43e6:	f002 fc35 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A4));
   d43ea:	f003 fa0d 	bl	d7808 <_Z16_fetch_usbserialv>
   d43ee:	4604      	mov	r4, r0
   d43f0:	200f      	movs	r0, #15
   d43f2:	e02d      	b.n	d4450 <loop+0x170>
    } else {
        Serial.println("\n\nOops! Please pay $5 BTC for me to work again! \n");
   d43f4:	f003 fa08 	bl	d7808 <_Z16_fetch_usbserialv>
   d43f8:	4921      	ldr	r1, [pc, #132]	; (d4480 <loop+0x1a0>)
   d43fa:	f002 fc3e 	bl	d6c7a <_ZN5Print7printlnEPKc>
        Serial.print("\nOutsourced power levels /A4: ");
   d43fe:	f003 fa03 	bl	d7808 <_Z16_fetch_usbserialv>
   d4402:	4920      	ldr	r1, [pc, #128]	; (d4484 <loop+0x1a4>)
   d4404:	f002 fc26 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A4));
   d4408:	f003 f9fe 	bl	d7808 <_Z16_fetch_usbserialv>
   d440c:	4604      	mov	r4, r0
   d440e:	200f      	movs	r0, #15
   d4410:	f003 fae0 	bl	d79d4 <analogRead>
   d4414:	220a      	movs	r2, #10
   d4416:	4601      	mov	r1, r0
   d4418:	4620      	mov	r0, r4
   d441a:	f002 fc67 	bl	d6cec <_ZN5Print5printEli>
        Serial.print("\nOutsourced power levels /A3: ");
   d441e:	f003 f9f3 	bl	d7808 <_Z16_fetch_usbserialv>
   d4422:	4919      	ldr	r1, [pc, #100]	; (d4488 <loop+0x1a8>)
   d4424:	f002 fc16 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A3));
   d4428:	f003 f9ee 	bl	d7808 <_Z16_fetch_usbserialv>
   d442c:	4604      	mov	r4, r0
   d442e:	2010      	movs	r0, #16
   d4430:	f003 fad0 	bl	d79d4 <analogRead>
   d4434:	220a      	movs	r2, #10
   d4436:	4601      	mov	r1, r0
   d4438:	4620      	mov	r0, r4
   d443a:	f002 fc57 	bl	d6cec <_ZN5Print5printEli>
        Serial.print("\nSelf-generated power levels /A5: ");
   d443e:	f003 f9e3 	bl	d7808 <_Z16_fetch_usbserialv>
   d4442:	4912      	ldr	r1, [pc, #72]	; (d448c <loop+0x1ac>)
   d4444:	f002 fc06 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.print(analogRead(A5));
   d4448:	f003 f9de 	bl	d7808 <_Z16_fetch_usbserialv>
   d444c:	4604      	mov	r4, r0
   d444e:	200e      	movs	r0, #14
   d4450:	f003 fac0 	bl	d79d4 <analogRead>
   d4454:	220a      	movs	r2, #10
   d4456:	4601      	mov	r1, r0
   d4458:	4620      	mov	r0, r4
   d445a:	f002 fc47 	bl	d6cec <_ZN5Print5printEli>
   d445e:	e7a1      	b.n	d43a4 <loop+0xc4>
   d4460:	000d8183 	.word	0x000d8183
   d4464:	000d81a9 	.word	0x000d81a9
   d4468:	000d81b6 	.word	0x000d81b6
   d446c:	000d8184 	.word	0x000d8184
   d4470:	000d81e0 	.word	0x000d81e0
   d4474:	000d820b 	.word	0x000d820b
   d4478:	000d8236 	.word	0x000d8236
   d447c:	000d825d 	.word	0x000d825d
   d4480:	000d8278 	.word	0x000d8278
   d4484:	000d81ec 	.word	0x000d81ec
   d4488:	000d8217 	.word	0x000d8217
   d448c:	000d82aa 	.word	0x000d82aa

000d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4490:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4492:	6804      	ldr	r4, [r0, #0]
   d4494:	6843      	ldr	r3, [r0, #4]
   d4496:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4498:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d449a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d449e:	42a6      	cmp	r6, r4
   d44a0:	d004      	beq.n	d44ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d44a2:	4620      	mov	r0, r4
   d44a4:	f002 fcd7 	bl	d6e56 <_ZN6StringD1Ev>
   d44a8:	3414      	adds	r4, #20
   d44aa:	e7f8      	b.n	d449e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d44ac:	6828      	ldr	r0, [r5, #0]
   d44ae:	f000 fc69 	bl	d4d84 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d44b2:	4628      	mov	r0, r5
   d44b4:	bd70      	pop	{r4, r5, r6, pc}

000d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>:
   d44b6:	4613      	mov	r3, r2
   d44b8:	460a      	mov	r2, r1
   d44ba:	2100      	movs	r1, #0
   d44bc:	f002 bc38 	b.w	d6d30 <_ZN5Print11printf_implEbPKcz>

000d44c0 <_Z7reroutePc>:
    digitalWrite(D7, HIGH);
    delay(500);
    digitalWrite(D7, LOW);
}

void reroute(char who[5]){
   d44c0:	b510      	push	{r4, lr}
   d44c2:	4604      	mov	r4, r0

    //signal that POWER OFF message was recieved and power is being rerouted
    blink();
   d44c4:	f7ff fe9c 	bl	d4200 <_Z5blinkv>
    //route power
    delay(1000);
   d44c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d44cc:	f000 fc7a 	bl	d4dc4 <delay>
    //do not route if already supplying power to someone else
    if (strstr(who, "X1")){
   d44d0:	4911      	ldr	r1, [pc, #68]	; (d4518 <_Z7reroutePc+0x58>)
   d44d2:	4620      	mov	r0, r4
   d44d4:	f003 fd50 	bl	d7f78 <strstr>
   d44d8:	b110      	cbz	r0, d44e0 <_Z7reroutePc+0x20>
        digitalWrite(D6,HIGH);
   d44da:	2101      	movs	r1, #1
   d44dc:	2006      	movs	r0, #6
   d44de:	e006      	b.n	d44ee <_Z7reroutePc+0x2e>
        Serial.print("\n\n______________________________");
        Serial.printf("\nREROUTING POWER TO %s", who);
        //Mesh.publish("PowerNet", "X2 - SUPPLYING POWER");
        Serial.print("\n______________________________");
    } else if (strstr(who, "A1")){
   d44e0:	490e      	ldr	r1, [pc, #56]	; (d451c <_Z7reroutePc+0x5c>)
   d44e2:	4620      	mov	r0, r4
   d44e4:	f003 fd48 	bl	d7f78 <strstr>
   d44e8:	b1a8      	cbz	r0, d4516 <_Z7reroutePc+0x56>
        digitalWrite(D5, HIGH);
   d44ea:	2101      	movs	r1, #1
   d44ec:	2005      	movs	r0, #5
   d44ee:	f003 fa58 	bl	d79a2 <digitalWrite>
        Serial.print("\n\n______________________________");
   d44f2:	f003 f989 	bl	d7808 <_Z16_fetch_usbserialv>
   d44f6:	490a      	ldr	r1, [pc, #40]	; (d4520 <_Z7reroutePc+0x60>)
   d44f8:	f002 fbac 	bl	d6c54 <_ZN5Print5printEPKc>
        Serial.printf("\nREROUTING POWER TO %s", who);
   d44fc:	f003 f984 	bl	d7808 <_Z16_fetch_usbserialv>
   d4500:	4622      	mov	r2, r4
   d4502:	4908      	ldr	r1, [pc, #32]	; (d4524 <_Z7reroutePc+0x64>)
   d4504:	f7ff ffd7 	bl	d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>
        //Mesh.publish("PowerNet", "X2 - SUPPLYING POWER");
        Serial.print("\n______________________________");
   d4508:	f003 f97e 	bl	d7808 <_Z16_fetch_usbserialv>
   d450c:	4906      	ldr	r1, [pc, #24]	; (d4528 <_Z7reroutePc+0x68>)
    }
}
   d450e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    } else if (strstr(who, "A1")){
        digitalWrite(D5, HIGH);
        Serial.print("\n\n______________________________");
        Serial.printf("\nREROUTING POWER TO %s", who);
        //Mesh.publish("PowerNet", "X2 - SUPPLYING POWER");
        Serial.print("\n______________________________");
   d4512:	f002 bb9f 	b.w	d6c54 <_ZN5Print5printEPKc>
   d4516:	bd10      	pop	{r4, pc}
   d4518:	000d82cd 	.word	0x000d82cd
   d451c:	000d8308 	.word	0x000d8308
   d4520:	000d82d0 	.word	0x000d82d0
   d4524:	000d82f1 	.word	0x000d82f1
   d4528:	000d82d1 	.word	0x000d82d1

000d452c <_Z12commsHandlerPKcS0_>:
        Serial.print("\nWaiting for power...\n");
        delay(2300);
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){
   d452c:	b570      	push	{r4, r5, r6, lr}

    char x1[5] = "X1";
    //char x2[5] = "X2";
    char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d452e:	4a51      	ldr	r2, [pc, #324]	; (d4674 <_Z12commsHandlerPKcS0_+0x148>)
        Serial.print("\nWaiting for power...\n");
        delay(2300);
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){
   d4530:	b08c      	sub	sp, #48	; 0x30

    char x1[5] = "X1";
   d4532:	f243 1358 	movw	r3, #12632	; 0x3158
    //char x2[5] = "X2";
    char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
   d4536:	6810      	ldr	r0, [r2, #0]
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
   d4538:	9301      	str	r3, [sp, #4]
        Serial.print("\nWaiting for power...\n");
        delay(2300);
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){
   d453a:	460c      	mov	r4, r1

    char x1[5] = "X1";
    //char x2[5] = "X2";
    char a1[5] = "A1";
   d453c:	f243 1341 	movw	r3, #12609	; 0x3141
    char lowPwr[12] = "POWER OFF";
   d4540:	6851      	ldr	r1, [r2, #4]
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
    //char x2[5] = "X2";
    char a1[5] = "A1";
   d4542:	9303      	str	r3, [sp, #12]
    char lowPwr[12] = "POWER OFF";
   d4544:	ab09      	add	r3, sp, #36	; 0x24
   d4546:	c303      	stmia	r3!, {r0, r1}
   d4548:	8912      	ldrh	r2, [r2, #8]
   d454a:	801a      	strh	r2, [r3, #0]
    char rts[5]= "RTS";
   d454c:	4b4a      	ldr	r3, [pc, #296]	; (d4678 <_Z12commsHandlerPKcS0_+0x14c>)
   d454e:	9305      	str	r3, [sp, #20]
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
   d4550:	2500      	movs	r5, #0
    //char x2[5] = "X2";
    char a1[5] = "A1";
    char lowPwr[12] = "POWER OFF";
    char rts[5]= "RTS";
    char cts[5]= "CTS";
   d4552:	3b0f      	subs	r3, #15

        //handle recieved low power messages
    if (strstr(data, lowPwr)){
   d4554:	a909      	add	r1, sp, #36	; 0x24
   d4556:	4620      	mov	r0, r4
        } while((analogRead(A5) > 3900 || analogRead(A5) < 2000) && analogRead(A4) < 3500); 
}
    
void commsHandler(const char *event, const char *data){

    char x1[5] = "X1";
   d4558:	f88d 5008 	strb.w	r5, [sp, #8]
    //char x2[5] = "X2";
    char a1[5] = "A1";
   d455c:	f88d 5010 	strb.w	r5, [sp, #16]
    char lowPwr[12] = "POWER OFF";
   d4560:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    char rts[5]= "RTS";
   d4564:	f88d 5018 	strb.w	r5, [sp, #24]
    char cts[5]= "CTS";
   d4568:	9307      	str	r3, [sp, #28]
   d456a:	f88d 5020 	strb.w	r5, [sp, #32]

        //handle recieved low power messages
    if (strstr(data, lowPwr)){
   d456e:	f003 fd03 	bl	d7f78 <strstr>
   d4572:	b360      	cbz	r0, d45ce <_Z12commsHandlerPKcS0_+0xa2>
        if (strstr(data, x1)){
   d4574:	a901      	add	r1, sp, #4
   d4576:	4620      	mov	r0, r4
   d4578:	f003 fcfe 	bl	d7f78 <strstr>
   d457c:	4606      	mov	r6, r0
   d457e:	b140      	cbz	r0, d4592 <_Z12commsHandlerPKcS0_+0x66>
            char *target[5] = {x1};
            Serial.printf("\n%s Has No Power!! \n", *target);
   d4580:	f003 f942 	bl	d7808 <_Z16_fetch_usbserialv>
   d4584:	493d      	ldr	r1, [pc, #244]	; (d467c <_Z12commsHandlerPKcS0_+0x150>)
   d4586:	aa01      	add	r2, sp, #4
   d4588:	f7ff ff95 	bl	d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>
            delay((random(0,41)/random(10,16))*10000);
   d458c:	2129      	movs	r1, #41	; 0x29
   d458e:	4628      	mov	r0, r5
   d4590:	e00d      	b.n	d45ae <_Z12commsHandlerPKcS0_+0x82>
            Mesh.publish("PowerNet", "X2 - RTS");
        } else if (strstr(data, a1)){
   d4592:	a903      	add	r1, sp, #12
   d4594:	4620      	mov	r0, r4
   d4596:	f003 fcef 	bl	d7f78 <strstr>
   d459a:	2800      	cmp	r0, #0
   d459c:	d064      	beq.n	d4668 <_Z12commsHandlerPKcS0_+0x13c>
            char *target[5] = {a1};
            Serial.printf("\n%s Has No Power!! \n", *target);
   d459e:	f003 f933 	bl	d7808 <_Z16_fetch_usbserialv>
   d45a2:	4936      	ldr	r1, [pc, #216]	; (d467c <_Z12commsHandlerPKcS0_+0x150>)
   d45a4:	aa03      	add	r2, sp, #12
   d45a6:	f7ff ff86 	bl	d44b6 <_ZN5Print6printfIIPcEEEjPKcDpT_>
            delay((random(0,41)/random(10,16))*10000);
   d45aa:	2129      	movs	r1, #41	; 0x29
   d45ac:	4630      	mov	r0, r6
   d45ae:	f002 fc04 	bl	d6dba <_Z6randomii>
   d45b2:	2110      	movs	r1, #16
   d45b4:	4604      	mov	r4, r0
   d45b6:	200a      	movs	r0, #10
   d45b8:	f002 fbff 	bl	d6dba <_Z6randomii>
   d45bc:	f242 7310 	movw	r3, #10000	; 0x2710
   d45c0:	fb94 f0f0 	sdiv	r0, r4, r0
   d45c4:	4358      	muls	r0, r3
   d45c6:	f000 fbfd 	bl	d4dc4 <delay>
            Mesh.publish("PowerNet", "X2 - RTS");
   d45ca:	4a2d      	ldr	r2, [pc, #180]	; (d4680 <_Z12commsHandlerPKcS0_+0x154>)
   d45cc:	e03a      	b.n	d4644 <_Z12commsHandlerPKcS0_+0x118>
        } else { 
        }
    //handle CTS messages
    } else if (strstr(data, cts)){
   d45ce:	a907      	add	r1, sp, #28
   d45d0:	4620      	mov	r0, r4
   d45d2:	f003 fcd1 	bl	d7f78 <strstr>
   d45d6:	b1a8      	cbz	r0, d4604 <_Z12commsHandlerPKcS0_+0xd8>
        if (strstr(data, myID) && strstr(data,x1)){
   d45d8:	492a      	ldr	r1, [pc, #168]	; (d4684 <_Z12commsHandlerPKcS0_+0x158>)
   d45da:	4620      	mov	r0, r4
   d45dc:	f003 fccc 	bl	d7f78 <strstr>
   d45e0:	2800      	cmp	r0, #0
   d45e2:	d041      	beq.n	d4668 <_Z12commsHandlerPKcS0_+0x13c>
   d45e4:	a901      	add	r1, sp, #4
   d45e6:	4620      	mov	r0, r4
   d45e8:	f003 fcc6 	bl	d7f78 <strstr>
   d45ec:	b108      	cbz	r0, d45f2 <_Z12commsHandlerPKcS0_+0xc6>
          reroute(x1);
   d45ee:	a801      	add	r0, sp, #4
   d45f0:	e005      	b.n	d45fe <_Z12commsHandlerPKcS0_+0xd2>
        } else if (strstr(data, myID) && strstr(data,a1)){
   d45f2:	a903      	add	r1, sp, #12
   d45f4:	4620      	mov	r0, r4
   d45f6:	f003 fcbf 	bl	d7f78 <strstr>
   d45fa:	b3a8      	cbz	r0, d4668 <_Z12commsHandlerPKcS0_+0x13c>
          reroute(a1);
   d45fc:	a803      	add	r0, sp, #12
   d45fe:	f7ff ff5f 	bl	d44c0 <_Z7reroutePc>
   d4602:	e031      	b.n	d4668 <_Z12commsHandlerPKcS0_+0x13c>
        }
    //handle RTS messages
    } else if (strstr(data, rts)){
   d4604:	a905      	add	r1, sp, #20
   d4606:	4620      	mov	r0, r4
   d4608:	f003 fcb6 	bl	d7f78 <strstr>
   d460c:	4605      	mov	r5, r0
   d460e:	b1f0      	cbz	r0, d464e <_Z12commsHandlerPKcS0_+0x122>
        // parse who sent RTS
         if (strstr(data, x1)){
   d4610:	a901      	add	r1, sp, #4
   d4612:	4620      	mov	r0, r4
   d4614:	f003 fcb0 	bl	d7f78 <strstr>
   d4618:	b138      	cbz	r0, d462a <_Z12commsHandlerPKcS0_+0xfe>
             //if no one has already sent power
            if (analogRead(A4)<2000){
   d461a:	200f      	movs	r0, #15
   d461c:	f003 f9da 	bl	d79d4 <analogRead>
   d4620:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4624:	da20      	bge.n	d4668 <_Z12commsHandlerPKcS0_+0x13c>
                //CTS
                 Mesh.publish("PowerNet", "X2 - X1 CTS");
   d4626:	4a18      	ldr	r2, [pc, #96]	; (d4688 <_Z12commsHandlerPKcS0_+0x15c>)
   d4628:	e00c      	b.n	d4644 <_Z12commsHandlerPKcS0_+0x118>
             }
        } else if (strstr(data, a1)){
   d462a:	a903      	add	r1, sp, #12
   d462c:	4620      	mov	r0, r4
   d462e:	f003 fca3 	bl	d7f78 <strstr>
   d4632:	b1c8      	cbz	r0, d4668 <_Z12commsHandlerPKcS0_+0x13c>
            if (analogRead(A4)<20000){
   d4634:	200f      	movs	r0, #15
   d4636:	f003 f9cd 	bl	d79d4 <analogRead>
   d463a:	f644 631f 	movw	r3, #19999	; 0x4e1f
   d463e:	4298      	cmp	r0, r3
   d4640:	dc12      	bgt.n	d4668 <_Z12commsHandlerPKcS0_+0x13c>
                 Mesh.publish("PowerNet", "X2 - A1 CTS");
   d4642:	4a12      	ldr	r2, [pc, #72]	; (d468c <_Z12commsHandlerPKcS0_+0x160>)
   d4644:	4912      	ldr	r1, [pc, #72]	; (d4690 <_Z12commsHandlerPKcS0_+0x164>)
   d4646:	4813      	ldr	r0, [pc, #76]	; (d4694 <_Z12commsHandlerPKcS0_+0x168>)
   d4648:	f002 f97e 	bl	d6948 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d464c:	e00c      	b.n	d4668 <_Z12commsHandlerPKcS0_+0x13c>
             }
        } else { 
        } 
    //handle reset messages
    } else if (strstr(data, "RESET")){
   d464e:	4912      	ldr	r1, [pc, #72]	; (d4698 <_Z12commsHandlerPKcS0_+0x16c>)
   d4650:	4620      	mov	r0, r4
   d4652:	f003 fc91 	bl	d7f78 <strstr>
   d4656:	b138      	cbz	r0, d4668 <_Z12commsHandlerPKcS0_+0x13c>
        digitalWrite(D5,LOW);
   d4658:	4629      	mov	r1, r5
   d465a:	2005      	movs	r0, #5
   d465c:	f003 f9a1 	bl	d79a2 <digitalWrite>
        digitalWrite(D6,LOW);
   d4660:	4629      	mov	r1, r5
   d4662:	2006      	movs	r0, #6
   d4664:	f003 f99d 	bl	d79a2 <digitalWrite>
    } else {}
    //slow down flow
    delay(3000);
   d4668:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d466c:	f000 fbaa 	bl	d4dc4 <delay>
}
   d4670:	b00c      	add	sp, #48	; 0x30
   d4672:	bd70      	pop	{r4, r5, r6, pc}
   d4674:	000d8110 	.word	0x000d8110
   d4678:	00535452 	.word	0x00535452
   d467c:	000d830b 	.word	0x000d830b
   d4680:	000d8320 	.word	0x000d8320
   d4684:	2003e2f4 	.word	0x2003e2f4
   d4688:	000d8329 	.word	0x000d8329
   d468c:	000d8335 	.word	0x000d8335
   d4690:	000d8122 	.word	0x000d8122
   d4694:	2003e3e4 	.word	0x2003e3e4
   d4698:	000d811c 	.word	0x000d811c

000d469c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d469c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d469e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46a0:	4606      	mov	r6, r0
   d46a2:	460c      	mov	r4, r1
   d46a4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d46a6:	d916      	bls.n	d46d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46a8:	4290      	cmp	r0, r2
   d46aa:	d215      	bcs.n	d46d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d46ac:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d46b0:	1a6c      	subs	r4, r5, r1
   d46b2:	f1a1 0714 	sub.w	r7, r1, #20
   d46b6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d46b8:	42af      	cmp	r7, r5
   d46ba:	d01c      	beq.n	d46f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46bc:	b12c      	cbz	r4, d46ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46be:	4629      	mov	r1, r5
   d46c0:	4620      	mov	r0, r4
   d46c2:	f002 fbb8 	bl	d6e36 <_ZN6StringC1EOS_>
   d46c6:	7c2b      	ldrb	r3, [r5, #16]
   d46c8:	7423      	strb	r3, [r4, #16]
   d46ca:	4628      	mov	r0, r5
   d46cc:	f002 fbc3 	bl	d6e56 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d46d0:	3d14      	subs	r5, #20
   d46d2:	3c14      	subs	r4, #20
   d46d4:	e7f0      	b.n	d46b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d46d6:	d00e      	beq.n	d46f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d46d8:	42ac      	cmp	r4, r5
   d46da:	d00c      	beq.n	d46f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d46dc:	b12e      	cbz	r6, d46ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d46de:	4621      	mov	r1, r4
   d46e0:	4630      	mov	r0, r6
   d46e2:	f002 fba8 	bl	d6e36 <_ZN6StringC1EOS_>
   d46e6:	7c23      	ldrb	r3, [r4, #16]
   d46e8:	7433      	strb	r3, [r6, #16]
   d46ea:	4620      	mov	r0, r4
   d46ec:	f002 fbb3 	bl	d6e56 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d46f0:	3414      	adds	r4, #20
   d46f2:	3614      	adds	r6, #20
   d46f4:	e7f0      	b.n	d46d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d46f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d46fc:	2300      	movs	r3, #0
   d46fe:	6003      	str	r3, [r0, #0]
   d4700:	6043      	str	r3, [r0, #4]
   d4702:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4704:	684e      	ldr	r6, [r1, #4]
   d4706:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4708:	4604      	mov	r4, r0
   d470a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d470c:	dd24      	ble.n	d4758 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d470e:	f04f 0814 	mov.w	r8, #20
   d4712:	fb08 f006 	mul.w	r0, r8, r6
   d4716:	f000 fb2d 	bl	d4d74 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d471a:	4605      	mov	r5, r0
   d471c:	b1e0      	cbz	r0, d4758 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d471e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4722:	fb08 1202 	mla	r2, r8, r2, r1
   d4726:	f7ff ffb9 	bl	d469c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d472a:	6820      	ldr	r0, [r4, #0]
   d472c:	f000 fb2a 	bl	d4d84 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4730:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4732:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4734:	683e      	ldr	r6, [r7, #0]
   d4736:	687b      	ldr	r3, [r7, #4]
   d4738:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d473c:	4546      	cmp	r6, r8
   d473e:	d009      	beq.n	d4754 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4740:	b12d      	cbz	r5, d474e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4742:	4631      	mov	r1, r6
   d4744:	4628      	mov	r0, r5
   d4746:	f002 fbef 	bl	d6f28 <_ZN6StringC1ERKS_>
   d474a:	7c33      	ldrb	r3, [r6, #16]
   d474c:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d474e:	3614      	adds	r6, #20
   d4750:	3514      	adds	r5, #20
   d4752:	e7f3      	b.n	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4754:	687b      	ldr	r3, [r7, #4]
   d4756:	6063      	str	r3, [r4, #4]
    }
}
   d4758:	4620      	mov	r0, r4
   d475a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4760 <_GLOBAL__sub_I_logHandler>:
        return 0;
    }
    else {
        return -1;
    }
}
   d4760:	b570      	push	{r4, r5, r6, lr}
   d4762:	b08c      	sub	sp, #48	; 0x30

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4764:	f000 f8b8 	bl	d48d8 <HAL_Pin_Map>
SYSTEM_THREAD(ENABLED);
   d4768:	2100      	movs	r1, #0
   d476a:	2001      	movs	r0, #1
   d476c:	f000 fa7c 	bl	d4c68 <system_thread_set_state>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4770:	2300      	movs	r3, #0
   d4772:	9300      	str	r3, [sp, #0]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4778:	f003 f846 	bl	d7808 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d477c:	4c1c      	ldr	r4, [pc, #112]	; (d47f0 <_GLOBAL__sub_I_logHandler+0x90>)
   d477e:	4606      	mov	r6, r0
   d4780:	4669      	mov	r1, sp
   d4782:	a803      	add	r0, sp, #12
   d4784:	f7ff ffb8 	bl	d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4788:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d478a:	a903      	add	r1, sp, #12
   d478c:	a806      	add	r0, sp, #24
   d478e:	f7ff ffb3 	bl	d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4792:	4b18      	ldr	r3, [pc, #96]	; (d47f4 <_GLOBAL__sub_I_logHandler+0x94>)
   d4794:	f845 3b04 	str.w	r3, [r5], #4
   d4798:	a906      	add	r1, sp, #24
   d479a:	a809      	add	r0, sp, #36	; 0x24
   d479c:	f7ff ffac 	bl	d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47a0:	aa09      	add	r2, sp, #36	; 0x24
   d47a2:	2101      	movs	r1, #1
   d47a4:	4628      	mov	r0, r5
   d47a6:	f001 fae2 	bl	d5d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47aa:	a809      	add	r0, sp, #36	; 0x24
   d47ac:	f7ff fe70 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d47b0:	a806      	add	r0, sp, #24
   d47b2:	f7ff fe6d 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47b6:	4b10      	ldr	r3, [pc, #64]	; (d47f8 <_GLOBAL__sub_I_logHandler+0x98>)
   d47b8:	6023      	str	r3, [r4, #0]
   d47ba:	a803      	add	r0, sp, #12
   d47bc:	6226      	str	r6, [r4, #32]
   d47be:	f7ff fe67 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47c2:	4b0e      	ldr	r3, [pc, #56]	; (d47fc <_GLOBAL__sub_I_logHandler+0x9c>)
   d47c4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d47c6:	f003 f81f 	bl	d7808 <_Z16_fetch_usbserialv>
   d47ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d47ce:	f003 f80b 	bl	d77e8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d47d2:	f000 ff79 	bl	d56c8 <_ZN5spark10LogManager8instanceEv>
   d47d6:	4621      	mov	r1, r4
   d47d8:	f001 fa5c 	bl	d5c94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL); 
   d47dc:	4668      	mov	r0, sp
   d47de:	f7ff fe57 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47e2:	4a07      	ldr	r2, [pc, #28]	; (d4800 <_GLOBAL__sub_I_logHandler+0xa0>)
   d47e4:	4907      	ldr	r1, [pc, #28]	; (d4804 <_GLOBAL__sub_I_logHandler+0xa4>)
   d47e6:	4620      	mov	r0, r4
   d47e8:	f003 f94e 	bl	d7a88 <__aeabi_atexit>
        return 0;
    }
    else {
        return -1;
    }
}
   d47ec:	b00c      	add	sp, #48	; 0x30
   d47ee:	bd70      	pop	{r4, r5, r6, pc}
   d47f0:	2003e374 	.word	0x2003e374
   d47f4:	000d80e8 	.word	0x000d80e8
   d47f8:	000d8500 	.word	0x000d8500
   d47fc:	000d8100 	.word	0x000d8100
   d4800:	2003e370 	.word	0x2003e370
   d4804:	000d413d 	.word	0x000d413d

000d4808 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <os_thread_create+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	685b      	ldr	r3, [r3, #4]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030248 	.word	0x00030248

000d4818 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <os_thread_is_current+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	689b      	ldr	r3, [r3, #8]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030248 	.word	0x00030248

000d4828 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <os_thread_join+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	691b      	ldr	r3, [r3, #16]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030248 	.word	0x00030248

000d4838 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <os_thread_cleanup+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	695b      	ldr	r3, [r3, #20]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030248 	.word	0x00030248

000d4848 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <os_mutex_create+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030248 	.word	0x00030248

000d4858 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <os_mutex_recursive_create+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030248 	.word	0x00030248

000d4868 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <os_mutex_recursive_lock+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030248 	.word	0x00030248

000d4878 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <os_mutex_recursive_unlock+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030248 	.word	0x00030248

000d4888 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <os_thread_exit+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030248 	.word	0x00030248

000d4898 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_RNG_GetRandomNumber+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	685b      	ldr	r3, [r3, #4]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030218 	.word	0x00030218

000d48a8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_Delay_Milliseconds+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	689b      	ldr	r3, [r3, #8]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030218 	.word	0x00030218

000d48b8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_Delay_Microseconds+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	68db      	ldr	r3, [r3, #12]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030218 	.word	0x00030218

000d48c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	695b      	ldr	r3, [r3, #20]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030218 	.word	0x00030218

000d48d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_Pin_Map+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	681b      	ldr	r3, [r3, #0]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	0003022c 	.word	0x0003022c

000d48e8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_Validate_Pin_Function+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	685b      	ldr	r3, [r3, #4]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	0003022c 	.word	0x0003022c

000d48f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_Pin_Mode+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	689b      	ldr	r3, [r3, #8]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	0003022c 	.word	0x0003022c

000d4908 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_Get_Pin_Mode+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	68db      	ldr	r3, [r3, #12]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	0003022c 	.word	0x0003022c

000d4918 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_GPIO_Write+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	691b      	ldr	r3, [r3, #16]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003022c 	.word	0x0003022c

000d4928 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_ADC_Read+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003022c 	.word	0x0003022c

000d4938 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_I2C_Write_Data+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6a1b      	ldr	r3, [r3, #32]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030228 	.word	0x00030228

000d4948 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_I2C_Available_Data+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030228 	.word	0x00030228

000d4958 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_I2C_Read_Data+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030228 	.word	0x00030228

000d4968 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_I2C_Peek_Data+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030228 	.word	0x00030228

000d4978 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_I2C_Flush_Data+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030228 	.word	0x00030228

000d4988 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_I2C_Is_Enabled+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030228 	.word	0x00030228

000d4998 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_I2C_Init+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030228 	.word	0x00030228

000d49a8 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <if_name_to_index+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	691b      	ldr	r3, [r3, #16]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003026c 	.word	0x0003026c

000d49b8 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <if_index_to_name+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	695b      	ldr	r3, [r3, #20]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003026c 	.word	0x0003026c

000d49c8 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <if_get_by_index+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	699b      	ldr	r3, [r3, #24]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003026c 	.word	0x0003026c

000d49d8 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <if_get_addrs+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003026c 	.word	0x0003026c

000d49e8 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <if_free_if_addrs+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003026c 	.word	0x0003026c

000d49f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <inet_inet_ntop+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	695b      	ldr	r3, [r3, #20]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030264 	.word	0x00030264

000d4a08 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <inet_inet_pton+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	699b      	ldr	r3, [r3, #24]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030264 	.word	0x00030264

000d4a18 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <inet_htonl+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6a1b      	ldr	r3, [r3, #32]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030264 	.word	0x00030264

000d4a28 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <inet_ntohs+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030264 	.word	0x00030264

000d4a38 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <inet_htons+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030264 	.word	0x00030264

000d4a48 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <netdb_freeaddrinfo+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	689b      	ldr	r3, [r3, #8]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030268 	.word	0x00030268

000d4a58 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <netdb_getaddrinfo+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	68db      	ldr	r3, [r3, #12]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030268 	.word	0x00030268

000d4a68 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <sock_bind+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	685b      	ldr	r3, [r3, #4]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030238 	.word	0x00030238

000d4a78 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <sock_setsockopt+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	699b      	ldr	r3, [r3, #24]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030238 	.word	0x00030238

000d4a88 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <sock_close+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	69db      	ldr	r3, [r3, #28]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030238 	.word	0x00030238

000d4a98 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <sock_recvfrom+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030238 	.word	0x00030238

000d4aa8 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <sock_sendto+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030238 	.word	0x00030238

000d4ab8 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <sock_socket+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	00030238 	.word	0x00030238

000d4ac8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_SPI_Init+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	69db      	ldr	r3, [r3, #28]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030230 	.word	0x00030230

000d4ad8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_SPI_Is_Enabled+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6a1b      	ldr	r3, [r3, #32]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	00030230 	.word	0x00030230

000d4ae8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_USART_Init+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	681b      	ldr	r3, [r3, #0]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003023c 	.word	0x0003023c

000d4af8 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USART_End+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	689b      	ldr	r3, [r3, #8]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003023c 	.word	0x0003023c

000d4b08 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_USART_Write_Data+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	68db      	ldr	r3, [r3, #12]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003023c 	.word	0x0003023c

000d4b18 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <HAL_USART_Available_Data+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	691b      	ldr	r3, [r3, #16]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	0003023c 	.word	0x0003023c

000d4b28 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <HAL_USART_Read_Data+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	695b      	ldr	r3, [r3, #20]
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	0003023c 	.word	0x0003023c

000d4b38 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <HAL_USART_Peek_Data+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	699b      	ldr	r3, [r3, #24]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	0003023c 	.word	0x0003023c

000d4b48 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <HAL_USART_Flush_Data+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	69db      	ldr	r3, [r3, #28]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003023c 	.word	0x0003023c

000d4b58 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <HAL_USART_Is_Enabled+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	6a1b      	ldr	r3, [r3, #32]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003023c 	.word	0x0003023c

000d4b68 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <HAL_USART_Available_Data_For_Write+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003023c 	.word	0x0003023c

000d4b78 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <HAL_USART_BeginConfig+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003023c 	.word	0x0003023c

000d4b88 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <HAL_USB_USART_Init+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	681b      	ldr	r3, [r3, #0]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	0003024c 	.word	0x0003024c

000d4b98 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <HAL_USB_USART_Begin+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	685b      	ldr	r3, [r3, #4]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003024c 	.word	0x0003024c

000d4ba8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <HAL_USB_USART_End+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	689b      	ldr	r3, [r3, #8]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003024c 	.word	0x0003024c

000d4bb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <HAL_USB_USART_Available_Data+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	691b      	ldr	r3, [r3, #16]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003024c 	.word	0x0003024c

000d4bc8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	695b      	ldr	r3, [r3, #20]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	0003024c 	.word	0x0003024c

000d4bd8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <HAL_USB_USART_Receive_Data+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	699b      	ldr	r3, [r3, #24]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	0003024c 	.word	0x0003024c

000d4be8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <HAL_USB_USART_Send_Data+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	69db      	ldr	r3, [r3, #28]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	0003024c 	.word	0x0003024c

000d4bf8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <HAL_USB_USART_Flush_Data+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6a1b      	ldr	r3, [r3, #32]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	0003024c 	.word	0x0003024c

000d4c08 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <panic_+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030260 	.word	0x00030260

000d4c18 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <log_message+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030260 	.word	0x00030260

000d4c28 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <log_level_name+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030260 	.word	0x00030260

000d4c38 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <log_set_callbacks+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030260 	.word	0x00030260

000d4c48 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <set_system_mode+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	685b      	ldr	r3, [r3, #4]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030220 	.word	0x00030220

000d4c58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <system_delay_ms+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	695b      	ldr	r3, [r3, #20]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030220 	.word	0x00030220

000d4c68 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <system_thread_set_state+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030220 	.word	0x00030220

000d4c78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b03      	ldr	r3, [pc, #12]	; (d4c88 <system_ctrl_set_app_request_handler+0x10>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c82:	9301      	str	r3, [sp, #4]
   d4c84:	bd08      	pop	{r3, pc}
   d4c86:	0000      	.short	0x0000
   d4c88:	00030220 	.word	0x00030220

000d4c8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b03      	ldr	r3, [pc, #12]	; (d4c9c <system_ctrl_set_result+0x10>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c96:	9301      	str	r3, [sp, #4]
   d4c98:	bd08      	pop	{r3, pc}
   d4c9a:	0000      	.short	0x0000
   d4c9c:	00030220 	.word	0x00030220

000d4ca0 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b03      	ldr	r3, [pc, #12]	; (d4cb0 <system_invoke_event_handler+0x10>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4caa:	9301      	str	r3, [sp, #4]
   d4cac:	bd08      	pop	{r3, pc}
   d4cae:	0000      	.short	0x0000
   d4cb0:	00030220 	.word	0x00030220

000d4cb4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <spark_function+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	685b      	ldr	r3, [r3, #4]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030244 	.word	0x00030244

000d4cc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030244 	.word	0x00030244

000d4cd4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <network_connect+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	685b      	ldr	r3, [r3, #4]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030240 	.word	0x00030240

000d4ce4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <network_connecting+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	689b      	ldr	r3, [r3, #8]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030240 	.word	0x00030240

000d4cf4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <network_disconnect+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	68db      	ldr	r3, [r3, #12]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030240 	.word	0x00030240

000d4d04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <network_ready+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	691b      	ldr	r3, [r3, #16]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030240 	.word	0x00030240

000d4d14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <network_on+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	695b      	ldr	r3, [r3, #20]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030240 	.word	0x00030240

000d4d24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <network_off+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	699b      	ldr	r3, [r3, #24]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030240 	.word	0x00030240

000d4d34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <network_listen+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	69db      	ldr	r3, [r3, #28]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030240 	.word	0x00030240

000d4d44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <network_listening+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6a1b      	ldr	r3, [r3, #32]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030240 	.word	0x00030240

000d4d54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <network_set_listen_timeout+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030240 	.word	0x00030240

000d4d64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <network_get_listen_timeout+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030240 	.word	0x00030240

000d4d74 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <malloc+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	681b      	ldr	r3, [r3, #0]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003021c 	.word	0x0003021c

000d4d84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <free+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	685b      	ldr	r3, [r3, #4]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003021c 	.word	0x0003021c

000d4d94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <realloc+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	689b      	ldr	r3, [r3, #8]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003021c 	.word	0x0003021c

000d4da4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <vsnprintf+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003021c 	.word	0x0003021c

000d4db4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <abort+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003021c 	.word	0x0003021c

000d4dc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4dc4:	2100      	movs	r1, #0
   d4dc6:	f7ff bf47 	b.w	d4c58 <system_delay_ms>

000d4dca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4dca:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4dcc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4dce:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4dd0:	689b      	ldr	r3, [r3, #8]
   d4dd2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4dd4:	68a3      	ldr	r3, [r4, #8]
   d4dd6:	3b01      	subs	r3, #1
   d4dd8:	60a3      	str	r3, [r4, #8]
   d4dda:	b92b      	cbnz	r3, d4de8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4ddc:	6823      	ldr	r3, [r4, #0]
   d4dde:	4620      	mov	r0, r4
   d4de0:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4de6:	4718      	bx	r3
   d4de8:	bd10      	pop	{r4, pc}

000d4dea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4dea:	680b      	ldr	r3, [r1, #0]
   d4dec:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4dee:	b113      	cbz	r3, d4df6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4df0:	685a      	ldr	r2, [r3, #4]
   d4df2:	3201      	adds	r2, #1
   d4df4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4df6:	4770      	bx	lr

000d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4df8:	b510      	push	{r4, lr}
   d4dfa:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4dfc:	6800      	ldr	r0, [r0, #0]
   d4dfe:	b128      	cbz	r0, d4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e00:	6843      	ldr	r3, [r0, #4]
   d4e02:	3b01      	subs	r3, #1
   d4e04:	6043      	str	r3, [r0, #4]
   d4e06:	b90b      	cbnz	r3, d4e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4e08:	f7ff ffdf 	bl	d4dca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	bd10      	pop	{r4, pc}

000d4e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4e10:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e12:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d4e14:	6803      	ldr	r3, [r0, #0]
   d4e16:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4e18:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d4e1a:	d00c      	beq.n	d4e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d4e1c:	b114      	cbz	r4, d4e24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4e1e:	6863      	ldr	r3, [r4, #4]
   d4e20:	3301      	adds	r3, #1
   d4e22:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4e24:	6828      	ldr	r0, [r5, #0]
   d4e26:	b128      	cbz	r0, d4e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e28:	6843      	ldr	r3, [r0, #4]
   d4e2a:	3b01      	subs	r3, #1
   d4e2c:	6043      	str	r3, [r0, #4]
   d4e2e:	b90b      	cbnz	r3, d4e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d4e30:	f7ff ffcb 	bl	d4dca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4e34:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d4e36:	4628      	mov	r0, r5
   d4e38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e3c:	4802      	ldr	r0, [pc, #8]	; (d4e48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4e3e:	2300      	movs	r3, #0
   d4e40:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4e42:	f7ff bd09 	b.w	d4858 <os_mutex_recursive_create>
   d4e46:	bf00      	nop
   d4e48:	2003e398 	.word	0x2003e398

000d4e4c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e4c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e4e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e50:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e52:	b113      	cbz	r3, d4e5a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e54:	2203      	movs	r2, #3
   d4e56:	4601      	mov	r1, r0
   d4e58:	4798      	blx	r3
    }
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	bd10      	pop	{r4, pc}

000d4e5e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4e5e:	b510      	push	{r4, lr}
   d4e60:	b088      	sub	sp, #32
   d4e62:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4e64:	4668      	mov	r0, sp
   d4e66:	f002 f83d 	bl	d6ee4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4e6a:	4669      	mov	r1, sp
   d4e6c:	a804      	add	r0, sp, #16
   d4e6e:	f002 f85b 	bl	d6f28 <_ZN6StringC1ERKS_>
   d4e72:	a804      	add	r0, sp, #16
   d4e74:	47a0      	blx	r4
   d4e76:	4604      	mov	r4, r0
   d4e78:	a804      	add	r0, sp, #16
   d4e7a:	f001 ffec 	bl	d6e56 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4e7e:	4668      	mov	r0, sp
   d4e80:	f001 ffe9 	bl	d6e56 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4e84:	4620      	mov	r0, r4
   d4e86:	b008      	add	sp, #32
   d4e88:	bd10      	pop	{r4, pc}

000d4e8a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4e8c:	2410      	movs	r4, #16
   d4e8e:	b085      	sub	sp, #20
   d4e90:	4607      	mov	r7, r0
   d4e92:	460e      	mov	r6, r1
   d4e94:	4615      	mov	r5, r2
   d4e96:	2100      	movs	r1, #0
   d4e98:	4622      	mov	r2, r4
   d4e9a:	4668      	mov	r0, sp
   d4e9c:	f002 ffa3 	bl	d7de6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ea0:	2200      	movs	r2, #0
   d4ea2:	4669      	mov	r1, sp
   d4ea4:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4ea6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4eaa:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4eac:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4eae:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4eb0:	f7ff ff00 	bl	d4cb4 <spark_function>
}
   d4eb4:	b005      	add	sp, #20
   d4eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4eb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4eb8:	2200      	movs	r2, #0
   d4eba:	4611      	mov	r1, r2
   d4ebc:	6840      	ldr	r0, [r0, #4]
   d4ebe:	f7ff bf41 	b.w	d4d44 <network_listening>

000d4ec2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	4611      	mov	r1, r2
   d4ec6:	6840      	ldr	r0, [r0, #4]
   d4ec8:	f7ff bf4c 	b.w	d4d64 <network_get_listen_timeout>

000d4ecc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	f7ff bf40 	b.w	d4d54 <network_set_listen_timeout>

000d4ed4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ed4:	2200      	movs	r2, #0
   d4ed6:	f081 0101 	eor.w	r1, r1, #1
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	f7ff bf2a 	b.w	d4d34 <network_listen>

000d4ee0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ee0:	2300      	movs	r3, #0
   d4ee2:	461a      	mov	r2, r3
   d4ee4:	4619      	mov	r1, r3
   d4ee6:	6840      	ldr	r0, [r0, #4]
   d4ee8:	f7ff bf1c 	b.w	d4d24 <network_off>

000d4eec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4eec:	2300      	movs	r3, #0
   d4eee:	461a      	mov	r2, r3
   d4ef0:	4619      	mov	r1, r3
   d4ef2:	6840      	ldr	r0, [r0, #4]
   d4ef4:	f7ff bf0e 	b.w	d4d14 <network_on>

000d4ef8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ef8:	2200      	movs	r2, #0
   d4efa:	4611      	mov	r1, r2
   d4efc:	6840      	ldr	r0, [r0, #4]
   d4efe:	f7ff bf01 	b.w	d4d04 <network_ready>

000d4f02 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f02:	2200      	movs	r2, #0
   d4f04:	4611      	mov	r1, r2
   d4f06:	6840      	ldr	r0, [r0, #4]
   d4f08:	f7ff beec 	b.w	d4ce4 <network_connecting>

000d4f0c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	2102      	movs	r1, #2
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff beef 	b.w	d4cf4 <network_disconnect>

000d4f16 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f16:	2300      	movs	r3, #0
   d4f18:	461a      	mov	r2, r3
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff beda 	b.w	d4cd4 <network_connect>

000d4f20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f20:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f22:	2203      	movs	r2, #3
   d4f24:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f26:	4a02      	ldr	r2, [pc, #8]	; (d4f30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f28:	601a      	str	r2, [r3, #0]
   d4f2a:	4770      	bx	lr
   d4f2c:	2003e39c 	.word	0x2003e39c
   d4f30:	000d834c 	.word	0x000d834c

000d4f34 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4f34:	4770      	bx	lr

000d4f36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f38:	4606      	mov	r6, r0
   d4f3a:	4615      	mov	r5, r2
   d4f3c:	460c      	mov	r4, r1
   d4f3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f40:	42bc      	cmp	r4, r7
   d4f42:	d006      	beq.n	d4f52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f44:	6833      	ldr	r3, [r6, #0]
   d4f46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f4a:	689b      	ldr	r3, [r3, #8]
   d4f4c:	4630      	mov	r0, r6
   d4f4e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f50:	e7f6      	b.n	d4f40 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f52:	4628      	mov	r0, r5
   d4f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f56 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f56:	2200      	movs	r2, #0
   d4f58:	7c00      	ldrb	r0, [r0, #16]
   d4f5a:	f7ff bced 	b.w	d4938 <HAL_I2C_Write_Data>

000d4f5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f5e:	2100      	movs	r1, #0
   d4f60:	7c00      	ldrb	r0, [r0, #16]
   d4f62:	f7ff bcf1 	b.w	d4948 <HAL_I2C_Available_Data>

000d4f66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f66:	2100      	movs	r1, #0
   d4f68:	7c00      	ldrb	r0, [r0, #16]
   d4f6a:	f7ff bcf5 	b.w	d4958 <HAL_I2C_Read_Data>

000d4f6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f6e:	2100      	movs	r1, #0
   d4f70:	7c00      	ldrb	r0, [r0, #16]
   d4f72:	f7ff bcf9 	b.w	d4968 <HAL_I2C_Peek_Data>

000d4f76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f76:	2100      	movs	r1, #0
   d4f78:	7c00      	ldrb	r0, [r0, #16]
   d4f7a:	f7ff bcfd 	b.w	d4978 <HAL_I2C_Flush_Data>

000d4f7e <_ZN7TwoWireD0Ev>:
   d4f7e:	b510      	push	{r4, lr}
   d4f80:	2114      	movs	r1, #20
   d4f82:	4604      	mov	r4, r0
   d4f84:	f002 fd85 	bl	d7a92 <_ZdlPvj>
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4f8c:	b510      	push	{r4, lr}
   d4f8e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f94:	4608      	mov	r0, r1
   d4f96:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f98:	2100      	movs	r1, #0
   d4f9a:	4b04      	ldr	r3, [pc, #16]	; (d4fac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4f9c:	7420      	strb	r0, [r4, #16]
   d4f9e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4fa0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4fa2:	f7ff fcf9 	bl	d4998 <HAL_I2C_Init>

}
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd10      	pop	{r4, pc}
   d4faa:	bf00      	nop
   d4fac:	000d8380 	.word	0x000d8380

000d4fb0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4fb0:	2100      	movs	r1, #0
   d4fb2:	7c00      	ldrb	r0, [r0, #16]
   d4fb4:	f7ff bce8 	b.w	d4988 <HAL_I2C_Is_Enabled>

000d4fb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fb8:	4770      	bx	lr

000d4fba <_ZN9IPAddressD0Ev>:
   d4fba:	b510      	push	{r4, lr}
   d4fbc:	2118      	movs	r1, #24
   d4fbe:	4604      	mov	r4, r0
   d4fc0:	f002 fd67 	bl	d7a92 <_ZdlPvj>
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bd10      	pop	{r4, pc}

000d4fc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fca:	7d03      	ldrb	r3, [r0, #20]
   d4fcc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fce:	b08d      	sub	sp, #52	; 0x34
   d4fd0:	460e      	mov	r6, r1
   d4fd2:	f100 0704 	add.w	r7, r0, #4
   d4fd6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fda:	d002      	beq.n	d4fe2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fdc:	f100 0508 	add.w	r5, r0, #8
   d4fe0:	e018      	b.n	d5014 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fe2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fe4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fe6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fea:	232f      	movs	r3, #47	; 0x2f
   d4fec:	462a      	mov	r2, r5
   d4fee:	200a      	movs	r0, #10
   d4ff0:	f7ff fd02 	bl	d49f8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ff4:	4628      	mov	r0, r5
   d4ff6:	f002 ff83 	bl	d7f00 <strlen>
   d4ffa:	6833      	ldr	r3, [r6, #0]
   d4ffc:	4602      	mov	r2, r0
   d4ffe:	68db      	ldr	r3, [r3, #12]
   d5000:	4629      	mov	r1, r5
   d5002:	4630      	mov	r0, r6
   d5004:	4798      	blx	r3
   d5006:	e00f      	b.n	d5028 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5008:	b124      	cbz	r4, d5014 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d500a:	212e      	movs	r1, #46	; 0x2e
   d500c:	4630      	mov	r0, r6
   d500e:	f001 fe25 	bl	d6c5c <_ZN5Print5printEc>
   d5012:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5014:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5018:	220a      	movs	r2, #10
   d501a:	4630      	mov	r0, r6
   d501c:	f001 fe64 	bl	d6ce8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5020:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5022:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5024:	d1f0      	bne.n	d5008 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5026:	4620      	mov	r0, r4
    }
    return n;
}
   d5028:	b00d      	add	sp, #52	; 0x34
   d502a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d502c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d502c:	b510      	push	{r4, lr}
   d502e:	4b05      	ldr	r3, [pc, #20]	; (d5044 <_ZN9IPAddressC1Ev+0x18>)
   d5030:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5032:	2211      	movs	r2, #17
   d5034:	f840 3b04 	str.w	r3, [r0], #4
   d5038:	2100      	movs	r1, #0
   d503a:	f002 fed4 	bl	d7de6 <memset>
{
    clear();
}
   d503e:	4620      	mov	r0, r4
   d5040:	bd10      	pop	{r4, pc}
   d5042:	bf00      	nop
   d5044:	000d83a8 	.word	0x000d83a8

000d5048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5048:	4603      	mov	r3, r0
   d504a:	4a07      	ldr	r2, [pc, #28]	; (d5068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d504c:	b510      	push	{r4, lr}
   d504e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5052:	f101 0210 	add.w	r2, r1, #16
   d5056:	f851 4b04 	ldr.w	r4, [r1], #4
   d505a:	f843 4b04 	str.w	r4, [r3], #4
   d505e:	4291      	cmp	r1, r2
   d5060:	d1f9      	bne.n	d5056 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5062:	780a      	ldrb	r2, [r1, #0]
   d5064:	701a      	strb	r2, [r3, #0]
}
   d5066:	bd10      	pop	{r4, pc}
   d5068:	000d83a8 	.word	0x000d83a8

000d506c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d506c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d506e:	2b04      	cmp	r3, #4
   d5070:	d101      	bne.n	d5076 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5072:	6840      	ldr	r0, [r0, #4]
   d5074:	e008      	b.n	d5088 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5076:	2b06      	cmp	r3, #6
   d5078:	d10a      	bne.n	d5090 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d507a:	6843      	ldr	r3, [r0, #4]
   d507c:	b953      	cbnz	r3, d5094 <_ZNK9IPAddresscvbEv+0x28>
   d507e:	6883      	ldr	r3, [r0, #8]
   d5080:	b943      	cbnz	r3, d5094 <_ZNK9IPAddresscvbEv+0x28>
   d5082:	68c3      	ldr	r3, [r0, #12]
   d5084:	b933      	cbnz	r3, d5094 <_ZNK9IPAddresscvbEv+0x28>
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	3000      	adds	r0, #0
   d508a:	bf18      	it	ne
   d508c:	2001      	movne	r0, #1
   d508e:	4770      	bx	lr
    } else {
        return false;
   d5090:	2000      	movs	r0, #0
   d5092:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5094:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5096:	4770      	bx	lr

000d5098 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5098:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d509a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d509e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50aa:	2304      	movs	r3, #4
   d50ac:	6041      	str	r1, [r0, #4]
   d50ae:	7503      	strb	r3, [r0, #20]
   d50b0:	bd10      	pop	{r4, pc}

000d50b2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50b4:	780d      	ldrb	r5, [r1, #0]
   d50b6:	788b      	ldrb	r3, [r1, #2]
   d50b8:	784a      	ldrb	r2, [r1, #1]
   d50ba:	78c9      	ldrb	r1, [r1, #3]
   d50bc:	9100      	str	r1, [sp, #0]
   d50be:	4629      	mov	r1, r5
   d50c0:	f7ff ffea 	bl	d5098 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50c4:	b003      	add	sp, #12
   d50c6:	bd30      	pop	{r4, r5, pc}

000d50c8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d50c8:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d50cc:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d50ce:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d50d2:	2901      	cmp	r1, #1
   d50d4:	4610      	mov	r0, r2
   d50d6:	d104      	bne.n	d50e2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d50d8:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d50dc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d50e0:	e004      	b.n	d50ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d50e2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d50e4:	bf04      	itt	eq
   d50e6:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d50ea:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d50ec:	3b01      	subs	r3, #1
   d50ee:	f102 0210 	add.w	r2, r2, #16
   d50f2:	d1ec      	bne.n	d50ce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d50f4:	4770      	bx	lr

000d50f6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d50f6:	b40e      	push	{r1, r2, r3}
   d50f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50fc:	b087      	sub	sp, #28
   d50fe:	af00      	add	r7, sp, #0
   d5100:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d5104:	4605      	mov	r5, r0
   d5106:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d510a:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d510c:	4623      	mov	r3, r4
   d510e:	4632      	mov	r2, r6
   d5110:	2110      	movs	r1, #16
   d5112:	f107 0008 	add.w	r0, r7, #8
   d5116:	f7ff fe45 	bl	d4da4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d511a:	280f      	cmp	r0, #15
   d511c:	d916      	bls.n	d514c <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d511e:	f100 0308 	add.w	r3, r0, #8
   d5122:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d5126:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d5128:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d512c:	4632      	mov	r2, r6
   d512e:	1c41      	adds	r1, r0, #1
   d5130:	4623      	mov	r3, r4
   d5132:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d5134:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5136:	f7ff fe35 	bl	d4da4 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d513a:	1e02      	subs	r2, r0, #0
   d513c:	dd04      	ble.n	d5148 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d513e:	682b      	ldr	r3, [r5, #0]
   d5140:	4669      	mov	r1, sp
   d5142:	689b      	ldr	r3, [r3, #8]
   d5144:	4628      	mov	r0, r5
   d5146:	4798      	blx	r3
   d5148:	46c5      	mov	sp, r8
   d514a:	e007      	b.n	d515c <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d514c:	b130      	cbz	r0, d515c <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d514e:	682b      	ldr	r3, [r5, #0]
   d5150:	4602      	mov	r2, r0
   d5152:	689b      	ldr	r3, [r3, #8]
   d5154:	f107 0108 	add.w	r1, r7, #8
   d5158:	4628      	mov	r0, r5
   d515a:	4798      	blx	r3
    }
}
   d515c:	371c      	adds	r7, #28
   d515e:	46bd      	mov	sp, r7
   d5160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5164:	b003      	add	sp, #12
   d5166:	4770      	bx	lr

000d5168 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5168:	b513      	push	{r0, r1, r4, lr}
   d516a:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d516c:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d516e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5172:	6894      	ldr	r4, [r2, #8]
   d5174:	4619      	mov	r1, r3
   d5176:	2201      	movs	r2, #1
   d5178:	47a0      	blx	r4
}
   d517a:	b002      	add	sp, #8
   d517c:	bd10      	pop	{r4, pc}

000d517e <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d517e:	6883      	ldr	r3, [r0, #8]
   d5180:	b1fb      	cbz	r3, d51c2 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5182:	781a      	ldrb	r2, [r3, #0]
   d5184:	2a03      	cmp	r2, #3
   d5186:	d81a      	bhi.n	d51be <_ZNK5spark9JSONValue4typeEv+0x40>
   d5188:	e8df f002 	tbb	[pc, r2]
   d518c:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d5190:	2005      	movs	r0, #5
   d5192:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5194:	6802      	ldr	r2, [r0, #0]
   d5196:	685b      	ldr	r3, [r3, #4]
   d5198:	6852      	ldr	r2, [r2, #4]
   d519a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d519c:	282d      	cmp	r0, #45	; 0x2d
   d519e:	d014      	beq.n	d51ca <_ZNK5spark9JSONValue4typeEv+0x4c>
   d51a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d51a4:	2b09      	cmp	r3, #9
   d51a6:	d910      	bls.n	d51ca <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d51a8:	2874      	cmp	r0, #116	; 0x74
   d51aa:	d010      	beq.n	d51ce <_ZNK5spark9JSONValue4typeEv+0x50>
   d51ac:	2866      	cmp	r0, #102	; 0x66
   d51ae:	d00e      	beq.n	d51ce <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d51b0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d51b4:	4258      	negs	r0, r3
   d51b6:	4158      	adcs	r0, r3
   d51b8:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d51ba:	2006      	movs	r0, #6
   d51bc:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d51be:	2000      	movs	r0, #0
   d51c0:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d51c2:	4618      	mov	r0, r3
   d51c4:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d51c6:	2004      	movs	r0, #4
   d51c8:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d51ca:	2003      	movs	r0, #3
   d51cc:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d51ce:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d51d0:	4770      	bx	lr

000d51d2 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d51d2:	b510      	push	{r4, lr}
   d51d4:	4604      	mov	r4, r0
    switch (type()) {
   d51d6:	f7ff ffd2 	bl	d517e <_ZNK5spark9JSONValue4typeEv>
   d51da:	2802      	cmp	r0, #2
   d51dc:	d00d      	beq.n	d51fa <_ZNK5spark9JSONValue5toIntEv+0x28>
   d51de:	d316      	bcc.n	d520e <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d51e0:	2804      	cmp	r0, #4
   d51e2:	d814      	bhi.n	d520e <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d51e4:	6822      	ldr	r2, [r4, #0]
   d51e6:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d51e8:	6850      	ldr	r0, [r2, #4]
   d51ea:	685b      	ldr	r3, [r3, #4]
   d51ec:	220a      	movs	r2, #10
   d51ee:	2100      	movs	r1, #0
   d51f0:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d51f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d51f6:	f002 bf5f 	b.w	d80b8 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d51fa:	6822      	ldr	r2, [r4, #0]
   d51fc:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d51fe:	6852      	ldr	r2, [r2, #4]
   d5200:	685b      	ldr	r3, [r3, #4]
   d5202:	5cd0      	ldrb	r0, [r2, r3]
   d5204:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5208:	4258      	negs	r0, r3
   d520a:	4158      	adcs	r0, r3
   d520c:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d520e:	2000      	movs	r0, #0
    }
}
   d5210:	bd10      	pop	{r4, pc}

000d5212 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d5212:	b510      	push	{r4, lr}
    if (!n_) {
   d5214:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d5216:	4604      	mov	r4, r0
    if (!n_) {
   d5218:	b15b      	cbz	r3, d5232 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d521a:	6880      	ldr	r0, [r0, #8]
   d521c:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d521e:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d5220:	3010      	adds	r0, #16
   d5222:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5224:	6120      	str	r0, [r4, #16]
    --n_;
   d5226:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5228:	b12b      	cbz	r3, d5236 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d522a:	f7ff ff4d 	bl	d50c8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d522e:	60a0      	str	r0, [r4, #8]
   d5230:	e001      	b.n	d5236 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d5232:	4618      	mov	r0, r3
   d5234:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d5236:	2001      	movs	r0, #1
}
   d5238:	bd10      	pop	{r4, pc}

000d523a <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d523a:	b510      	push	{r4, lr}
    write('}');
   d523c:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d523e:	4604      	mov	r4, r0
    write('}');
   d5240:	f7ff ff92 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5244:	2301      	movs	r3, #1
   d5246:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5248:	4620      	mov	r0, r4
   d524a:	bd10      	pop	{r4, pc}

000d524c <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d524c:	b508      	push	{r3, lr}
    switch (state_) {
   d524e:	7903      	ldrb	r3, [r0, #4]
   d5250:	2b01      	cmp	r3, #1
   d5252:	d002      	beq.n	d525a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d5254:	2b02      	cmp	r3, #2
   d5256:	d002      	beq.n	d525e <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d5258:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d525a:	212c      	movs	r1, #44	; 0x2c
   d525c:	e000      	b.n	d5260 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d525e:	213a      	movs	r1, #58	; 0x3a
   d5260:	f7ff ff82 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
   d5264:	bd08      	pop	{r3, pc}

000d5266 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d5266:	b510      	push	{r4, lr}
   d5268:	4604      	mov	r4, r0
    writeSeparator();
   d526a:	f7ff ffef 	bl	d524c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d526e:	4620      	mov	r0, r4
   d5270:	217b      	movs	r1, #123	; 0x7b
   d5272:	f7ff ff79 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d5276:	2300      	movs	r3, #0
   d5278:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d527a:	4620      	mov	r0, r4
   d527c:	bd10      	pop	{r4, pc}
	...

000d5280 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5280:	b538      	push	{r3, r4, r5, lr}
   d5282:	4604      	mov	r4, r0
   d5284:	460d      	mov	r5, r1
    writeSeparator();
   d5286:	f7ff ffe1 	bl	d524c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d528a:	6823      	ldr	r3, [r4, #0]
   d528c:	4904      	ldr	r1, [pc, #16]	; (d52a0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d528e:	68db      	ldr	r3, [r3, #12]
   d5290:	4620      	mov	r0, r4
   d5292:	462a      	mov	r2, r5
   d5294:	4798      	blx	r3
    state_ = NEXT;
   d5296:	2301      	movs	r3, #1
   d5298:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d529a:	4620      	mov	r0, r4
   d529c:	bd38      	pop	{r3, r4, r5, pc}
   d529e:	bf00      	nop
   d52a0:	000d857d 	.word	0x000d857d

000d52a4 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d52a4:	b538      	push	{r3, r4, r5, lr}
   d52a6:	4604      	mov	r4, r0
   d52a8:	460d      	mov	r5, r1
    writeSeparator();
   d52aa:	f7ff ffcf 	bl	d524c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d52ae:	6823      	ldr	r3, [r4, #0]
   d52b0:	4904      	ldr	r1, [pc, #16]	; (d52c4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d52b2:	68db      	ldr	r3, [r3, #12]
   d52b4:	4620      	mov	r0, r4
   d52b6:	462a      	mov	r2, r5
   d52b8:	4798      	blx	r3
    state_ = NEXT;
   d52ba:	2301      	movs	r3, #1
   d52bc:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d52be:	4620      	mov	r0, r4
   d52c0:	bd38      	pop	{r3, r4, r5, pc}
   d52c2:	bf00      	nop
   d52c4:	000d83c3 	.word	0x000d83c3

000d52c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d52c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52ca:	460d      	mov	r5, r1
   d52cc:	4617      	mov	r7, r2
    write('"');
   d52ce:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d52d0:	4604      	mov	r4, r0
   d52d2:	442f      	add	r7, r5
    write('"');
   d52d4:	f7ff ff48 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
   d52d8:	462a      	mov	r2, r5
    const char* const end = str + size;
   d52da:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d52dc:	42ba      	cmp	r2, r7
   d52de:	d038      	beq.n	d5352 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d52e0:	4616      	mov	r6, r2
   d52e2:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d52e6:	2d22      	cmp	r5, #34	; 0x22
   d52e8:	d003      	beq.n	d52f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d52ea:	2d5c      	cmp	r5, #92	; 0x5c
   d52ec:	d001      	beq.n	d52f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d52ee:	2d1f      	cmp	r5, #31
   d52f0:	d82d      	bhi.n	d534e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d52f2:	6823      	ldr	r3, [r4, #0]
   d52f4:	1a52      	subs	r2, r2, r1
   d52f6:	689b      	ldr	r3, [r3, #8]
   d52f8:	4620      	mov	r0, r4
   d52fa:	4798      	blx	r3
            write('\\');
   d52fc:	215c      	movs	r1, #92	; 0x5c
   d52fe:	4620      	mov	r0, r4
   d5300:	f7ff ff32 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d5304:	2d0c      	cmp	r5, #12
   d5306:	d019      	beq.n	d533c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d5308:	d807      	bhi.n	d531a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d530a:	2d09      	cmp	r5, #9
   d530c:	d00f      	beq.n	d532e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d530e:	2d0a      	cmp	r5, #10
   d5310:	d012      	beq.n	d5338 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d5312:	2d08      	cmp	r5, #8
   d5314:	d114      	bne.n	d5340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5316:	2162      	movs	r1, #98	; 0x62
   d5318:	e00a      	b.n	d5330 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d531a:	2d22      	cmp	r5, #34	; 0x22
   d531c:	d005      	beq.n	d532a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d531e:	2d5c      	cmp	r5, #92	; 0x5c
   d5320:	d003      	beq.n	d532a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d5322:	2d0d      	cmp	r5, #13
   d5324:	d10c      	bne.n	d5340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d5326:	2172      	movs	r1, #114	; 0x72
   d5328:	e002      	b.n	d5330 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d532a:	4629      	mov	r1, r5
   d532c:	e000      	b.n	d5330 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d532e:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5330:	4620      	mov	r0, r4
   d5332:	f7ff ff19 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
                break;
   d5336:	e009      	b.n	d534c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d5338:	216e      	movs	r1, #110	; 0x6e
   d533a:	e7f9      	b.n	d5330 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d533c:	2166      	movs	r1, #102	; 0x66
   d533e:	e7f7      	b.n	d5330 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d5340:	6823      	ldr	r3, [r4, #0]
   d5342:	490a      	ldr	r1, [pc, #40]	; (d536c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d5344:	68db      	ldr	r3, [r3, #12]
   d5346:	462a      	mov	r2, r5
   d5348:	4620      	mov	r0, r4
   d534a:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d534c:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d534e:	4632      	mov	r2, r6
   d5350:	e7c4      	b.n	d52dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d5352:	4291      	cmp	r1, r2
   d5354:	d004      	beq.n	d5360 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d5356:	6823      	ldr	r3, [r4, #0]
   d5358:	1a52      	subs	r2, r2, r1
   d535a:	689d      	ldr	r5, [r3, #8]
   d535c:	4620      	mov	r0, r4
   d535e:	47a8      	blx	r5
    }
    write('"');
   d5360:	2122      	movs	r1, #34	; 0x22
   d5362:	4620      	mov	r0, r4
   d5364:	f7ff ff00 	bl	d5168 <_ZN5spark10JSONWriter5writeEc>
   d5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d536a:	bf00      	nop
   d536c:	000d83ce 	.word	0x000d83ce

000d5370 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d5370:	b570      	push	{r4, r5, r6, lr}
   d5372:	4604      	mov	r4, r0
   d5374:	460d      	mov	r5, r1
   d5376:	4616      	mov	r6, r2
    writeSeparator();
   d5378:	f7ff ff68 	bl	d524c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d537c:	4620      	mov	r0, r4
   d537e:	4632      	mov	r2, r6
   d5380:	4629      	mov	r1, r5
   d5382:	f7ff ffa1 	bl	d52c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5386:	2302      	movs	r3, #2
   d5388:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d538a:	4620      	mov	r0, r4
   d538c:	bd70      	pop	{r4, r5, r6, pc}

000d538e <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d538e:	b570      	push	{r4, r5, r6, lr}
   d5390:	4604      	mov	r4, r0
   d5392:	460d      	mov	r5, r1
   d5394:	4616      	mov	r6, r2
    writeSeparator();
   d5396:	f7ff ff59 	bl	d524c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d539a:	4620      	mov	r0, r4
   d539c:	4632      	mov	r2, r6
   d539e:	4629      	mov	r1, r5
   d53a0:	f7ff ff92 	bl	d52c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d53a4:	2301      	movs	r3, #1
   d53a6:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d53a8:	4620      	mov	r0, r4
   d53aa:	bd70      	pop	{r4, r5, r6, pc}

000d53ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d53ac:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d53ae:	2300      	movs	r3, #0
   d53b0:	4604      	mov	r4, r0
   d53b2:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d53b4:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d53b6:	4810      	ldr	r0, [pc, #64]	; (d53f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d53b8:	60a0      	str	r0, [r4, #8]
   d53ba:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d53bc:	b1d1      	cbz	r1, d53f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d53be:	780b      	ldrb	r3, [r1, #0]
   d53c0:	2b03      	cmp	r3, #3
   d53c2:	d006      	beq.n	d53d2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d53c4:	b9b3      	cbnz	r3, d53f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d53c6:	6813      	ldr	r3, [r2, #0]
   d53c8:	6858      	ldr	r0, [r3, #4]
   d53ca:	684b      	ldr	r3, [r1, #4]
   d53cc:	5cc3      	ldrb	r3, [r0, r3]
   d53ce:	2b6e      	cmp	r3, #110	; 0x6e
   d53d0:	d008      	beq.n	d53e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d53d2:	6813      	ldr	r3, [r2, #0]
   d53d4:	6858      	ldr	r0, [r3, #4]
   d53d6:	684b      	ldr	r3, [r1, #4]
   d53d8:	4403      	add	r3, r0
   d53da:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d53dc:	688b      	ldr	r3, [r1, #8]
   d53de:	6849      	ldr	r1, [r1, #4]
   d53e0:	1a5b      	subs	r3, r3, r1
   d53e2:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d53e4:	4611      	mov	r1, r2
   d53e6:	4620      	mov	r0, r4
   d53e8:	f851 3b04 	ldr.w	r3, [r1], #4
   d53ec:	f840 3b04 	str.w	r3, [r0], #4
   d53f0:	f7ff fd0e 	bl	d4e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d53f4:	4620      	mov	r0, r4
   d53f6:	bd10      	pop	{r4, pc}
   d53f8:	000d84c0 	.word	0x000d84c0

000d53fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d53fc:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d53fe:	b510      	push	{r4, lr}
   d5400:	4604      	mov	r4, r0
   d5402:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5404:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5406:	6083      	str	r3, [r0, #8]
   d5408:	60c3      	str	r3, [r0, #12]
   d540a:	6103      	str	r3, [r0, #16]
   d540c:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d540e:	b171      	cbz	r1, d542e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d5410:	780b      	ldrb	r3, [r1, #0]
   d5412:	2b01      	cmp	r3, #1
   d5414:	d10b      	bne.n	d542e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5416:	f101 0310 	add.w	r3, r1, #16
   d541a:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d541c:	68cb      	ldr	r3, [r1, #12]
   d541e:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5420:	4611      	mov	r1, r2
   d5422:	f851 3b04 	ldr.w	r3, [r1], #4
   d5426:	f840 3b04 	str.w	r3, [r0], #4
   d542a:	f7ff fcf1 	bl	d4e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d542e:	4620      	mov	r0, r4
   d5430:	bd10      	pop	{r4, pc}

000d5432 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5432:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5434:	b510      	push	{r4, lr}
   d5436:	4604      	mov	r4, r0
   d5438:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d543a:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d543c:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d543e:	b131      	cbz	r1, d544e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5440:	4611      	mov	r1, r2
   d5442:	f851 3b04 	ldr.w	r3, [r1], #4
   d5446:	f840 3b04 	str.w	r3, [r0], #4
   d544a:	f7ff fce1 	bl	d4e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d544e:	4620      	mov	r0, r4
   d5450:	bd10      	pop	{r4, pc}

000d5452 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5452:	6880      	ldr	r0, [r0, #8]
   d5454:	6803      	ldr	r3, [r0, #0]
   d5456:	68db      	ldr	r3, [r3, #12]
   d5458:	4718      	bx	r3

000d545a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d545a:	4770      	bx	lr

000d545c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d545c:	b119      	cbz	r1, d5466 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d545e:	680b      	ldr	r3, [r1, #0]
   d5460:	4608      	mov	r0, r1
   d5462:	685b      	ldr	r3, [r3, #4]
   d5464:	4718      	bx	r3
   d5466:	4770      	bx	lr

000d5468 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5468:	b119      	cbz	r1, d5472 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d546a:	680b      	ldr	r3, [r1, #0]
   d546c:	4608      	mov	r0, r1
   d546e:	685b      	ldr	r3, [r3, #4]
   d5470:	4718      	bx	r3
   d5472:	4770      	bx	lr

000d5474 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5474:	4770      	bx	lr

000d5476 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5476:	4770      	bx	lr

000d5478 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5478:	4770      	bx	lr

000d547a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d547a:	b538      	push	{r3, r4, r5, lr}
   d547c:	4604      	mov	r4, r0
   d547e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5480:	6800      	ldr	r0, [r0, #0]
   d5482:	212e      	movs	r1, #46	; 0x2e
   d5484:	f002 fd28 	bl	d7ed8 <strchrnul>
    size = s - category;
   d5488:	6823      	ldr	r3, [r4, #0]
   d548a:	1ac3      	subs	r3, r0, r3
   d548c:	602b      	str	r3, [r5, #0]
    if (size) {
   d548e:	b123      	cbz	r3, d549a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5490:	7803      	ldrb	r3, [r0, #0]
   d5492:	b103      	cbz	r3, d5496 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5494:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5496:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5498:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d549a:	4618      	mov	r0, r3
}
   d549c:	bd38      	pop	{r3, r4, r5, pc}

000d549e <_ZN5spark16JSONStreamWriterD0Ev>:
   d549e:	b510      	push	{r4, lr}
   d54a0:	210c      	movs	r1, #12
   d54a2:	4604      	mov	r4, r0
   d54a4:	f002 faf5 	bl	d7a92 <_ZdlPvj>
   d54a8:	4620      	mov	r0, r4
   d54aa:	bd10      	pop	{r4, pc}

000d54ac <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d54ac:	b510      	push	{r4, lr}
   d54ae:	2104      	movs	r1, #4
   d54b0:	4604      	mov	r4, r0
   d54b2:	f002 faee 	bl	d7a92 <_ZdlPvj>
   d54b6:	4620      	mov	r0, r4
   d54b8:	bd10      	pop	{r4, pc}

000d54ba <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d54ba:	b510      	push	{r4, lr}
   d54bc:	2104      	movs	r1, #4
   d54be:	4604      	mov	r4, r0
   d54c0:	f002 fae7 	bl	d7a92 <_ZdlPvj>
   d54c4:	4620      	mov	r0, r4
   d54c6:	bd10      	pop	{r4, pc}

000d54c8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d54c8:	b538      	push	{r3, r4, r5, lr}
   d54ca:	460c      	mov	r4, r1
   d54cc:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d54ce:	f002 f99b 	bl	d7808 <_Z16_fetch_usbserialv>
   d54d2:	4284      	cmp	r4, r0
   d54d4:	d00d      	beq.n	d54f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d54d6:	f002 f90b 	bl	d76f0 <_Z22__fetch_global_Serial1v>
   d54da:	4284      	cmp	r4, r0
   d54dc:	d105      	bne.n	d54ea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d54de:	f002 f907 	bl	d76f0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d54e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d54e6:	f002 b8fc 	b.w	d76e2 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d54ea:	4621      	mov	r1, r4
   d54ec:	4628      	mov	r0, r5
   d54ee:	f7ff ffbb 	bl	d5468 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d54f2:	bd38      	pop	{r3, r4, r5, pc}

000d54f4 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d54f4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d54f6:	f002 fcf9 	bl	d7eec <strcmp>
}
   d54fa:	fab0 f080 	clz	r0, r0
   d54fe:	0940      	lsrs	r0, r0, #5
   d5500:	bd08      	pop	{r3, pc}

000d5502 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5502:	b538      	push	{r3, r4, r5, lr}
   d5504:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5506:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5508:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d550a:	f002 fcf9 	bl	d7f00 <strlen>
   d550e:	4621      	mov	r1, r4
   d5510:	4602      	mov	r2, r0
   d5512:	4628      	mov	r0, r5
}
   d5514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5518:	f7ff bf39 	b.w	d538e <_ZN5spark10JSONWriter5valueEPKcj>

000d551c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d551c:	6800      	ldr	r0, [r0, #0]
   d551e:	f7ff b9a3 	b.w	d4868 <os_mutex_recursive_lock>

000d5522 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5522:	b570      	push	{r4, r5, r6, lr}
   d5524:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5526:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5528:	460d      	mov	r5, r1
    write(str, strlen(str));
   d552a:	f002 fce9 	bl	d7f00 <strlen>
   d552e:	6823      	ldr	r3, [r4, #0]
   d5530:	4602      	mov	r2, r0
   d5532:	4629      	mov	r1, r5
   d5534:	4620      	mov	r0, r4
   d5536:	68db      	ldr	r3, [r3, #12]
}
   d5538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d553c:	4718      	bx	r3

000d553e <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d553e:	b513      	push	{r0, r1, r4, lr}
   d5540:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5542:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5544:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5548:	68d4      	ldr	r4, [r2, #12]
   d554a:	4619      	mov	r1, r3
   d554c:	2201      	movs	r2, #1
   d554e:	47a0      	blx	r4
}
   d5550:	b002      	add	sp, #8
   d5552:	bd10      	pop	{r4, pc}

000d5554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5558:	6845      	ldr	r5, [r0, #4]
   d555a:	6807      	ldr	r7, [r0, #0]
   d555c:	b085      	sub	sp, #20
   d555e:	4691      	mov	r9, r2
   d5560:	2214      	movs	r2, #20
   d5562:	4355      	muls	r5, r2
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	10ab      	asrs	r3, r5, #2
   d5568:	4d19      	ldr	r5, [pc, #100]	; (d55d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d556a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d556c:	435d      	muls	r5, r3
   d556e:	468b      	mov	fp, r1
   d5570:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5572:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5574:	2d00      	cmp	r5, #0
   d5576:	9303      	str	r3, [sp, #12]
   d5578:	dd23      	ble.n	d55c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d557a:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d557c:	106e      	asrs	r6, r5, #1
   d557e:	fb03 f006 	mul.w	r0, r3, r6
   d5582:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5586:	464a      	mov	r2, r9
   d5588:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d558c:	5820      	ldr	r0, [r4, r0]
   d558e:	45d1      	cmp	r9, sl
   d5590:	bf28      	it	cs
   d5592:	4652      	movcs	r2, sl
   d5594:	4659      	mov	r1, fp
   d5596:	f002 fcbb 	bl	d7f10 <strncmp>
                if (cmp == 0) {
   d559a:	9b03      	ldr	r3, [sp, #12]
   d559c:	b948      	cbnz	r0, d55b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d559e:	45d1      	cmp	r9, sl
   d55a0:	d103      	bne.n	d55aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d55a2:	9a01      	ldr	r2, [sp, #4]
   d55a4:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d55a6:	4635      	mov	r5, r6
   d55a8:	e7e4      	b.n	d5574 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d55aa:	bf8c      	ite	hi
   d55ac:	2001      	movhi	r0, #1
   d55ae:	2000      	movls	r0, #0
   d55b0:	e000      	b.n	d55b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d55b2:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d55b4:	2800      	cmp	r0, #0
   d55b6:	d0f6      	beq.n	d55a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d55b8:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d55ba:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d55be:	3e01      	subs	r6, #1
   d55c0:	e7f1      	b.n	d55a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d55c2:	1be4      	subs	r4, r4, r7
}
   d55c4:	4802      	ldr	r0, [pc, #8]	; (d55d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d55c6:	10a4      	asrs	r4, r4, #2
}
   d55c8:	4360      	muls	r0, r4
   d55ca:	b005      	add	sp, #20
   d55cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55d0:	cccccccd 	.word	0xcccccccd

000d55d4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d55d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55d6:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d55d8:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d55da:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d55dc:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d55de:	b313      	cbz	r3, d5626 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d55e0:	b309      	cbz	r1, d5626 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d55e2:	af04      	add	r7, sp, #16
   d55e4:	2300      	movs	r3, #0
   d55e6:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d55ea:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d55ee:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d55f0:	4639      	mov	r1, r7
   d55f2:	a801      	add	r0, sp, #4
   d55f4:	f7ff ff41 	bl	d547a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d55f8:	4601      	mov	r1, r0
   d55fa:	b1a0      	cbz	r0, d5626 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d55fc:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d55fe:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5600:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5604:	4620      	mov	r0, r4
   d5606:	f7ff ffa5 	bl	d5554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d560a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d560e:	b153      	cbz	r3, d5626 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5610:	6823      	ldr	r3, [r4, #0]
   d5612:	2414      	movs	r4, #20
   d5614:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5618:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d561a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d561e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5620:	bfa8      	it	ge
   d5622:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5624:	e7e4      	b.n	d55f0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5626:	4630      	mov	r0, r6
   d5628:	b005      	add	sp, #20
   d562a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d562c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d562c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d562e:	4c09      	ldr	r4, [pc, #36]	; (d5654 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5630:	6823      	ldr	r3, [r4, #0]
   d5632:	07db      	lsls	r3, r3, #31
   d5634:	d40b      	bmi.n	d564e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5636:	4620      	mov	r0, r4
   d5638:	f7fe fd40 	bl	d40bc <__cxa_guard_acquire>
   d563c:	b138      	cbz	r0, d564e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d563e:	4620      	mov	r0, r4
   d5640:	f7fe fd41 	bl	d40c6 <__cxa_guard_release>
   d5644:	4a04      	ldr	r2, [pc, #16]	; (d5658 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5646:	4905      	ldr	r1, [pc, #20]	; (d565c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5648:	4805      	ldr	r0, [pc, #20]	; (d5660 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d564a:	f002 fa1d 	bl	d7a88 <__aeabi_atexit>
    return &factory;
}
   d564e:	4804      	ldr	r0, [pc, #16]	; (d5660 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5650:	bd10      	pop	{r4, pc}
   d5652:	bf00      	nop
   d5654:	2003e3a4 	.word	0x2003e3a4
   d5658:	2003e370 	.word	0x2003e370
   d565c:	000d5477 	.word	0x000d5477
   d5660:	2003e300 	.word	0x2003e300

000d5664 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5664:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5666:	4c09      	ldr	r4, [pc, #36]	; (d568c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5668:	6823      	ldr	r3, [r4, #0]
   d566a:	07db      	lsls	r3, r3, #31
   d566c:	d40b      	bmi.n	d5686 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d566e:	4620      	mov	r0, r4
   d5670:	f7fe fd24 	bl	d40bc <__cxa_guard_acquire>
   d5674:	b138      	cbz	r0, d5686 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5676:	4620      	mov	r0, r4
   d5678:	f7fe fd25 	bl	d40c6 <__cxa_guard_release>
   d567c:	4a04      	ldr	r2, [pc, #16]	; (d5690 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d567e:	4905      	ldr	r1, [pc, #20]	; (d5694 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5680:	4805      	ldr	r0, [pc, #20]	; (d5698 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5682:	f002 fa01 	bl	d7a88 <__aeabi_atexit>
    return &factory;
}
   d5686:	4804      	ldr	r0, [pc, #16]	; (d5698 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5688:	bd10      	pop	{r4, pc}
   d568a:	bf00      	nop
   d568c:	2003e3d4 	.word	0x2003e3d4
   d5690:	2003e370 	.word	0x2003e370
   d5694:	000d5475 	.word	0x000d5475
   d5698:	2003e2fc 	.word	0x2003e2fc

000d569c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d569c:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d569e:	2500      	movs	r5, #0
   d56a0:	4604      	mov	r4, r0
   d56a2:	6005      	str	r5, [r0, #0]
   d56a4:	6045      	str	r5, [r0, #4]
   d56a6:	6085      	str	r5, [r0, #8]
   d56a8:	6105      	str	r5, [r0, #16]
   d56aa:	6145      	str	r5, [r0, #20]
   d56ac:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56ae:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d56b2:	f7ff f8d1 	bl	d4858 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d56b6:	f7ff ffb9 	bl	d562c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d56ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d56bc:	f7ff ffd2 	bl	d5664 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d56c0:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d56c2:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d56c4:	4620      	mov	r0, r4
   d56c6:	bd38      	pop	{r3, r4, r5, pc}

000d56c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d56c8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d56ca:	4c0a      	ldr	r4, [pc, #40]	; (d56f4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d56cc:	6823      	ldr	r3, [r4, #0]
   d56ce:	07db      	lsls	r3, r3, #31
   d56d0:	d40e      	bmi.n	d56f0 <_ZN5spark10LogManager8instanceEv+0x28>
   d56d2:	4620      	mov	r0, r4
   d56d4:	f7fe fcf2 	bl	d40bc <__cxa_guard_acquire>
   d56d8:	b150      	cbz	r0, d56f0 <_ZN5spark10LogManager8instanceEv+0x28>
   d56da:	4807      	ldr	r0, [pc, #28]	; (d56f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d56dc:	f7ff ffde 	bl	d569c <_ZN5spark10LogManagerC1Ev>
   d56e0:	4620      	mov	r0, r4
   d56e2:	f7fe fcf0 	bl	d40c6 <__cxa_guard_release>
   d56e6:	4a05      	ldr	r2, [pc, #20]	; (d56fc <_ZN5spark10LogManager8instanceEv+0x34>)
   d56e8:	4905      	ldr	r1, [pc, #20]	; (d5700 <_ZN5spark10LogManager8instanceEv+0x38>)
   d56ea:	4803      	ldr	r0, [pc, #12]	; (d56f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d56ec:	f002 f9cc 	bl	d7a88 <__aeabi_atexit>
    return &mgr;
}
   d56f0:	4801      	ldr	r0, [pc, #4]	; (d56f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d56f2:	bd10      	pop	{r4, pc}
   d56f4:	2003e3a8 	.word	0x2003e3a8
   d56f8:	2003e3ac 	.word	0x2003e3ac
   d56fc:	2003e370 	.word	0x2003e370
   d5700:	000d5b33 	.word	0x000d5b33

000d5704 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5704:	2300      	movs	r3, #0
   d5706:	4a02      	ldr	r2, [pc, #8]	; (d5710 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5708:	4902      	ldr	r1, [pc, #8]	; (d5714 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d570a:	4803      	ldr	r0, [pc, #12]	; (d5718 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d570c:	f7ff ba94 	b.w	d4c38 <log_set_callbacks>
   d5710:	000d5a15 	.word	0x000d5a15
   d5714:	000d59a5 	.word	0x000d59a5
   d5718:	000d592d 	.word	0x000d592d

000d571c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d571c:	2300      	movs	r3, #0
   d571e:	461a      	mov	r2, r3
   d5720:	4619      	mov	r1, r3
   d5722:	4618      	mov	r0, r3
   d5724:	f7ff ba88 	b.w	d4c38 <log_set_callbacks>

000d5728 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5728:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d572a:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d572c:	690e      	ldr	r6, [r1, #16]
   d572e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5732:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5736:	4605      	mov	r5, r0
   d5738:	a801      	add	r0, sp, #4
   d573a:	f7ff fb56 	bl	d4dea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d573e:	4622      	mov	r2, r4
   d5740:	4631      	mov	r1, r6
   d5742:	4628      	mov	r0, r5
   d5744:	f7ff fe75 	bl	d5432 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5748:	a801      	add	r0, sp, #4
   d574a:	f7ff fb55 	bl	d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d574e:	4628      	mov	r0, r5
   d5750:	b002      	add	sp, #8
   d5752:	bd70      	pop	{r4, r5, r6, pc}

000d5754 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5754:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5756:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d5758:	688e      	ldr	r6, [r1, #8]
   d575a:	f851 3b04 	ldr.w	r3, [r1], #4
   d575e:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5762:	4605      	mov	r5, r0
   d5764:	a801      	add	r0, sp, #4
   d5766:	f7ff fb40 	bl	d4dea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d576a:	4622      	mov	r2, r4
   d576c:	4631      	mov	r1, r6
   d576e:	4628      	mov	r0, r5
   d5770:	f7ff fe44 	bl	d53fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5774:	a801      	add	r0, sp, #4
   d5776:	f7ff fb3f 	bl	d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d577a:	4628      	mov	r0, r5
   d577c:	b002      	add	sp, #8
   d577e:	bd70      	pop	{r4, r5, r6, pc}

000d5780 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5780:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5782:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5784:	68ce      	ldr	r6, [r1, #12]
   d5786:	f851 3b04 	ldr.w	r3, [r1], #4
   d578a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d578e:	4605      	mov	r5, r0
   d5790:	a801      	add	r0, sp, #4
   d5792:	f7ff fb2a 	bl	d4dea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5796:	4622      	mov	r2, r4
   d5798:	4631      	mov	r1, r6
   d579a:	4628      	mov	r0, r5
   d579c:	f7ff fe06 	bl	d53ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57a0:	a801      	add	r0, sp, #4
   d57a2:	f7ff fb29 	bl	d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d57a6:	4628      	mov	r0, r5
   d57a8:	b002      	add	sp, #8
   d57aa:	bd70      	pop	{r4, r5, r6, pc}

000d57ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d57ac:	b530      	push	{r4, r5, lr}
   d57ae:	b08b      	sub	sp, #44	; 0x2c
   d57b0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d57b2:	4601      	mov	r1, r0
   d57b4:	a804      	add	r0, sp, #16
   d57b6:	f7ff ffcd 	bl	d5754 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d57ba:	a804      	add	r0, sp, #16
   d57bc:	f7ff fd29 	bl	d5212 <_ZN5spark18JSONObjectIterator4nextEv>
   d57c0:	b1e8      	cbz	r0, d57fe <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d57c2:	a904      	add	r1, sp, #16
   d57c4:	4668      	mov	r0, sp
   d57c6:	f7ff ffdb 	bl	d5780 <_ZNK5spark18JSONObjectIterator4nameEv>
   d57ca:	490f      	ldr	r1, [pc, #60]	; (d5808 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d57cc:	9802      	ldr	r0, [sp, #8]
   d57ce:	f7ff fe91 	bl	d54f4 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d57d2:	4604      	mov	r4, r0
   d57d4:	b110      	cbz	r0, d57dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d57d6:	1c2c      	adds	r4, r5, #0
   d57d8:	bf18      	it	ne
   d57da:	2401      	movne	r4, #1
   d57dc:	a801      	add	r0, sp, #4
   d57de:	f7ff fb0b 	bl	d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57e2:	2c00      	cmp	r4, #0
   d57e4:	d0e9      	beq.n	d57ba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d57e6:	a904      	add	r1, sp, #16
   d57e8:	4668      	mov	r0, sp
   d57ea:	f7ff ff9d 	bl	d5728 <_ZNK5spark18JSONObjectIterator5valueEv>
   d57ee:	4668      	mov	r0, sp
   d57f0:	f7ff fcef 	bl	d51d2 <_ZNK5spark9JSONValue5toIntEv>
   d57f4:	6028      	str	r0, [r5, #0]
   d57f6:	a801      	add	r0, sp, #4
   d57f8:	f7ff fafe 	bl	d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57fc:	e7dd      	b.n	d57ba <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d57fe:	a805      	add	r0, sp, #20
   d5800:	f7ff fafa 	bl	d4df8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5804:	b00b      	add	sp, #44	; 0x2c
   d5806:	bd30      	pop	{r4, r5, pc}
   d5808:	000d841c 	.word	0x000d841c

000d580c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d580e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5810:	4620      	mov	r0, r4
   d5812:	4913      	ldr	r1, [pc, #76]	; (d5860 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5814:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5816:	f002 fb69 	bl	d7eec <strcmp>
   d581a:	b940      	cbnz	r0, d582e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d581c:	f001 fff4 	bl	d7808 <_Z16_fetch_usbserialv>
   d5820:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5824:	f001 ffe0 	bl	d77e8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5828:	f001 ffee 	bl	d7808 <_Z16_fetch_usbserialv>
   d582c:	e015      	b.n	d585a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d582e:	490d      	ldr	r1, [pc, #52]	; (d5864 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d5830:	4620      	mov	r0, r4
   d5832:	f002 fb5b 	bl	d7eec <strcmp>
   d5836:	b978      	cbnz	r0, d5858 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5838:	a902      	add	r1, sp, #8
   d583a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d583e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d5842:	4628      	mov	r0, r5
   d5844:	f7ff ffb2 	bl	d57ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5848:	f001 ff52 	bl	d76f0 <_Z22__fetch_global_Serial1v>
   d584c:	9901      	ldr	r1, [sp, #4]
   d584e:	f001 ff45 	bl	d76dc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5852:	f001 ff4d 	bl	d76f0 <_Z22__fetch_global_Serial1v>
   d5856:	e000      	b.n	d585a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5858:	2000      	movs	r0, #0
}
   d585a:	b003      	add	sp, #12
   d585c:	bd30      	pop	{r4, r5, pc}
   d585e:	bf00      	nop
   d5860:	000d8421 	.word	0x000d8421
   d5864:	000d8428 	.word	0x000d8428

000d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5868:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d586a:	6804      	ldr	r4, [r0, #0]
   d586c:	6843      	ldr	r3, [r0, #4]
   d586e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5870:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5872:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5876:	42a6      	cmp	r6, r4
   d5878:	d005      	beq.n	d5886 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d587a:	f104 0008 	add.w	r0, r4, #8
   d587e:	f7ff fff3 	bl	d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5882:	3414      	adds	r4, #20
   d5884:	e7f7      	b.n	d5876 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5886:	6828      	ldr	r0, [r5, #0]
   d5888:	f7ff fa7c 	bl	d4d84 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d588c:	4628      	mov	r0, r5
   d588e:	bd70      	pop	{r4, r5, r6, pc}

000d5890 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5890:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5892:	6804      	ldr	r4, [r0, #0]
   d5894:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5896:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5898:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d589c:	42a6      	cmp	r6, r4
   d589e:	d004      	beq.n	d58aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d58a0:	4620      	mov	r0, r4
   d58a2:	f001 fad8 	bl	d6e56 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d58a6:	3410      	adds	r4, #16
   d58a8:	e7f8      	b.n	d589c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d58aa:	6828      	ldr	r0, [r5, #0]
   d58ac:	f7ff fa6a 	bl	d4d84 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d58b0:	4628      	mov	r0, r5
   d58b2:	bd70      	pop	{r4, r5, r6, pc}

000d58b4 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d58b4:	b510      	push	{r4, lr}
   d58b6:	4604      	mov	r4, r0
   d58b8:	300c      	adds	r0, #12
   d58ba:	f7ff ffd5 	bl	d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d58be:	4620      	mov	r0, r4
   d58c0:	f7ff ffe6 	bl	d5890 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d58c4:	4620      	mov	r0, r4
   d58c6:	bd10      	pop	{r4, pc}

000d58c8 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d58c8:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d58ca:	4b04      	ldr	r3, [pc, #16]	; (d58dc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d58cc:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d58ce:	f840 3b04 	str.w	r3, [r0], #4
   d58d2:	f7ff ffef 	bl	d58b4 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d58d6:	4620      	mov	r0, r4
   d58d8:	bd10      	pop	{r4, pc}
   d58da:	bf00      	nop
   d58dc:	000d80e8 	.word	0x000d80e8

000d58e0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d58e0:	b510      	push	{r4, lr}
   d58e2:	4604      	mov	r4, r0
   d58e4:	f7ff fff0 	bl	d58c8 <_ZN5spark16StreamLogHandlerD1Ev>
   d58e8:	4620      	mov	r0, r4
   d58ea:	2124      	movs	r1, #36	; 0x24
   d58ec:	f002 f8d1 	bl	d7a92 <_ZdlPvj>
   d58f0:	4620      	mov	r0, r4
   d58f2:	bd10      	pop	{r4, pc}

000d58f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d58f4:	b510      	push	{r4, lr}
   d58f6:	4b03      	ldr	r3, [pc, #12]	; (d5904 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d58f8:	6003      	str	r3, [r0, #0]
   d58fa:	4604      	mov	r4, r0
   d58fc:	f7ff ffe4 	bl	d58c8 <_ZN5spark16StreamLogHandlerD1Ev>
   d5900:	4620      	mov	r0, r4
   d5902:	bd10      	pop	{r4, pc}
   d5904:	000d83f4 	.word	0x000d83f4

000d5908 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5908:	b510      	push	{r4, lr}
   d590a:	4604      	mov	r4, r0
   d590c:	f7ff fff2 	bl	d58f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5910:	4620      	mov	r0, r4
   d5912:	2124      	movs	r1, #36	; 0x24
   d5914:	f002 f8bd 	bl	d7a92 <_ZdlPvj>
   d5918:	4620      	mov	r0, r4
   d591a:	bd10      	pop	{r4, pc}

000d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d591c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d591e:	6803      	ldr	r3, [r0, #0]
   d5920:	4604      	mov	r4, r0
   d5922:	6818      	ldr	r0, [r3, #0]
   d5924:	f7fe ffa8 	bl	d4878 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5928:	4620      	mov	r0, r4
   d592a:	bd10      	pop	{r4, pc}

000d592c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5930:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5932:	4b1b      	ldr	r3, [pc, #108]	; (d59a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5934:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5936:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d593a:	b085      	sub	sp, #20
   d593c:	4682      	mov	sl, r0
   d593e:	460e      	mov	r6, r1
   d5940:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5942:	bb53      	cbnz	r3, d599a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d5944:	f7ff fec0 	bl	d56c8 <_ZN5spark10LogManager8instanceEv>
   d5948:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d594a:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d594c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d594e:	f7ff fde5 	bl	d551c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5952:	7b23      	ldrb	r3, [r4, #12]
   d5954:	b9f3      	cbnz	r3, d5994 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5956:	2301      	movs	r3, #1
   d5958:	7323      	strb	r3, [r4, #12]
   d595a:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d595c:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d595e:	b2f6      	uxtb	r6, r6
   d5960:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5964:	454d      	cmp	r5, r9
   d5966:	d013      	beq.n	d5990 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d5968:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d596c:	4641      	mov	r1, r8
   d596e:	1d38      	adds	r0, r7, #4
   d5970:	f7ff fe30 	bl	d55d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5974:	4286      	cmp	r6, r0
   d5976:	d3f5      	bcc.n	d5964 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d5978:	683b      	ldr	r3, [r7, #0]
   d597a:	f8cd b000 	str.w	fp, [sp]
   d597e:	689b      	ldr	r3, [r3, #8]
   d5980:	469e      	mov	lr, r3
   d5982:	4638      	mov	r0, r7
   d5984:	4643      	mov	r3, r8
   d5986:	4632      	mov	r2, r6
   d5988:	4651      	mov	r1, sl
   d598a:	4677      	mov	r7, lr
   d598c:	47b8      	blx	r7
   d598e:	e7e9      	b.n	d5964 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5990:	2300      	movs	r3, #0
   d5992:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5994:	a803      	add	r0, sp, #12
   d5996:	f7ff ffc1 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d599a:	b005      	add	sp, #20
   d599c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59a0:	e000ed00 	.word	0xe000ed00

000d59a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d59a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59a8:	4699      	mov	r9, r3
   d59aa:	4b19      	ldr	r3, [pc, #100]	; (d5a10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d59ac:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d59ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d59b2:	4607      	mov	r7, r0
   d59b4:	4688      	mov	r8, r1
   d59b6:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d59b8:	bb33      	cbnz	r3, d5a08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d59ba:	f7ff fe85 	bl	d56c8 <_ZN5spark10LogManager8instanceEv>
   d59be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d59c0:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d59c2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d59c4:	f7ff fdaa 	bl	d551c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d59c8:	7b23      	ldrb	r3, [r4, #12]
   d59ca:	b9d3      	cbnz	r3, d5a02 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d59cc:	2301      	movs	r3, #1
   d59ce:	7323      	strb	r3, [r4, #12]
   d59d0:	6825      	ldr	r5, [r4, #0]
   d59d2:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d59d4:	fa5f fb86 	uxtb.w	fp, r6
   d59d8:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d59dc:	4555      	cmp	r5, sl
   d59de:	d00e      	beq.n	d59fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d59e0:	f855 6b04 	ldr.w	r6, [r5], #4
   d59e4:	4649      	mov	r1, r9
   d59e6:	1d30      	adds	r0, r6, #4
   d59e8:	f7ff fdf4 	bl	d55d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d59ec:	4583      	cmp	fp, r0
   d59ee:	d3f5      	bcc.n	d59dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d59f0:	6833      	ldr	r3, [r6, #0]
   d59f2:	4642      	mov	r2, r8
   d59f4:	68db      	ldr	r3, [r3, #12]
   d59f6:	4639      	mov	r1, r7
   d59f8:	4630      	mov	r0, r6
   d59fa:	4798      	blx	r3
   d59fc:	e7ee      	b.n	d59dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d59fe:	2300      	movs	r3, #0
   d5a00:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5a02:	a801      	add	r0, sp, #4
   d5a04:	f7ff ff8a 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d5a08:	b003      	add	sp, #12
   d5a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a0e:	bf00      	nop
   d5a10:	e000ed00 	.word	0xe000ed00

000d5a14 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5a14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5a18:	4b15      	ldr	r3, [pc, #84]	; (d5a70 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d5a1a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5a20:	4604      	mov	r4, r0
   d5a22:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5a24:	b9fb      	cbnz	r3, d5a66 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d5a26:	f7ff fe4f 	bl	d56c8 <_ZN5spark10LogManager8instanceEv>
   d5a2a:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d5a2c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a2e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a30:	f7ff fd74 	bl	d551c <_ZN14RecursiveMutex4lockEv>
   d5a34:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d5a38:	2646      	movs	r6, #70	; 0x46
   d5a3a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5a3e:	42af      	cmp	r7, r5
   d5a40:	d107      	bne.n	d5a52 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d5a42:	a801      	add	r0, sp, #4
   d5a44:	f7ff ff6a 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d5a48:	42b4      	cmp	r4, r6
   d5a4a:	bfb4      	ite	lt
   d5a4c:	2000      	movlt	r0, #0
   d5a4e:	2001      	movge	r0, #1
   d5a50:	e00a      	b.n	d5a68 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d5a52:	f855 0b04 	ldr.w	r0, [r5], #4
   d5a56:	4641      	mov	r1, r8
   d5a58:	3004      	adds	r0, #4
   d5a5a:	f7ff fdbb 	bl	d55d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5a5e:	4286      	cmp	r6, r0
   d5a60:	bfa8      	it	ge
   d5a62:	4606      	movge	r6, r0
   d5a64:	e7eb      	b.n	d5a3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d5a66:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d5a68:	b002      	add	sp, #8
   d5a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a6e:	bf00      	nop
   d5a70:	e000ed00 	.word	0xe000ed00

000d5a74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5a74:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d5a76:	6803      	ldr	r3, [r0, #0]
   d5a78:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5a7a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5a7c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5a80:	429a      	cmp	r2, r3
   d5a82:	4618      	mov	r0, r3
   d5a84:	d00e      	beq.n	d5aa4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d5a86:	6806      	ldr	r6, [r0, #0]
   d5a88:	680d      	ldr	r5, [r1, #0]
   d5a8a:	42ae      	cmp	r6, r5
   d5a8c:	f103 0304 	add.w	r3, r3, #4
   d5a90:	d1f6      	bne.n	d5a80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5a92:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5a94:	1a52      	subs	r2, r2, r1
   d5a96:	f002 f98b 	bl	d7db0 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d5a9a:	6863      	ldr	r3, [r4, #4]
   d5a9c:	3b01      	subs	r3, #1
   d5a9e:	6063      	str	r3, [r4, #4]
    return true;
   d5aa0:	2001      	movs	r0, #1
}
   d5aa2:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5aa4:	2000      	movs	r0, #0
   d5aa6:	bd70      	pop	{r4, r5, r6, pc}

000d5aa8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5aaa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5aac:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5aae:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ab0:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5ab2:	f7ff fd33 	bl	d551c <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5ab6:	a901      	add	r1, sp, #4
   d5ab8:	4620      	mov	r0, r4
   d5aba:	f7ff ffdb 	bl	d5a74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5abe:	b920      	cbnz	r0, d5aca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5ac0:	a803      	add	r0, sp, #12
   d5ac2:	f7ff ff2b 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d5ac6:	b004      	add	sp, #16
   d5ac8:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5aca:	6863      	ldr	r3, [r4, #4]
   d5acc:	2b00      	cmp	r3, #0
   d5ace:	d1f7      	bne.n	d5ac0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d5ad0:	f7ff fe24 	bl	d571c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d5ad4:	e7f4      	b.n	d5ac0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d5ad6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d5ad6:	b570      	push	{r4, r5, r6, lr}
   d5ad8:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ada:	6943      	ldr	r3, [r0, #20]
   d5adc:	2618      	movs	r6, #24
   d5ade:	4604      	mov	r4, r0
   d5ae0:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d5ae4:	42ae      	cmp	r6, r5
   d5ae6:	d015      	beq.n	d5b14 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d5ae8:	f105 0110 	add.w	r1, r5, #16
   d5aec:	4620      	mov	r0, r4
   d5aee:	f7ff ffc1 	bl	d5a74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5af2:	6863      	ldr	r3, [r4, #4]
   d5af4:	b90b      	cbnz	r3, d5afa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5af6:	f7ff fe11 	bl	d571c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d5afa:	69e0      	ldr	r0, [r4, #28]
   d5afc:	6929      	ldr	r1, [r5, #16]
   d5afe:	6803      	ldr	r3, [r0, #0]
   d5b00:	68db      	ldr	r3, [r3, #12]
   d5b02:	4798      	blx	r3
        if (h.stream) {
   d5b04:	6969      	ldr	r1, [r5, #20]
   d5b06:	b119      	cbz	r1, d5b10 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5b08:	6a20      	ldr	r0, [r4, #32]
   d5b0a:	6803      	ldr	r3, [r0, #0]
   d5b0c:	68db      	ldr	r3, [r3, #12]
   d5b0e:	4798      	blx	r3
   d5b10:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d5b12:	e7e7      	b.n	d5ae4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5b14:	6925      	ldr	r5, [r4, #16]
   d5b16:	6963      	ldr	r3, [r4, #20]
   d5b18:	2618      	movs	r6, #24
   d5b1a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b1e:	42b5      	cmp	r5, r6
   d5b20:	d004      	beq.n	d5b2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5b22:	4628      	mov	r0, r5
   d5b24:	f001 f997 	bl	d6e56 <_ZN6StringD1Ev>
   d5b28:	3518      	adds	r5, #24
   d5b2a:	e7f8      	b.n	d5b1e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5b2c:	2300      	movs	r3, #0
   d5b2e:	6163      	str	r3, [r4, #20]
   d5b30:	bd70      	pop	{r4, r5, r6, pc}

000d5b32 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d5b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5b34:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b36:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d5b38:	f7ff fdf0 	bl	d571c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d5b3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5b40:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d5b44:	f7ff fcea 	bl	d551c <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f7ff ffc4 	bl	d5ad6 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d5b4e:	4628      	mov	r0, r5
   d5b50:	f7ff fee4 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5b54:	6925      	ldr	r5, [r4, #16]
   d5b56:	6963      	ldr	r3, [r4, #20]
   d5b58:	2618      	movs	r6, #24
   d5b5a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b5e:	42b5      	cmp	r5, r6
   d5b60:	d004      	beq.n	d5b6c <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5b62:	4628      	mov	r0, r5
   d5b64:	f001 f977 	bl	d6e56 <_ZN6StringD1Ev>
   d5b68:	3518      	adds	r5, #24
   d5b6a:	e7f8      	b.n	d5b5e <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b6c:	6920      	ldr	r0, [r4, #16]
   d5b6e:	f7ff f909 	bl	d4d84 <free>
   d5b72:	6820      	ldr	r0, [r4, #0]
   d5b74:	f7ff f906 	bl	d4d84 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d5b78:	4620      	mov	r0, r4
   d5b7a:	b002      	add	sp, #8
   d5b7c:	bd70      	pop	{r4, r5, r6, pc}

000d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b7e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5b80:	680a      	ldr	r2, [r1, #0]
   d5b82:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b84:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b86:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b88:	684a      	ldr	r2, [r1, #4]
   d5b8a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b8c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b8e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5b90:	688a      	ldr	r2, [r1, #8]
   d5b92:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b94:	608b      	str	r3, [r1, #8]
   d5b96:	4770      	bx	lr

000d5b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5b98:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5b9a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5b9c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5b9e:	6003      	str	r3, [r0, #0]
   d5ba0:	6043      	str	r3, [r0, #4]
   d5ba2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5ba4:	f7ff ffeb 	bl	d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d5ba8:	4620      	mov	r0, r4
   d5baa:	bd10      	pop	{r4, pc}

000d5bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5bac:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bb0:	4604      	mov	r4, r0
   d5bb2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5bb4:	d925      	bls.n	d5c02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d5bb6:	4290      	cmp	r0, r2
   d5bb8:	d224      	bcs.n	d5c04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5bba:	1a55      	subs	r5, r2, r1
   d5bbc:	3d14      	subs	r5, #20
   d5bbe:	442c      	add	r4, r5
   d5bc0:	f1a1 0714 	sub.w	r7, r1, #20
   d5bc4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5bc8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5bca:	f1a5 0308 	sub.w	r3, r5, #8
   d5bce:	429f      	cmp	r7, r3
   d5bd0:	d037      	beq.n	d5c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d5bd2:	b184      	cbz	r4, d5bf6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5bd4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5bd8:	6023      	str	r3, [r4, #0]
   d5bda:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5bde:	80a3      	strh	r3, [r4, #4]
   d5be0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5be4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5be6:	60a6      	str	r6, [r4, #8]
   d5be8:	60e6      	str	r6, [r4, #12]
   d5bea:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5bec:	4629      	mov	r1, r5
   d5bee:	f104 0008 	add.w	r0, r4, #8
   d5bf2:	f7ff ffc4 	bl	d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d5bf6:	4628      	mov	r0, r5
   d5bf8:	f7ff fe36 	bl	d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5bfc:	3c14      	subs	r4, #20
   d5bfe:	3d14      	subs	r5, #20
   d5c00:	e7e3      	b.n	d5bca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5c02:	d01e      	beq.n	d5c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d5c04:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5c08:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c0a:	f1a5 0308 	sub.w	r3, r5, #8
   d5c0e:	429e      	cmp	r6, r3
   d5c10:	d017      	beq.n	d5c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d5c12:	b184      	cbz	r4, d5c36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d5c14:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5c18:	6023      	str	r3, [r4, #0]
   d5c1a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5c1e:	80a3      	strh	r3, [r4, #4]
   d5c20:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5c24:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5c26:	60a7      	str	r7, [r4, #8]
   d5c28:	60e7      	str	r7, [r4, #12]
   d5c2a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5c2c:	4629      	mov	r1, r5
   d5c2e:	f104 0008 	add.w	r0, r4, #8
   d5c32:	f7ff ffa4 	bl	d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7ff fe16 	bl	d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c3c:	3414      	adds	r4, #20
   d5c3e:	3514      	adds	r5, #20
   d5c40:	e7e3      	b.n	d5c0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d5c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c46:	6845      	ldr	r5, [r0, #4]
   d5c48:	6883      	ldr	r3, [r0, #8]
   d5c4a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5c4c:	4604      	mov	r4, r0
   d5c4e:	460e      	mov	r6, r1
   d5c50:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c52:	db0e      	blt.n	d5c72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d5c54:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5c56:	2d00      	cmp	r5, #0
   d5c58:	dd05      	ble.n	d5c66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5c5a:	00a9      	lsls	r1, r5, #2
   d5c5c:	6800      	ldr	r0, [r0, #0]
   d5c5e:	f7ff f899 	bl	d4d94 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5c62:	b920      	cbnz	r0, d5c6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d5c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5c66:	6800      	ldr	r0, [r0, #0]
   d5c68:	f7ff f88c 	bl	d4d84 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5c6c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5c6e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5c70:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c72:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5c74:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c76:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5c7a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d5c7e:	1a52      	subs	r2, r2, r1
   d5c80:	1d08      	adds	r0, r1, #4
   d5c82:	f002 f895 	bl	d7db0 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d5c86:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5c8a:	6863      	ldr	r3, [r4, #4]
   d5c8c:	3301      	adds	r3, #1
   d5c8e:	6063      	str	r3, [r4, #4]
   d5c90:	2001      	movs	r0, #1
    return true;
}
   d5c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5c96:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5c98:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5c9a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c9c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5c9e:	f7ff fc3d 	bl	d551c <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d5ca2:	6823      	ldr	r3, [r4, #0]
   d5ca4:	6861      	ldr	r1, [r4, #4]
   d5ca6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5caa:	4283      	cmp	r3, r0
   d5cac:	461a      	mov	r2, r3
   d5cae:	d009      	beq.n	d5cc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d5cb0:	6812      	ldr	r2, [r2, #0]
   d5cb2:	42aa      	cmp	r2, r5
   d5cb4:	f103 0304 	add.w	r3, r3, #4
   d5cb8:	d1f7      	bne.n	d5caa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d5cba:	a801      	add	r0, sp, #4
   d5cbc:	f7ff fe2e 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5cc0:	2500      	movs	r5, #0
   d5cc2:	e00e      	b.n	d5ce2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5cc4:	462a      	mov	r2, r5
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	f7ff ffbc 	bl	d5c44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5ccc:	4605      	mov	r5, r0
   d5cce:	2800      	cmp	r0, #0
   d5cd0:	d0f3      	beq.n	d5cba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d5cd2:	6863      	ldr	r3, [r4, #4]
   d5cd4:	2b01      	cmp	r3, #1
   d5cd6:	d101      	bne.n	d5cdc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d5cd8:	f7ff fd14 	bl	d5704 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5cdc:	a801      	add	r0, sp, #4
   d5cde:	f7ff fe1d 	bl	d591c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	b003      	add	sp, #12
   d5ce6:	bd30      	pop	{r4, r5, pc}

000d5ce8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5ce8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cec:	4606      	mov	r6, r0
   d5cee:	460c      	mov	r4, r1
   d5cf0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5cf2:	d914      	bls.n	d5d1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5cf4:	4290      	cmp	r0, r2
   d5cf6:	d213      	bcs.n	d5d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5cf8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d5cfc:	1a6c      	subs	r4, r5, r1
   d5cfe:	f1a1 0710 	sub.w	r7, r1, #16
   d5d02:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5d04:	42af      	cmp	r7, r5
   d5d06:	d018      	beq.n	d5d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5d08:	b11c      	cbz	r4, d5d12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5d0a:	4629      	mov	r1, r5
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f001 f892 	bl	d6e36 <_ZN6StringC1EOS_>
                end->~T();
   d5d12:	4628      	mov	r0, r5
   d5d14:	f001 f89f 	bl	d6e56 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5d18:	3d10      	subs	r5, #16
   d5d1a:	3c10      	subs	r4, #16
   d5d1c:	e7f2      	b.n	d5d04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5d1e:	d00c      	beq.n	d5d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5d20:	42ac      	cmp	r4, r5
   d5d22:	d00a      	beq.n	d5d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5d24:	b11e      	cbz	r6, d5d2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5d26:	4621      	mov	r1, r4
   d5d28:	4630      	mov	r0, r6
   d5d2a:	f001 f884 	bl	d6e36 <_ZN6StringC1EOS_>
                p->~T();
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f001 f891 	bl	d6e56 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5d34:	3410      	adds	r4, #16
   d5d36:	3610      	adds	r6, #16
   d5d38:	e7f2      	b.n	d5d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d5d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d3c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5d3e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d40:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5d42:	dd0b      	ble.n	d5d5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5d44:	0130      	lsls	r0, r6, #4
   d5d46:	f7ff f815 	bl	d4d74 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5d4a:	4604      	mov	r4, r0
   d5d4c:	b170      	cbz	r0, d5d6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5d4e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5d52:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5d56:	f7ff ffc7 	bl	d5ce8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d5d5a:	e000      	b.n	d5d5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5d5c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d5e:	6828      	ldr	r0, [r5, #0]
   d5d60:	f7ff f810 	bl	d4d84 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5d64:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5d66:	60ae      	str	r6, [r5, #8]
        return true;
   d5d68:	2001      	movs	r0, #1
   d5d6a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5d6c:	bd70      	pop	{r4, r5, r6, pc}

000d5d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5d6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d72:	2300      	movs	r3, #0
   d5d74:	b095      	sub	sp, #84	; 0x54
   d5d76:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5d78:	2246      	movs	r2, #70	; 0x46
   d5d7a:	6003      	str	r3, [r0, #0]
   d5d7c:	6043      	str	r3, [r0, #4]
   d5d7e:	6083      	str	r3, [r0, #8]
   d5d80:	60c3      	str	r3, [r0, #12]
   d5d82:	6103      	str	r3, [r0, #16]
   d5d84:	6143      	str	r3, [r0, #20]
   d5d86:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5d88:	9102      	str	r1, [sp, #8]
   d5d8a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d5d8e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5d90:	4299      	cmp	r1, r3
   d5d92:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d94:	9309      	str	r3, [sp, #36]	; 0x24
   d5d96:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5d98:	f340 809d 	ble.w	d5ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5d9c:	a808      	add	r0, sp, #32
   d5d9e:	f7ff ffcd 	bl	d5d3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5da2:	2800      	cmp	r0, #0
   d5da4:	f040 8097 	bne.w	d5ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5da8:	e08e      	b.n	d5ec8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d5daa:	4621      	mov	r1, r4
   d5dac:	a80b      	add	r0, sp, #44	; 0x2c
   d5dae:	f001 f842 	bl	d6e36 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5db2:	a90b      	add	r1, sp, #44	; 0x2c
   d5db4:	a80f      	add	r0, sp, #60	; 0x3c
   d5db6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5db8:	f001 f83d 	bl	d6e36 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5dc0:	4299      	cmp	r1, r3
   d5dc2:	f2c0 80ce 	blt.w	d5f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d5dc6:	3101      	adds	r1, #1
   d5dc8:	a808      	add	r0, sp, #32
   d5dca:	f7ff ffb7 	bl	d5d3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5dce:	2800      	cmp	r0, #0
   d5dd0:	f040 80c7 	bne.w	d5f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5dd4:	a80f      	add	r0, sp, #60	; 0x3c
   d5dd6:	f001 f83e 	bl	d6e56 <_ZN6StringD1Ev>
   d5dda:	a80b      	add	r0, sp, #44	; 0x2c
   d5ddc:	f001 f83b 	bl	d6e56 <_ZN6StringD1Ev>
   d5de0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d5de2:	42a7      	cmp	r7, r4
   d5de4:	d1e1      	bne.n	d5daa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5de6:	2600      	movs	r6, #0
   d5de8:	960b      	str	r6, [sp, #44]	; 0x2c
   d5dea:	960c      	str	r6, [sp, #48]	; 0x30
   d5dec:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5dee:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d5df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5df2:	429e      	cmp	r6, r3
   d5df4:	f280 80a8 	bge.w	d5f48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5df8:	0133      	lsls	r3, r6, #4
   d5dfa:	9a08      	ldr	r2, [sp, #32]
   d5dfc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d5dfe:	9306      	str	r3, [sp, #24]
        if (!category) {
   d5e00:	2b00      	cmp	r3, #0
   d5e02:	f000 809f 	beq.w	d5f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d5e06:	2314      	movs	r3, #20
   d5e08:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5e0a:	f8cd 901c 	str.w	r9, [sp, #28]
   d5e0e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5e10:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5e12:	a907      	add	r1, sp, #28
   d5e14:	a806      	add	r0, sp, #24
   d5e16:	f7ff fb30 	bl	d547a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5e1a:	4607      	mov	r7, r0
   d5e1c:	2800      	cmp	r0, #0
   d5e1e:	f000 8091 	beq.w	d5f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d5e22:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d5e24:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5e26:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5e2a:	9a07      	ldr	r2, [sp, #28]
   d5e2c:	4620      	mov	r0, r4
   d5e2e:	f7ff fb91 	bl	d5554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5e32:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d5e36:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5e38:	f1b8 0f00 	cmp.w	r8, #0
   d5e3c:	d153      	bne.n	d5ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d5e3e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d5e42:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d5e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5e4a:	970f      	str	r7, [sp, #60]	; 0x3c
   d5e4c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d5e50:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d5e54:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d5e58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e5c:	6867      	ldr	r7, [r4, #4]
   d5e5e:	68a3      	ldr	r3, [r4, #8]
   d5e60:	429f      	cmp	r7, r3
   d5e62:	da4f      	bge.n	d5f04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d5e64:	9b00      	ldr	r3, [sp, #0]
   d5e66:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d5e6a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5e6c:	2214      	movs	r2, #20
   d5e6e:	4353      	muls	r3, r2
   d5e70:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d5e74:	fb02 b201 	mla	r2, r2, r1, fp
   d5e78:	f107 0014 	add.w	r0, r7, #20
   d5e7c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5e7e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d5e80:	f7ff fe94 	bl	d5bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5e84:	b1a7      	cbz	r7, d5eb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5e86:	9b03      	ldr	r3, [sp, #12]
   d5e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d5e8a:	f84b 2003 	str.w	r2, [fp, r3]
   d5e8e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d5e92:	80bb      	strh	r3, [r7, #4]
   d5e94:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d5e98:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5e9a:	f8c7 9008 	str.w	r9, [r7, #8]
   d5e9e:	f8c7 900c 	str.w	r9, [r7, #12]
   d5ea2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5ea6:	a911      	add	r1, sp, #68	; 0x44
   d5ea8:	f107 0008 	add.w	r0, r7, #8
   d5eac:	f7ff fe67 	bl	d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d5eb0:	6863      	ldr	r3, [r4, #4]
   d5eb2:	3301      	adds	r3, #1
   d5eb4:	6063      	str	r3, [r4, #4]
   d5eb6:	a811      	add	r0, sp, #68	; 0x44
   d5eb8:	f7ff fcd6 	bl	d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5ebc:	f1b8 0f00 	cmp.w	r8, #0
   d5ec0:	d011      	beq.n	d5ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d5ec2:	a80b      	add	r0, sp, #44	; 0x2c
   d5ec4:	f7ff fcd0 	bl	d5868 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5ec8:	a808      	add	r0, sp, #32
   d5eca:	f7ff fce1 	bl	d5890 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d5ece:	4628      	mov	r0, r5
   d5ed0:	b015      	add	sp, #84	; 0x54
   d5ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ed6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5eda:	f8da 3004 	ldr.w	r3, [sl, #4]
   d5ede:	2714      	movs	r7, #20
   d5ee0:	fb07 4703 	mla	r7, r7, r3, r4
   d5ee4:	e77d      	b.n	d5de2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d5ee6:	6823      	ldr	r3, [r4, #0]
   d5ee8:	9a00      	ldr	r2, [sp, #0]
   d5eea:	2414      	movs	r4, #20
   d5eec:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d5ef0:	9b06      	ldr	r3, [sp, #24]
   d5ef2:	781b      	ldrb	r3, [r3, #0]
   d5ef4:	bb23      	cbnz	r3, d5f40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d5ef6:	f8da 3000 	ldr.w	r3, [sl]
   d5efa:	9a01      	ldr	r2, [sp, #4]
   d5efc:	4413      	add	r3, r2
   d5efe:	7c1b      	ldrb	r3, [r3, #16]
   d5f00:	80e3      	strh	r3, [r4, #6]
   d5f02:	e01d      	b.n	d5f40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5f04:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5f06:	2f00      	cmp	r7, #0
   d5f08:	dd0f      	ble.n	d5f2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5f0a:	2314      	movs	r3, #20
   d5f0c:	fb03 f007 	mul.w	r0, r3, r7
   d5f10:	9303      	str	r3, [sp, #12]
   d5f12:	f7fe ff2f 	bl	d4d74 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5f16:	4683      	mov	fp, r0
   d5f18:	b178      	cbz	r0, d5f3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d5f1a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5f1e:	9b03      	ldr	r3, [sp, #12]
   d5f20:	fb03 1202 	mla	r2, r3, r2, r1
   d5f24:	f7ff fe42 	bl	d5bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5f28:	e000      	b.n	d5f2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5f2a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f2c:	6820      	ldr	r0, [r4, #0]
   d5f2e:	f7fe ff29 	bl	d4d84 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5f32:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d5f36:	60a7      	str	r7, [r4, #8]
   d5f38:	e794      	b.n	d5e64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5f3a:	f04f 0801 	mov.w	r8, #1
   d5f3e:	e7ba      	b.n	d5eb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d5f40:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5f42:	e766      	b.n	d5e12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d5f44:	3601      	adds	r6, #1
   d5f46:	e753      	b.n	d5df0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d5f48:	a908      	add	r1, sp, #32
   d5f4a:	4628      	mov	r0, r5
   d5f4c:	f7ff fe17 	bl	d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d5f50:	a90b      	add	r1, sp, #44	; 0x2c
   d5f52:	f105 000c 	add.w	r0, r5, #12
   d5f56:	f7ff fe12 	bl	d5b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d5f5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5f5e:	762b      	strb	r3, [r5, #24]
   d5f60:	e7af      	b.n	d5ec2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5f62:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d5f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5f66:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5f6a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5f6e:	4631      	mov	r1, r6
   d5f70:	f106 0010 	add.w	r0, r6, #16
   d5f74:	f7ff feb8 	bl	d5ce8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5f78:	b11e      	cbz	r6, d5f82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d5f7a:	a90f      	add	r1, sp, #60	; 0x3c
   d5f7c:	4630      	mov	r0, r6
   d5f7e:	f000 ff5a 	bl	d6e36 <_ZN6StringC1EOS_>
    ++size_;
   d5f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5f84:	3301      	adds	r3, #1
   d5f86:	9309      	str	r3, [sp, #36]	; 0x24
   d5f88:	e724      	b.n	d5dd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d5f8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5f8e:	4604      	mov	r4, r0
   d5f90:	4b09      	ldr	r3, [pc, #36]	; (d5fb8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5f92:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5f96:	4605      	mov	r5, r0
   d5f98:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5f9a:	a801      	add	r0, sp, #4
   d5f9c:	4611      	mov	r1, r2
   d5f9e:	f7fe fbab 	bl	d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5fa2:	aa01      	add	r2, sp, #4
   d5fa4:	4631      	mov	r1, r6
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	f7ff fee1 	bl	d5d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5fac:	a801      	add	r0, sp, #4
   d5fae:	f7fe fa6f 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5fb2:	4628      	mov	r0, r5
   d5fb4:	b004      	add	sp, #16
   d5fb6:	bd70      	pop	{r4, r5, r6, pc}
   d5fb8:	000d80e8 	.word	0x000d80e8

000d5fbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fbe:	460f      	mov	r7, r1
   d5fc0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5fc2:	492b      	ldr	r1, [pc, #172]	; (d6070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5fc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5fc6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5fc8:	4616      	mov	r6, r2
   d5fca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5fcc:	f001 ff8e 	bl	d7eec <strcmp>
   d5fd0:	bb28      	cbnz	r0, d601e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d5fd2:	2c00      	cmp	r4, #0
   d5fd4:	d049      	beq.n	d606a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5fd6:	4629      	mov	r1, r5
   d5fd8:	a801      	add	r0, sp, #4
   d5fda:	f7ff fddd 	bl	d5b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5fde:	4925      	ldr	r1, [pc, #148]	; (d6074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d5fe0:	2024      	movs	r0, #36	; 0x24
   d5fe2:	f001 fd61 	bl	d7aa8 <_ZnwjRKSt9nothrow_t>
   d5fe6:	4605      	mov	r5, r0
   d5fe8:	b1b8      	cbz	r0, d601a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d5fea:	a901      	add	r1, sp, #4
   d5fec:	a804      	add	r0, sp, #16
   d5fee:	f7ff fdd3 	bl	d5b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5ff2:	a904      	add	r1, sp, #16
   d5ff4:	a807      	add	r0, sp, #28
   d5ff6:	f7fe fb7f 	bl	d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ffa:	aa07      	add	r2, sp, #28
   d5ffc:	4631      	mov	r1, r6
   d5ffe:	4628      	mov	r0, r5
   d6000:	f7ff ffc4 	bl	d5f8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6004:	a807      	add	r0, sp, #28
   d6006:	f7fe fa43 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d600a:	4b1b      	ldr	r3, [pc, #108]	; (d6078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d600c:	602b      	str	r3, [r5, #0]
   d600e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6010:	a804      	add	r0, sp, #16
   d6012:	f7fe fa3d 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6016:	4b19      	ldr	r3, [pc, #100]	; (d607c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6018:	602b      	str	r3, [r5, #0]
   d601a:	a801      	add	r0, sp, #4
   d601c:	e01f      	b.n	d605e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d601e:	4918      	ldr	r1, [pc, #96]	; (d6080 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6020:	4638      	mov	r0, r7
   d6022:	f001 ff63 	bl	d7eec <strcmp>
   d6026:	b9f0      	cbnz	r0, d6066 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6028:	b1fc      	cbz	r4, d606a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d602a:	4629      	mov	r1, r5
   d602c:	a804      	add	r0, sp, #16
   d602e:	f7ff fdb3 	bl	d5b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6032:	4910      	ldr	r1, [pc, #64]	; (d6074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6034:	2024      	movs	r0, #36	; 0x24
   d6036:	f001 fd37 	bl	d7aa8 <_ZnwjRKSt9nothrow_t>
   d603a:	4605      	mov	r5, r0
   d603c:	b170      	cbz	r0, d605c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d603e:	a904      	add	r1, sp, #16
   d6040:	a807      	add	r0, sp, #28
   d6042:	f7fe fb59 	bl	d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6046:	aa07      	add	r2, sp, #28
   d6048:	4631      	mov	r1, r6
   d604a:	4628      	mov	r0, r5
   d604c:	f7ff ff9e 	bl	d5f8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6050:	a807      	add	r0, sp, #28
   d6052:	f7fe fa1d 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6056:	4b08      	ldr	r3, [pc, #32]	; (d6078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6058:	602b      	str	r3, [r5, #0]
   d605a:	622c      	str	r4, [r5, #32]
   d605c:	a804      	add	r0, sp, #16
   d605e:	f7fe fa17 	bl	d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6062:	4628      	mov	r0, r5
   d6064:	e002      	b.n	d606c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6066:	2000      	movs	r0, #0
   d6068:	e000      	b.n	d606c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d606a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d606c:	b00b      	add	sp, #44	; 0x2c
   d606e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6070:	000d847a 	.word	0x000d847a
   d6074:	000d86cc 	.word	0x000d86cc
   d6078:	000d8500 	.word	0x000d8500
   d607c:	000d83f4 	.word	0x000d83f4
   d6080:	000d847e 	.word	0x000d847e

000d6084 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6084:	4b01      	ldr	r3, [pc, #4]	; (d608c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6086:	4a02      	ldr	r2, [pc, #8]	; (d6090 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6088:	601a      	str	r2, [r3, #0]
   d608a:	4770      	bx	lr
   d608c:	2003e3d8 	.word	0x2003e3d8
   d6090:	000d848f 	.word	0x000d848f

000d6094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6098:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d609a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d609e:	4604      	mov	r4, r0
   d60a0:	460e      	mov	r6, r1
   d60a2:	4617      	mov	r7, r2
   d60a4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d60a6:	f001 fbaf 	bl	d7808 <_Z16_fetch_usbserialv>
   d60aa:	4581      	cmp	r9, r0
   d60ac:	d105      	bne.n	d60ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d60ae:	485a      	ldr	r0, [pc, #360]	; (d6218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d60b0:	f000 fd35 	bl	d6b1e <_ZN5spark12NetworkClass9listeningEv>
   d60b4:	2800      	cmp	r0, #0
   d60b6:	f040 80ac 	bne.w	d6212 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d60ba:	792b      	ldrb	r3, [r5, #4]
   d60bc:	071b      	lsls	r3, r3, #28
   d60be:	d505      	bpl.n	d60cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d60c0:	696b      	ldr	r3, [r5, #20]
   d60c2:	4a56      	ldr	r2, [pc, #344]	; (d621c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d60c4:	6a20      	ldr	r0, [r4, #32]
   d60c6:	2100      	movs	r1, #0
   d60c8:	f000 fe32 	bl	d6d30 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d60cc:	f1b8 0f00 	cmp.w	r8, #0
   d60d0:	d00d      	beq.n	d60ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d60d2:	215b      	movs	r1, #91	; 0x5b
   d60d4:	4620      	mov	r0, r4
   d60d6:	f7ff fa32 	bl	d553e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d60da:	4641      	mov	r1, r8
   d60dc:	4620      	mov	r0, r4
   d60de:	f7ff fa20 	bl	d5522 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d60e2:	6823      	ldr	r3, [r4, #0]
   d60e4:	494e      	ldr	r1, [pc, #312]	; (d6220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d60e6:	68db      	ldr	r3, [r3, #12]
   d60e8:	2202      	movs	r2, #2
   d60ea:	4620      	mov	r0, r4
   d60ec:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d60ee:	792b      	ldrb	r3, [r5, #4]
   d60f0:	07d9      	lsls	r1, r3, #31
   d60f2:	d525      	bpl.n	d6140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d60f4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d60f8:	212f      	movs	r1, #47	; 0x2f
   d60fa:	4640      	mov	r0, r8
   d60fc:	f001 ff29 	bl	d7f52 <strrchr>
    if (s1) {
   d6100:	b108      	cbz	r0, d6106 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6102:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6106:	4641      	mov	r1, r8
   d6108:	4620      	mov	r0, r4
   d610a:	f7ff fa0a 	bl	d5522 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d610e:	792b      	ldrb	r3, [r5, #4]
   d6110:	079a      	lsls	r2, r3, #30
   d6112:	d509      	bpl.n	d6128 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6114:	213a      	movs	r1, #58	; 0x3a
   d6116:	4620      	mov	r0, r4
   d6118:	f7ff fa11 	bl	d553e <_ZN5spark16StreamLogHandler5writeEc>
   d611c:	68eb      	ldr	r3, [r5, #12]
   d611e:	4a41      	ldr	r2, [pc, #260]	; (d6224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6120:	6a20      	ldr	r0, [r4, #32]
   d6122:	2100      	movs	r1, #0
   d6124:	f000 fe04 	bl	d6d30 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6128:	792b      	ldrb	r3, [r5, #4]
   d612a:	f013 0f04 	tst.w	r3, #4
   d612e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6130:	bf18      	it	ne
   d6132:	493d      	ldrne	r1, [pc, #244]	; (d6228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6134:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6136:	bf08      	it	eq
   d6138:	493c      	ldreq	r1, [pc, #240]	; (d622c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d613a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d613c:	4620      	mov	r0, r4
   d613e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6140:	792b      	ldrb	r3, [r5, #4]
   d6142:	075b      	lsls	r3, r3, #29
   d6144:	d518      	bpl.n	d6178 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6146:	6929      	ldr	r1, [r5, #16]
   d6148:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d614a:	4613      	mov	r3, r2
   d614c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6150:	b138      	cbz	r0, d6162 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6152:	2820      	cmp	r0, #32
   d6154:	d101      	bne.n	d615a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6156:	4619      	mov	r1, r3
   d6158:	e001      	b.n	d615e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d615a:	2828      	cmp	r0, #40	; 0x28
   d615c:	d001      	beq.n	d6162 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d615e:	461a      	mov	r2, r3
   d6160:	e7f3      	b.n	d614a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6162:	6823      	ldr	r3, [r4, #0]
   d6164:	1a52      	subs	r2, r2, r1
   d6166:	68db      	ldr	r3, [r3, #12]
   d6168:	4620      	mov	r0, r4
   d616a:	4798      	blx	r3
        write("(): ", 4);
   d616c:	6823      	ldr	r3, [r4, #0]
   d616e:	4930      	ldr	r1, [pc, #192]	; (d6230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6170:	68db      	ldr	r3, [r3, #12]
   d6172:	2204      	movs	r2, #4
   d6174:	4620      	mov	r0, r4
   d6176:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6178:	2100      	movs	r1, #0
   d617a:	4638      	mov	r0, r7
   d617c:	f7fe fd54 	bl	d4c28 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6180:	4601      	mov	r1, r0
   d6182:	4620      	mov	r0, r4
   d6184:	f7ff f9cd 	bl	d5522 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6188:	6823      	ldr	r3, [r4, #0]
   d618a:	4928      	ldr	r1, [pc, #160]	; (d622c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d618c:	68db      	ldr	r3, [r3, #12]
   d618e:	2202      	movs	r2, #2
   d6190:	4620      	mov	r0, r4
   d6192:	4798      	blx	r3
    // Message
    if (msg) {
   d6194:	b11e      	cbz	r6, d619e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6196:	4631      	mov	r1, r6
   d6198:	4620      	mov	r0, r4
   d619a:	f7ff f9c2 	bl	d5522 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d619e:	792b      	ldrb	r3, [r5, #4]
   d61a0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d61a4:	d02d      	beq.n	d6202 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d61a6:	6823      	ldr	r3, [r4, #0]
   d61a8:	4922      	ldr	r1, [pc, #136]	; (d6234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d61aa:	68db      	ldr	r3, [r3, #12]
   d61ac:	4620      	mov	r0, r4
   d61ae:	2202      	movs	r2, #2
   d61b0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d61b2:	792b      	ldrb	r3, [r5, #4]
   d61b4:	06d8      	lsls	r0, r3, #27
   d61b6:	d50b      	bpl.n	d61d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d61b8:	6823      	ldr	r3, [r4, #0]
   d61ba:	491f      	ldr	r1, [pc, #124]	; (d6238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d61bc:	68db      	ldr	r3, [r3, #12]
   d61be:	2207      	movs	r2, #7
   d61c0:	4620      	mov	r0, r4
   d61c2:	4798      	blx	r3
   d61c4:	69ab      	ldr	r3, [r5, #24]
   d61c6:	4a1d      	ldr	r2, [pc, #116]	; (d623c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d61c8:	6a20      	ldr	r0, [r4, #32]
   d61ca:	2100      	movs	r1, #0
   d61cc:	f000 fdb0 	bl	d6d30 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d61d0:	792b      	ldrb	r3, [r5, #4]
   d61d2:	0699      	lsls	r1, r3, #26
   d61d4:	d511      	bpl.n	d61fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d61d6:	06da      	lsls	r2, r3, #27
   d61d8:	d505      	bpl.n	d61e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d61da:	6823      	ldr	r3, [r4, #0]
   d61dc:	4912      	ldr	r1, [pc, #72]	; (d6228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d61de:	68db      	ldr	r3, [r3, #12]
   d61e0:	2202      	movs	r2, #2
   d61e2:	4620      	mov	r0, r4
   d61e4:	4798      	blx	r3
            }
            write("details = ", 10);
   d61e6:	6823      	ldr	r3, [r4, #0]
   d61e8:	4915      	ldr	r1, [pc, #84]	; (d6240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d61ea:	68db      	ldr	r3, [r3, #12]
   d61ec:	4620      	mov	r0, r4
   d61ee:	220a      	movs	r2, #10
   d61f0:	4798      	blx	r3
            write(attr.details);
   d61f2:	69e9      	ldr	r1, [r5, #28]
   d61f4:	4620      	mov	r0, r4
   d61f6:	f7ff f994 	bl	d5522 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d61fa:	215d      	movs	r1, #93	; 0x5d
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff f99e 	bl	d553e <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6202:	6823      	ldr	r3, [r4, #0]
   d6204:	490f      	ldr	r1, [pc, #60]	; (d6244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6206:	68db      	ldr	r3, [r3, #12]
   d6208:	4620      	mov	r0, r4
   d620a:	2202      	movs	r2, #2
}
   d620c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6210:	4718      	bx	r3
   d6212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6216:	bf00      	nop
   d6218:	2003e5b0 	.word	0x2003e5b0
   d621c:	000d8493 	.word	0x000d8493
   d6220:	000d849a 	.word	0x000d849a
   d6224:	000d857d 	.word	0x000d857d
   d6228:	000d849d 	.word	0x000d849d
   d622c:	000d84a2 	.word	0x000d84a2
   d6230:	000d84a0 	.word	0x000d84a0
   d6234:	000d84a5 	.word	0x000d84a5
   d6238:	000d84a8 	.word	0x000d84a8
   d623c:	000d84b0 	.word	0x000d84b0
   d6240:	000d84b3 	.word	0x000d84b3
   d6244:	000d84be 	.word	0x000d84be

000d6248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d624c:	b085      	sub	sp, #20
   d624e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6252:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6254:	4606      	mov	r6, r0
   d6256:	460f      	mov	r7, r1
   d6258:	4691      	mov	r9, r2
   d625a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d625c:	f001 fad4 	bl	d7808 <_Z16_fetch_usbserialv>
   d6260:	4580      	cmp	r8, r0
   d6262:	d105      	bne.n	d6270 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6264:	484a      	ldr	r0, [pc, #296]	; (d6390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6266:	f000 fc5a 	bl	d6b1e <_ZN5spark12NetworkClass9listeningEv>
   d626a:	2800      	cmp	r0, #0
   d626c:	f040 808c 	bne.w	d6388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6270:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6272:	4a48      	ldr	r2, [pc, #288]	; (d6394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6274:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6276:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d627a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d627c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d627e:	f88d 8008 	strb.w	r8, [sp, #8]
   d6282:	f7fe fff0 	bl	d5266 <_ZN5spark10JSONWriter11beginObjectEv>
   d6286:	4641      	mov	r1, r8
   d6288:	4648      	mov	r0, r9
   d628a:	f7fe fccd 	bl	d4c28 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d628e:	4942      	ldr	r1, [pc, #264]	; (d6398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6290:	4680      	mov	r8, r0
   d6292:	2201      	movs	r2, #1
   d6294:	a801      	add	r0, sp, #4
   d6296:	f7ff f86b 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d629a:	4641      	mov	r1, r8
   d629c:	f7ff f931 	bl	d5502 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d62a0:	b13f      	cbz	r7, d62b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d62a2:	493e      	ldr	r1, [pc, #248]	; (d639c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d62a4:	2201      	movs	r2, #1
   d62a6:	a801      	add	r0, sp, #4
   d62a8:	f7ff f862 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d62ac:	4639      	mov	r1, r7
   d62ae:	f7ff f928 	bl	d5502 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d62b2:	b13d      	cbz	r5, d62c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d62b4:	493a      	ldr	r1, [pc, #232]	; (d63a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d62b6:	2201      	movs	r2, #1
   d62b8:	a801      	add	r0, sp, #4
   d62ba:	f7ff f859 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d62be:	4629      	mov	r1, r5
   d62c0:	f7ff f91f 	bl	d5502 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d62c4:	7923      	ldrb	r3, [r4, #4]
   d62c6:	07df      	lsls	r7, r3, #31
   d62c8:	d50e      	bpl.n	d62e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d62ca:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d62cc:	212f      	movs	r1, #47	; 0x2f
   d62ce:	4628      	mov	r0, r5
   d62d0:	f001 fe3f 	bl	d7f52 <strrchr>
    if (s1) {
   d62d4:	b100      	cbz	r0, d62d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d62d6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d62d8:	4932      	ldr	r1, [pc, #200]	; (d63a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d62da:	2201      	movs	r2, #1
   d62dc:	a801      	add	r0, sp, #4
   d62de:	f7ff f847 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d62e2:	4629      	mov	r1, r5
   d62e4:	f7ff f90d 	bl	d5502 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d62e8:	7923      	ldrb	r3, [r4, #4]
   d62ea:	079d      	lsls	r5, r3, #30
   d62ec:	d507      	bpl.n	d62fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d62ee:	492e      	ldr	r1, [pc, #184]	; (d63a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d62f0:	2202      	movs	r2, #2
   d62f2:	a801      	add	r0, sp, #4
   d62f4:	f7ff f83c 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d62f8:	68e1      	ldr	r1, [r4, #12]
   d62fa:	f7fe ffc1 	bl	d5280 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d62fe:	7923      	ldrb	r3, [r4, #4]
   d6300:	0758      	lsls	r0, r3, #29
   d6302:	d516      	bpl.n	d6332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6304:	6925      	ldr	r5, [r4, #16]
   d6306:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6308:	463b      	mov	r3, r7
   d630a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d630e:	b13a      	cbz	r2, d6320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d6310:	2a20      	cmp	r2, #32
   d6312:	d101      	bne.n	d6318 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6314:	461d      	mov	r5, r3
   d6316:	e001      	b.n	d631c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d6318:	2a28      	cmp	r2, #40	; 0x28
   d631a:	d001      	beq.n	d6320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d631c:	461f      	mov	r7, r3
   d631e:	e7f3      	b.n	d6308 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d6320:	2202      	movs	r2, #2
   d6322:	4922      	ldr	r1, [pc, #136]	; (d63ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6324:	a801      	add	r0, sp, #4
   d6326:	f7ff f823 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d632a:	1b7a      	subs	r2, r7, r5
   d632c:	4629      	mov	r1, r5
   d632e:	f7ff f82e 	bl	d538e <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6332:	7923      	ldrb	r3, [r4, #4]
   d6334:	0719      	lsls	r1, r3, #28
   d6336:	d507      	bpl.n	d6348 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6338:	491d      	ldr	r1, [pc, #116]	; (d63b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d633a:	2201      	movs	r2, #1
   d633c:	a801      	add	r0, sp, #4
   d633e:	f7ff f817 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d6342:	6961      	ldr	r1, [r4, #20]
   d6344:	f7fe ffae 	bl	d52a4 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6348:	7923      	ldrb	r3, [r4, #4]
   d634a:	06da      	lsls	r2, r3, #27
   d634c:	d508      	bpl.n	d6360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d634e:	2204      	movs	r2, #4
   d6350:	4918      	ldr	r1, [pc, #96]	; (d63b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6352:	eb0d 0002 	add.w	r0, sp, r2
   d6356:	f7ff f80b 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d635a:	69a1      	ldr	r1, [r4, #24]
   d635c:	f7fe ff90 	bl	d5280 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6360:	7923      	ldrb	r3, [r4, #4]
   d6362:	069b      	lsls	r3, r3, #26
   d6364:	d507      	bpl.n	d6376 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6366:	4914      	ldr	r1, [pc, #80]	; (d63b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6368:	2206      	movs	r2, #6
   d636a:	a801      	add	r0, sp, #4
   d636c:	f7ff f800 	bl	d5370 <_ZN5spark10JSONWriter4nameEPKcj>
   d6370:	69e1      	ldr	r1, [r4, #28]
   d6372:	f7ff f8c6 	bl	d5502 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6376:	a801      	add	r0, sp, #4
   d6378:	f7fe ff5f 	bl	d523a <_ZN5spark10JSONWriter9endObjectEv>
   d637c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d637e:	490f      	ldr	r1, [pc, #60]	; (d63bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6380:	6803      	ldr	r3, [r0, #0]
   d6382:	2202      	movs	r2, #2
   d6384:	68db      	ldr	r3, [r3, #12]
   d6386:	4798      	blx	r3
}
   d6388:	b005      	add	sp, #20
   d638a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d638e:	bf00      	nop
   d6390:	2003e5b0 	.word	0x2003e5b0
   d6394:	000d83dc 	.word	0x000d83dc
   d6398:	000d8426 	.word	0x000d8426
   d639c:	000d8439 	.word	0x000d8439
   d63a0:	000d84f2 	.word	0x000d84f2
   d63a4:	000d8130 	.word	0x000d8130
   d63a8:	000d84c1 	.word	0x000d84c1
   d63ac:	000d84c4 	.word	0x000d84c4
   d63b0:	000d8129 	.word	0x000d8129
   d63b4:	000d84c7 	.word	0x000d84c7
   d63b8:	000d84cc 	.word	0x000d84cc
   d63bc:	000d84be 	.word	0x000d84be

000d63c0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d63c0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d63c2:	2301      	movs	r3, #1
   d63c4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d63c6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d63c8:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d63ca:	b10b      	cbz	r3, d63d0 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d63cc:	68c0      	ldr	r0, [r0, #12]
   d63ce:	e006      	b.n	d63de <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d63d0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d63d2:	b128      	cbz	r0, d63e0 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d63d4:	6883      	ldr	r3, [r0, #8]
   d63d6:	b90b      	cbnz	r3, d63dc <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d63d8:	f001 fb77 	bl	d7aca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63dc:	68c3      	ldr	r3, [r0, #12]
   d63de:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d63e0:	2301      	movs	r3, #1
   d63e2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d63e4:	2000      	movs	r0, #0
    }
   d63e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d63ea:	f7fe ba4d 	b.w	d4888 <os_thread_exit>

000d63ee <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63ee:	2200      	movs	r2, #0
   d63f0:	4611      	mov	r1, r2
   d63f2:	6840      	ldr	r0, [r0, #4]
   d63f4:	f7fe bca6 	b.w	d4d44 <network_listening>

000d63f8 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63f8:	2200      	movs	r2, #0
   d63fa:	4611      	mov	r1, r2
   d63fc:	6840      	ldr	r0, [r0, #4]
   d63fe:	f7fe bcb1 	b.w	d4d64 <network_get_listen_timeout>

000d6402 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6402:	2200      	movs	r2, #0
   d6404:	6840      	ldr	r0, [r0, #4]
   d6406:	f7fe bca5 	b.w	d4d54 <network_set_listen_timeout>

000d640a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d640a:	2200      	movs	r2, #0
   d640c:	f081 0101 	eor.w	r1, r1, #1
   d6410:	6840      	ldr	r0, [r0, #4]
   d6412:	f7fe bc8f 	b.w	d4d34 <network_listen>

000d6416 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6416:	2300      	movs	r3, #0
   d6418:	461a      	mov	r2, r3
   d641a:	2101      	movs	r1, #1
   d641c:	6840      	ldr	r0, [r0, #4]
   d641e:	f7fe bc81 	b.w	d4d24 <network_off>

000d6422 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6422:	2300      	movs	r3, #0
   d6424:	461a      	mov	r2, r3
   d6426:	4619      	mov	r1, r3
   d6428:	6840      	ldr	r0, [r0, #4]
   d642a:	f7fe bc73 	b.w	d4d14 <network_on>

000d642e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d642e:	2200      	movs	r2, #0
   d6430:	4611      	mov	r1, r2
   d6432:	6840      	ldr	r0, [r0, #4]
   d6434:	f7fe bc66 	b.w	d4d04 <network_ready>

000d6438 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6438:	2200      	movs	r2, #0
   d643a:	4611      	mov	r1, r2
   d643c:	6840      	ldr	r0, [r0, #4]
   d643e:	f7fe bc51 	b.w	d4ce4 <network_connecting>

000d6442 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6442:	2200      	movs	r2, #0
   d6444:	2102      	movs	r1, #2
   d6446:	6840      	ldr	r0, [r0, #4]
   d6448:	f7fe bc54 	b.w	d4cf4 <network_disconnect>

000d644c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d644c:	2300      	movs	r3, #0
   d644e:	461a      	mov	r2, r3
   d6450:	6840      	ldr	r0, [r0, #4]
   d6452:	f7fe bc3f 	b.w	d4cd4 <network_connect>

000d6456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6456:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6458:	4605      	mov	r5, r0
   d645a:	b188      	cbz	r0, d6480 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d645c:	6804      	ldr	r4, [r0, #0]
   d645e:	b14c      	cbz	r4, d6474 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6460:	68a3      	ldr	r3, [r4, #8]
   d6462:	b11b      	cbz	r3, d646c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6464:	2203      	movs	r2, #3
   d6466:	4621      	mov	r1, r4
   d6468:	4620      	mov	r0, r4
   d646a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d646c:	2110      	movs	r1, #16
   d646e:	4620      	mov	r0, r4
   d6470:	f001 fb0f 	bl	d7a92 <_ZdlPvj>
   d6474:	4628      	mov	r0, r5
   d6476:	2114      	movs	r1, #20
      }
   d6478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d647c:	f001 bb09 	b.w	d7a92 <_ZdlPvj>
   d6480:	bd38      	pop	{r3, r4, r5, pc}

000d6482 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6482:	b110      	cbz	r0, d648a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6484:	6803      	ldr	r3, [r0, #0]
   d6486:	685b      	ldr	r3, [r3, #4]
   d6488:	4718      	bx	r3
   d648a:	4770      	bx	lr

000d648c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d648c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d648e:	6803      	ldr	r3, [r0, #0]
   d6490:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6492:	b1bb      	cbz	r3, d64c4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6494:	6858      	ldr	r0, [r3, #4]
   d6496:	f7fe f9bf 	bl	d4818 <os_thread_is_current>
   d649a:	b978      	cbnz	r0, d64bc <_ZN6ThreadD1Ev+0x30>
   d649c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d649e:	7c5a      	ldrb	r2, [r3, #17]
   d64a0:	b912      	cbnz	r2, d64a8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d64a2:	6858      	ldr	r0, [r3, #4]
   d64a4:	f7fe f9c0 	bl	d4828 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d64a8:	6823      	ldr	r3, [r4, #0]
   d64aa:	6858      	ldr	r0, [r3, #4]
   d64ac:	f7fe f9c4 	bl	d4838 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64b0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d64b2:	2300      	movs	r3, #0
   d64b4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d64b6:	b128      	cbz	r0, d64c4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d64b8:	f7ff ffcd 	bl	d6456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64bc:	6820      	ldr	r0, [r4, #0]
   d64be:	b108      	cbz	r0, d64c4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d64c0:	f7ff ffc9 	bl	d6456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d64c4:	4620      	mov	r0, r4
   d64c6:	bd10      	pop	{r4, pc}

000d64c8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d64c8:	b538      	push	{r3, r4, r5, lr}
   d64ca:	4b0c      	ldr	r3, [pc, #48]	; (d64fc <_ZN5spark9MeshClassD1Ev+0x34>)
   d64cc:	6003      	str	r3, [r0, #0]
   d64ce:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64d0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d64d4:	b108      	cbz	r0, d64da <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d64d6:	f7fd fde4 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64da:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d64de:	b135      	cbz	r5, d64ee <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d64e0:	4628      	mov	r0, r5
   d64e2:	f7ff ffd3 	bl	d648c <_ZN6ThreadD1Ev>
   d64e6:	2104      	movs	r1, #4
   d64e8:	4628      	mov	r0, r5
   d64ea:	f001 fad2 	bl	d7a92 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64ee:	68a0      	ldr	r0, [r4, #8]
   d64f0:	b108      	cbz	r0, d64f6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d64f2:	f7ff ffc6 	bl	d6482 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d64f6:	4620      	mov	r0, r4
   d64f8:	bd38      	pop	{r3, r4, r5, pc}
   d64fa:	bf00      	nop
   d64fc:	000d8530 	.word	0x000d8530

000d6500 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6504:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6506:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d650a:	4606      	mov	r6, r0
   d650c:	4688      	mov	r8, r1
   d650e:	4691      	mov	r9, r2
   d6510:	469a      	mov	sl, r3
   d6512:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6514:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6516:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6518:	454b      	cmp	r3, r9
   d651a:	d129      	bne.n	d6570 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d651c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d651e:	4553      	cmp	r3, sl
   d6520:	d126      	bne.n	d6570 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d6522:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d6526:	455b      	cmp	r3, fp
   d6528:	d122      	bne.n	d6570 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d652a:	2140      	movs	r1, #64	; 0x40
   d652c:	4640      	mov	r0, r8
   d652e:	f001 fd04 	bl	d7f3a <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d6532:	4641      	mov	r1, r8
   d6534:	4602      	mov	r2, r0
   d6536:	4620      	mov	r0, r4
   d6538:	f001 fcea 	bl	d7f10 <strncmp>
   d653c:	b9c0      	cbnz	r0, d6570 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d653e:	b16f      	cbz	r7, d655c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d6540:	210c      	movs	r1, #12
   d6542:	4638      	mov	r0, r7
   d6544:	f001 fcf9 	bl	d7f3a <strnlen>
                if (id_len)
   d6548:	4602      	mov	r2, r0
   d654a:	b138      	cbz	r0, d655c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d654c:	2358      	movs	r3, #88	; 0x58
   d654e:	fb03 6005 	mla	r0, r3, r5, r6
   d6552:	4639      	mov	r1, r7
   d6554:	3049      	adds	r0, #73	; 0x49
   d6556:	f001 fcdb 	bl	d7f10 <strncmp>
   d655a:	e004      	b.n	d6566 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d655c:	2058      	movs	r0, #88	; 0x58
   d655e:	fb00 6505 	mla	r5, r0, r5, r6
   d6562:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d6566:	fab0 f080 	clz	r0, r0
   d656a:	0940      	lsrs	r0, r0, #5
   d656c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6570:	3501      	adds	r5, #1
   d6572:	2d05      	cmp	r5, #5
   d6574:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d6578:	d1cd      	bne.n	d6516 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d657a:	2000      	movs	r0, #0
}
   d657c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6580 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6584:	b085      	sub	sp, #20
   d6586:	4607      	mov	r7, r0
   d6588:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d658c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d658e:	9601      	str	r6, [sp, #4]
   d6590:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6594:	4689      	mov	r9, r1
   d6596:	9202      	str	r2, [sp, #8]
   d6598:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d659a:	f7ff ffb1 	bl	d6500 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d659e:	2800      	cmp	r0, #0
   d65a0:	d13c      	bne.n	d661c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d65a2:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d65a4:	2358      	movs	r3, #88	; 0x58
   d65a6:	fb03 7504 	mla	r5, r3, r4, r7
   d65aa:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d65ae:	f1b8 0f00 	cmp.w	r8, #0
   d65b2:	d12e      	bne.n	d6612 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d65b4:	2140      	movs	r1, #64	; 0x40
   d65b6:	4648      	mov	r0, r9
   d65b8:	f001 fcbf 	bl	d7f3a <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d65bc:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d65be:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d65c0:	4602      	mov	r2, r0
   d65c2:	4628      	mov	r0, r5
   d65c4:	f001 fbe9 	bl	d7d9a <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d65c8:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d65cc:	4641      	mov	r1, r8
   d65ce:	eb05 000b 	add.w	r0, r5, fp
   d65d2:	f001 fc08 	bl	d7de6 <memset>
            event_handlers[i].handler = handler;
   d65d6:	9b02      	ldr	r3, [sp, #8]
   d65d8:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d65da:	9b03      	ldr	r3, [sp, #12]
   d65dc:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d65de:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d65e2:	b12e      	cbz	r6, d65f0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d65e4:	210c      	movs	r1, #12
   d65e6:	4630      	mov	r0, r6
   d65e8:	f001 fca7 	bl	d7f3a <strnlen>
   d65ec:	4605      	mov	r5, r0
   d65ee:	e000      	b.n	d65f2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d65f0:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d65f2:	2058      	movs	r0, #88	; 0x58
   d65f4:	4344      	muls	r4, r0
   d65f6:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d65f8:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d65fa:	462a      	mov	r2, r5
   d65fc:	4631      	mov	r1, r6
   d65fe:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d6600:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6602:	f001 fbca 	bl	d7d9a <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6606:	2000      	movs	r0, #0
   d6608:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d660c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d6610:	e005      	b.n	d661e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6612:	3401      	adds	r4, #1
   d6614:	2c05      	cmp	r4, #5
   d6616:	d1c6      	bne.n	d65a6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6618:	4802      	ldr	r0, [pc, #8]	; (d6624 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d661a:	e000      	b.n	d661e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d661c:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d661e:	b005      	add	sp, #20
   d6620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6624:	fffffefc 	.word	0xfffffefc

000d6628 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6628:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d662a:	2300      	movs	r3, #0
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	9300      	str	r3, [sp, #0]
   d6630:	f7ff ffa6 	bl	d6580 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6634:	b003      	add	sp, #12
   d6636:	f85d fb04 	ldr.w	pc, [sp], #4

000d663a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d663a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d663e:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d6640:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6642:	460d      	mov	r5, r1
   d6644:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6646:	f001 fc5b 	bl	d7f00 <strlen>
   d664a:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d664e:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d6650:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6652:	b1ab      	cbz	r3, d6680 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d6654:	2140      	movs	r1, #64	; 0x40
   d6656:	4620      	mov	r0, r4
   d6658:	f001 fc6f 	bl	d7f3a <strnlen>

        if (event_name_length < filter_length)
   d665c:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d665e:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d6660:	d30b      	bcc.n	d667a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d6662:	4629      	mov	r1, r5
   d6664:	4620      	mov	r0, r4
   d6666:	f001 fb89 	bl	d7d7c <memcmp>
        if (0 == cmp)
   d666a:	b930      	cbnz	r0, d667a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d666c:	9000      	str	r0, [sp, #0]
   d666e:	4643      	mov	r3, r8
   d6670:	462a      	mov	r2, r5
   d6672:	4621      	mov	r1, r4
   d6674:	2058      	movs	r0, #88	; 0x58
   d6676:	f7fe fb13 	bl	d4ca0 <system_invoke_event_handler>
   d667a:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d667c:	42b4      	cmp	r4, r6
   d667e:	d1e7      	bne.n	d6650 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d6680:	b002      	add	sp, #8
   d6682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6688 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6688:	b530      	push	{r4, r5, lr}
   d668a:	b08d      	sub	sp, #52	; 0x34
   d668c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d668e:	2211      	movs	r2, #17
   d6690:	2100      	movs	r1, #0
   d6692:	a801      	add	r0, sp, #4
   d6694:	f001 fba7 	bl	d7de6 <memset>
    addr.v = 6;
   d6698:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d669a:	aa01      	add	r2, sp, #4
   d669c:	4909      	ldr	r1, [pc, #36]	; (d66c4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d669e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d66a2:	200a      	movs	r0, #10
   d66a4:	f7fe f9b0 	bl	d4a08 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d66a8:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d66aa:	a901      	add	r1, sp, #4
   d66ac:	a806      	add	r0, sp, #24
   d66ae:	f7fe fccb 	bl	d5048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d66b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66b4:	3404      	adds	r4, #4
   d66b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66b8:	682b      	ldr	r3, [r5, #0]
   d66ba:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d66bc:	2000      	movs	r0, #0
   d66be:	b00d      	add	sp, #52	; 0x34
   d66c0:	bd30      	pop	{r4, r5, pc}
   d66c2:	bf00      	nop
   d66c4:	000d855c 	.word	0x000d855c

000d66c8 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d66c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66cc:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d66ce:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d66d2:	b08a      	sub	sp, #40	; 0x28
   d66d4:	4630      	mov	r0, r6
   d66d6:	f7fe ff21 	bl	d551c <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d66da:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d66dc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d66e0:	f7fe f8ca 	bl	d4878 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d66e4:	2c00      	cmp	r4, #0
   d66e6:	d063      	beq.n	d67b0 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d66e8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d66ec:	b163      	cbz	r3, d6708 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d66ee:	6823      	ldr	r3, [r4, #0]
   d66f0:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d66f4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d66f6:	4620      	mov	r0, r4
   d66f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66fc:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d6700:	47b8      	blx	r7
        if (len > 0) {
   d6702:	1e04      	subs	r4, r0, #0
   d6704:	dc13      	bgt.n	d672e <_ZN5spark11MeshPublish4pollEv+0x66>
   d6706:	e056      	b.n	d67b6 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d6708:	492d      	ldr	r1, [pc, #180]	; (d67c0 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d670a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d670e:	f001 f9da 	bl	d7ac6 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6712:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d6716:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d671a:	b113      	cbz	r3, d6722 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d671c:	4618      	mov	r0, r3
   d671e:	f7fd fcc0 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d6722:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6726:	2b00      	cmp	r3, #0
   d6728:	d1e1      	bne.n	d66ee <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d672a:	4826      	ldr	r0, [pc, #152]	; (d67c4 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d672c:	e044      	b.n	d67b8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d672e:	2320      	movs	r3, #32
   d6730:	4a25      	ldr	r2, [pc, #148]	; (d67c8 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d6732:	9302      	str	r3, [sp, #8]
   d6734:	9200      	str	r2, [sp, #0]
   d6736:	2300      	movs	r3, #0
   d6738:	9401      	str	r4, [sp, #4]
   d673a:	aa02      	add	r2, sp, #8
   d673c:	4923      	ldr	r1, [pc, #140]	; (d67cc <_ZN5spark11MeshPublish4pollEv+0x104>)
   d673e:	9303      	str	r3, [sp, #12]
   d6740:	2001      	movs	r0, #1
   d6742:	f7fe fa69 	bl	d4c18 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6746:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d674a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d674c:	781b      	ldrb	r3, [r3, #0]
   d674e:	bb6b      	cbnz	r3, d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d6750:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d6752:	4621      	mov	r1, r4
   d6754:	4638      	mov	r0, r7
   d6756:	f001 fbf0 	bl	d7f3a <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d675a:	b338      	cbz	r0, d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d675c:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d675e:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d6760:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d6764:	dd22      	ble.n	d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6766:	5c3b      	ldrb	r3, [r7, r0]
   d6768:	bb03      	cbnz	r3, d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d676a:	3c01      	subs	r4, #1
   d676c:	d00e      	beq.n	d678c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d676e:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d6772:	4621      	mov	r1, r4
   d6774:	4640      	mov	r0, r8
   d6776:	f001 fbe0 	bl	d7f3a <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d677a:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d677c:	2c00      	cmp	r4, #0
   d677e:	dd15      	ble.n	d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d6780:	f818 3000 	ldrb.w	r3, [r8, r0]
   d6784:	b993      	cbnz	r3, d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d6786:	2c01      	cmp	r4, #1
   d6788:	d002      	beq.n	d6790 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d678a:	e00f      	b.n	d67ac <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d678c:	f8df 8044 	ldr.w	r8, [pc, #68]	; d67d4 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d6790:	4630      	mov	r0, r6
   d6792:	f7fe fec3 	bl	d551c <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d6796:	4642      	mov	r2, r8
   d6798:	4639      	mov	r1, r7
   d679a:	1d28      	adds	r0, r5, #4
   d679c:	f7ff ff4d 	bl	d663a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d67a0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d67a4:	f7fe f868 	bl	d4878 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d67a8:	2000      	movs	r0, #0
   d67aa:	e005      	b.n	d67b8 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d67ac:	4808      	ldr	r0, [pc, #32]	; (d67d0 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d67ae:	e003      	b.n	d67b8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d67b0:	2064      	movs	r0, #100	; 0x64
   d67b2:	f7fe f879 	bl	d48a8 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d67b6:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d67b8:	b00a      	add	sp, #40	; 0x28
   d67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67be:	bf00      	nop
   d67c0:	000d86cc 	.word	0x000d86cc
   d67c4:	fffffefc 	.word	0xfffffefc
   d67c8:	000d8570 	.word	0x000d8570
   d67cc:	000d8569 	.word	0x000d8569
   d67d0:	fffffee8 	.word	0xfffffee8
   d67d4:	000d84c0 	.word	0x000d84c0

000d67d8 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d67d8:	b510      	push	{r4, lr}
   d67da:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d67dc:	f3bf 8f5f 	dmb	sy
   d67e0:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d67e4:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d67e8:	b91b      	cbnz	r3, d67f2 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d67ea:	4620      	mov	r0, r4
   d67ec:	f7ff ff6c 	bl	d66c8 <_ZN5spark11MeshPublish4pollEv>
   d67f0:	e7f4      	b.n	d67dc <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d67f2:	bd10      	pop	{r4, pc}

000d67f4 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d67f4:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67f6:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d67f8:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d67fa:	b144      	cbz	r4, d680e <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d67fc:	4620      	mov	r0, r4
   d67fe:	f7ff fe45 	bl	d648c <_ZN6ThreadD1Ev>
   d6802:	4620      	mov	r0, r4
   d6804:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d6806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d680a:	f001 b942 	b.w	d7a92 <_ZdlPvj>
   d680e:	bd10      	pop	{r4, pc}

000d6810 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d6810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6814:	4605      	mov	r5, r0
   d6816:	b08a      	sub	sp, #40	; 0x28
   d6818:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d681c:	f7fe fe7e 	bl	d551c <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d6820:	682c      	ldr	r4, [r5, #0]
   d6822:	2c00      	cmp	r4, #0
   d6824:	d17b      	bne.n	d691e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d6826:	204c      	movs	r0, #76	; 0x4c
   d6828:	f7fd fc35 	bl	d4096 <_Znwj>
   d682c:	4606      	mov	r6, r0
   d682e:	2800      	cmp	r0, #0
   d6830:	d073      	beq.n	d691a <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d6832:	f000 fe4f 	bl	d74d4 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d6836:	4622      	mov	r2, r4
   d6838:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d683c:	4630      	mov	r0, r6
   d683e:	f000 fe79 	bl	d7534 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6842:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d6844:	483a      	ldr	r0, [pc, #232]	; (d6930 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6846:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d684a:	f7fe f8ad 	bl	d49a8 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d684e:	6833      	ldr	r3, [r6, #0]
   d6850:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6854:	6a1b      	ldr	r3, [r3, #32]
   d6856:	f249 0169 	movw	r1, #36969	; 0x9069
   d685a:	4630      	mov	r0, r6
   d685c:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d685e:	a804      	add	r0, sp, #16
   d6860:	f7fe fbe4 	bl	d502c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6864:	a804      	add	r0, sp, #16
   d6866:	f7ff ff0f 	bl	d6688 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d686a:	2800      	cmp	r0, #0
   d686c:	db4a      	blt.n	d6904 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d686e:	a904      	add	r1, sp, #16
   d6870:	4630      	mov	r0, r6
   d6872:	f000 fecb 	bl	d760c <_ZN3UDP13joinMulticastERK9IPAddress>
   d6876:	2800      	cmp	r0, #0
   d6878:	db44      	blt.n	d6904 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d687a:	f3bf 8f5f 	dmb	sy
   d687e:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d6882:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6886:	492b      	ldr	r1, [pc, #172]	; (d6934 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6888:	2004      	movs	r0, #4
   d688a:	f001 f90d 	bl	d7aa8 <_ZnwjRKSt9nothrow_t>
   d688e:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d6892:	4607      	mov	r7, r0
   d6894:	b348      	cbz	r0, d68ea <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6896:	4927      	ldr	r1, [pc, #156]	; (d6934 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6898:	2014      	movs	r0, #20
   d689a:	f001 f905 	bl	d7aa8 <_ZnwjRKSt9nothrow_t>
   d689e:	b128      	cbz	r0, d68ac <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d68a0:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d68a2:	6004      	str	r4, [r0, #0]
   d68a4:	6044      	str	r4, [r0, #4]
   d68a6:	6084      	str	r4, [r0, #8]
   d68a8:	60c4      	str	r4, [r0, #12]
   d68aa:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68ac:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d68ae:	b1b0      	cbz	r0, d68de <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d68b0:	4b21      	ldr	r3, [pc, #132]	; (d6938 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d68b2:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d68b4:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68b6:	4921      	ldr	r1, [pc, #132]	; (d693c <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d68b8:	60dd      	str	r5, [r3, #12]
   d68ba:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d68c0:	e88d 0009 	stmia.w	sp, {r0, r3}
   d68c4:	2203      	movs	r2, #3
   d68c6:	4b1e      	ldr	r3, [pc, #120]	; (d6940 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d68c8:	3004      	adds	r0, #4
   d68ca:	f7fd ff9d 	bl	d4808 <os_thread_create>
   d68ce:	b930      	cbnz	r0, d68de <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d68d0:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d68d2:	7c1b      	ldrb	r3, [r3, #16]
   d68d4:	b94b      	cbnz	r3, d68ea <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d68d6:	2001      	movs	r0, #1
   d68d8:	f7fd ffe6 	bl	d48a8 <HAL_Delay_Milliseconds>
   d68dc:	e7f8      	b.n	d68d0 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68de:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68e0:	2300      	movs	r3, #0
   d68e2:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d68e4:	b108      	cbz	r0, d68ea <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d68e6:	f7ff fdb6 	bl	d6456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d68ea:	4639      	mov	r1, r7
   d68ec:	4640      	mov	r0, r8
   d68ee:	f7ff ff81 	bl	d67f4 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d68f2:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d68f6:	b13b      	cbz	r3, d6908 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68f8:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68fa:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d68fc:	b130      	cbz	r0, d690c <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d68fe:	f7ff fdc0 	bl	d6482 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6902:	e00c      	b.n	d691e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d6904:	4604      	mov	r4, r0
   d6906:	e003      	b.n	d6910 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d6908:	4c0e      	ldr	r4, [pc, #56]	; (d6944 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d690a:	e001      	b.n	d6910 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d690c:	4604      	mov	r4, r0
   d690e:	e007      	b.n	d6920 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6910:	b136      	cbz	r6, d6920 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d6912:	4630      	mov	r0, r6
   d6914:	f7ff fdb5 	bl	d6482 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6918:	e002      	b.n	d6920 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d691a:	4c0a      	ldr	r4, [pc, #40]	; (d6944 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d691c:	e000      	b.n	d6920 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d691e:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6920:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6924:	f7fd ffa8 	bl	d4878 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d6928:	4620      	mov	r0, r4
   d692a:	b00a      	add	sp, #40	; 0x28
   d692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6930:	000d8580 	.word	0x000d8580
   d6934:	000d86cc 	.word	0x000d86cc
   d6938:	000d67d9 	.word	0x000d67d9
   d693c:	000d8584 	.word	0x000d8584
   d6940:	000d63c1 	.word	0x000d63c1
   d6944:	fffffefc 	.word	0xfffffefc

000d6948 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d6948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d694c:	4605      	mov	r5, r0
   d694e:	b08c      	sub	sp, #48	; 0x30
   d6950:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d6952:	460f      	mov	r7, r1
   d6954:	b109      	cbz	r1, d695a <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d6956:	780b      	ldrb	r3, [r1, #0]
   d6958:	b90b      	cbnz	r3, d695e <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d695a:	4c35      	ldr	r4, [pc, #212]	; (d6a30 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d695c:	e064      	b.n	d6a28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d695e:	4608      	mov	r0, r1
   d6960:	f001 face 	bl	d7f00 <strlen>
   d6964:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6966:	2e00      	cmp	r6, #0
   d6968:	d05c      	beq.n	d6a24 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d696a:	4630      	mov	r0, r6
   d696c:	f001 fac8 	bl	d7f00 <strlen>
   d6970:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6972:	f108 0302 	add.w	r3, r8, #2
   d6976:	4423      	add	r3, r4
   d6978:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d697c:	d84f      	bhi.n	d6a1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d697e:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d6982:	f7fe fdcb 	bl	d551c <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6986:	4628      	mov	r0, r5
   d6988:	f7ff ff42 	bl	d6810 <_ZN5spark11MeshPublish13initializeUdpEv>
   d698c:	2800      	cmp	r0, #0
   d698e:	db40      	blt.n	d6a12 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d6990:	4668      	mov	r0, sp
   d6992:	f7fe fb4b 	bl	d502c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6996:	4668      	mov	r0, sp
   d6998:	f7ff fe76 	bl	d6688 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d699c:	2800      	cmp	r0, #0
   d699e:	db38      	blt.n	d6a12 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d69a0:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d69a4:	f8da 3000 	ldr.w	r3, [sl]
   d69a8:	f10d 0c04 	add.w	ip, sp, #4
   d69ac:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d69b0:	4b20      	ldr	r3, [pc, #128]	; (d6a34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d69b2:	9306      	str	r3, [sp, #24]
   d69b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d69b8:	f10d 0e1c 	add.w	lr, sp, #28
   d69bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d69c0:	f8dc 3000 	ldr.w	r3, [ip]
   d69c4:	f88e 3000 	strb.w	r3, [lr]
   d69c8:	f249 0269 	movw	r2, #36969	; 0x9069
   d69cc:	a906      	add	r1, sp, #24
   d69ce:	4650      	mov	r0, sl
   d69d0:	47c8      	blx	r9
   d69d2:	2800      	cmp	r0, #0
   d69d4:	db1d      	blt.n	d6a12 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d69d6:	2300      	movs	r3, #0
   d69d8:	6828      	ldr	r0, [r5, #0]
   d69da:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d69de:	6803      	ldr	r3, [r0, #0]
   d69e0:	2201      	movs	r2, #1
   d69e2:	68db      	ldr	r3, [r3, #12]
   d69e4:	a906      	add	r1, sp, #24
   d69e6:	4798      	blx	r3
   d69e8:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d69ea:	6803      	ldr	r3, [r0, #0]
   d69ec:	f108 0201 	add.w	r2, r8, #1
   d69f0:	68db      	ldr	r3, [r3, #12]
   d69f2:	4639      	mov	r1, r7
   d69f4:	4798      	blx	r3
    if (dataLen > 0) {
   d69f6:	b12c      	cbz	r4, d6a04 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d69f8:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d69fa:	6803      	ldr	r3, [r0, #0]
   d69fc:	4622      	mov	r2, r4
   d69fe:	68db      	ldr	r3, [r3, #12]
   d6a00:	4631      	mov	r1, r6
   d6a02:	4798      	blx	r3
   d6a04:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d6a06:	6803      	ldr	r3, [r0, #0]
   d6a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a0a:	4798      	blx	r3
   d6a0c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6a10:	e000      	b.n	d6a14 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6a12:	4604      	mov	r4, r0
   d6a14:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6a18:	f7fd ff2e 	bl	d4878 <os_mutex_recursive_unlock>
   d6a1c:	e004      	b.n	d6a28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6a1e:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6a22:	e001      	b.n	d6a28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6a24:	4634      	mov	r4, r6
   d6a26:	e7a4      	b.n	d6972 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d6a28:	4620      	mov	r0, r4
   d6a2a:	b00c      	add	sp, #48	; 0x30
   d6a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a30:	fffffef2 	.word	0xfffffef2
   d6a34:	000d83a8 	.word	0x000d83a8

000d6a38 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d6a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a3a:	4605      	mov	r5, r0
   d6a3c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6a40:	460e      	mov	r6, r1
   d6a42:	4617      	mov	r7, r2
   d6a44:	f7fe fd6a 	bl	d551c <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6a48:	4628      	mov	r0, r5
   d6a4a:	f7ff fee1 	bl	d6810 <_ZN5spark11MeshPublish13initializeUdpEv>
   d6a4e:	2800      	cmp	r0, #0
   d6a50:	db07      	blt.n	d6a62 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d6a52:	463a      	mov	r2, r7
   d6a54:	4631      	mov	r1, r6
   d6a56:	1d28      	adds	r0, r5, #4
   d6a58:	f7ff fde6 	bl	d6628 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d6a5c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6a60:	e000      	b.n	d6a64 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d6a62:	4604      	mov	r4, r0
   d6a64:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6a68:	f7fd ff06 	bl	d4878 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6a70:	b538      	push	{r3, r4, r5, lr}
   d6a72:	4c0e      	ldr	r4, [pc, #56]	; (d6aac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6a74:	4b0e      	ldr	r3, [pc, #56]	; (d6ab0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6a76:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a78:	2500      	movs	r5, #0
   d6a7a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6a7c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a80:	6063      	str	r3, [r4, #4]
   d6a82:	60a5      	str	r5, [r4, #8]
   d6a84:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a88:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a8c:	f7fd fee4 	bl	d4858 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a90:	4b08      	ldr	r3, [pc, #32]	; (d6ab4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a92:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a96:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a9a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	4a06      	ldr	r2, [pc, #24]	; (d6ab8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6aa0:	4906      	ldr	r1, [pc, #24]	; (d6abc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6aa6:	f000 bfef 	b.w	d7a88 <__aeabi_atexit>
   d6aaa:	bf00      	nop
   d6aac:	2003e3dc 	.word	0x2003e3dc
   d6ab0:	000d8594 	.word	0x000d8594
   d6ab4:	000d8530 	.word	0x000d8530
   d6ab8:	2003e370 	.word	0x2003e370
   d6abc:	000d64c9 	.word	0x000d64c9

000d6ac0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6ac0:	2300      	movs	r3, #0
   d6ac2:	461a      	mov	r2, r3
   d6ac4:	6840      	ldr	r0, [r0, #4]
   d6ac6:	f7fe b905 	b.w	d4cd4 <network_connect>

000d6aca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6aca:	2200      	movs	r2, #0
   d6acc:	2102      	movs	r1, #2
   d6ace:	6840      	ldr	r0, [r0, #4]
   d6ad0:	f7fe b910 	b.w	d4cf4 <network_disconnect>

000d6ad4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6ad4:	2200      	movs	r2, #0
   d6ad6:	4611      	mov	r1, r2
   d6ad8:	6840      	ldr	r0, [r0, #4]
   d6ada:	f7fe b903 	b.w	d4ce4 <network_connecting>

000d6ade <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6ade:	2200      	movs	r2, #0
   d6ae0:	4611      	mov	r1, r2
   d6ae2:	6840      	ldr	r0, [r0, #4]
   d6ae4:	f7fe b90e 	b.w	d4d04 <network_ready>

000d6ae8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6ae8:	2300      	movs	r3, #0
   d6aea:	461a      	mov	r2, r3
   d6aec:	4619      	mov	r1, r3
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7fe b910 	b.w	d4d14 <network_on>

000d6af4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6af4:	2300      	movs	r3, #0
   d6af6:	461a      	mov	r2, r3
   d6af8:	4619      	mov	r1, r3
   d6afa:	6840      	ldr	r0, [r0, #4]
   d6afc:	f7fe b912 	b.w	d4d24 <network_off>

000d6b00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b00:	2200      	movs	r2, #0
   d6b02:	f081 0101 	eor.w	r1, r1, #1
   d6b06:	6840      	ldr	r0, [r0, #4]
   d6b08:	f7fe b914 	b.w	d4d34 <network_listen>

000d6b0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b0c:	2200      	movs	r2, #0
   d6b0e:	6840      	ldr	r0, [r0, #4]
   d6b10:	f7fe b920 	b.w	d4d54 <network_set_listen_timeout>

000d6b14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b14:	2200      	movs	r2, #0
   d6b16:	4611      	mov	r1, r2
   d6b18:	6840      	ldr	r0, [r0, #4]
   d6b1a:	f7fe b923 	b.w	d4d64 <network_get_listen_timeout>

000d6b1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b1e:	2200      	movs	r2, #0
   d6b20:	4611      	mov	r1, r2
   d6b22:	6840      	ldr	r0, [r0, #4]
   d6b24:	f7fe b90e 	b.w	d4d44 <network_listening>

000d6b28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b2c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b2e:	b095      	sub	sp, #84	; 0x54
   d6b30:	4616      	mov	r6, r2
   d6b32:	460d      	mov	r5, r1
   d6b34:	4607      	mov	r7, r0
    IPAddress addr;
   d6b36:	f7fe fa79 	bl	d502c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6b3a:	4621      	mov	r1, r4
   d6b3c:	2220      	movs	r2, #32
   d6b3e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b40:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b42:	f001 f950 	bl	d7de6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b46:	2340      	movs	r3, #64	; 0x40
   d6b48:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b4a:	4621      	mov	r1, r4
   d6b4c:	466b      	mov	r3, sp
   d6b4e:	aa0c      	add	r2, sp, #48	; 0x30
   d6b50:	4630      	mov	r0, r6
   d6b52:	f7fd ff81 	bl	d4a58 <netdb_getaddrinfo>
    if (!r) {
   d6b56:	4604      	mov	r4, r0
   d6b58:	2800      	cmp	r0, #0
   d6b5a:	d144      	bne.n	d6be6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b5c:	4602      	mov	r2, r0
   d6b5e:	2101      	movs	r1, #1
   d6b60:	6868      	ldr	r0, [r5, #4]
   d6b62:	f7fe f8cf 	bl	d4d04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b66:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b68:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b6a:	4622      	mov	r2, r4
   d6b6c:	6868      	ldr	r0, [r5, #4]
   d6b6e:	f7fe f8c9 	bl	d4d04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b72:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b74:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6b76:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b78:	2e00      	cmp	r6, #0
   d6b7a:	d034      	beq.n	d6be6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6b7c:	2900      	cmp	r1, #0
   d6b7e:	d132      	bne.n	d6be6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6b80:	6873      	ldr	r3, [r6, #4]
   d6b82:	2b02      	cmp	r3, #2
   d6b84:	d002      	beq.n	d6b8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6b86:	2b0a      	cmp	r3, #10
   d6b88:	d009      	beq.n	d6b9e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6b8a:	e02a      	b.n	d6be2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6b8c:	f1b8 0f00 	cmp.w	r8, #0
   d6b90:	d027      	beq.n	d6be2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6b92:	6971      	ldr	r1, [r6, #20]
   d6b94:	4638      	mov	r0, r7
   d6b96:	3104      	adds	r1, #4
   d6b98:	f7fe fa8b 	bl	d50b2 <_ZN9IPAddressaSEPKh>
   d6b9c:	e020      	b.n	d6be0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6b9e:	f1b9 0f00 	cmp.w	r9, #0
   d6ba2:	d01e      	beq.n	d6be2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6ba4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6ba6:	2211      	movs	r2, #17
   d6ba8:	a801      	add	r0, sp, #4
   d6baa:	f001 f91c 	bl	d7de6 <memset>
                    a.v = 6;
   d6bae:	2306      	movs	r3, #6
   d6bb0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bb4:	ad01      	add	r5, sp, #4
   d6bb6:	f104 0308 	add.w	r3, r4, #8
   d6bba:	3418      	adds	r4, #24
   d6bbc:	6818      	ldr	r0, [r3, #0]
   d6bbe:	6859      	ldr	r1, [r3, #4]
   d6bc0:	462a      	mov	r2, r5
   d6bc2:	c203      	stmia	r2!, {r0, r1}
   d6bc4:	3308      	adds	r3, #8
   d6bc6:	42a3      	cmp	r3, r4
   d6bc8:	4615      	mov	r5, r2
   d6bca:	d1f7      	bne.n	d6bbc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6bcc:	a901      	add	r1, sp, #4
   d6bce:	a806      	add	r0, sp, #24
   d6bd0:	ad07      	add	r5, sp, #28
   d6bd2:	f7fe fa39 	bl	d5048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6bd8:	1d3c      	adds	r4, r7, #4
   d6bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6bdc:	682b      	ldr	r3, [r5, #0]
   d6bde:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6be0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6be2:	69f6      	ldr	r6, [r6, #28]
   d6be4:	e7c8      	b.n	d6b78 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6be6:	9800      	ldr	r0, [sp, #0]
   d6be8:	f7fd ff2e 	bl	d4a48 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6bec:	4638      	mov	r0, r7
   d6bee:	b015      	add	sp, #84	; 0x54
   d6bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6bf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6bf4:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6bf6:	4a03      	ldr	r2, [pc, #12]	; (d6c04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6bf8:	601a      	str	r2, [r3, #0]
   d6bfa:	2200      	movs	r2, #0
   d6bfc:	605a      	str	r2, [r3, #4]
   d6bfe:	4770      	bx	lr
   d6c00:	2003e5b0 	.word	0x2003e5b0
   d6c04:	000d8594 	.word	0x000d8594

000d6c08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c0a:	4606      	mov	r6, r0
   d6c0c:	460d      	mov	r5, r1
   d6c0e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6c10:	2400      	movs	r4, #0
  while (size--) {
   d6c12:	42bd      	cmp	r5, r7
   d6c14:	d00c      	beq.n	d6c30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6c16:	6833      	ldr	r3, [r6, #0]
   d6c18:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6c1c:	689b      	ldr	r3, [r3, #8]
   d6c1e:	4630      	mov	r0, r6
   d6c20:	4798      	blx	r3
     if (chunk>=0)
   d6c22:	2800      	cmp	r0, #0
   d6c24:	db01      	blt.n	d6c2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6c26:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6c28:	e7f3      	b.n	d6c12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6c2a:	2c00      	cmp	r4, #0
   d6c2c:	bf08      	it	eq
   d6c2e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6c30:	4620      	mov	r0, r4
   d6c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6c34:	b570      	push	{r4, r5, r6, lr}
   d6c36:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6c38:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6c3a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6c3c:	b149      	cbz	r1, d6c52 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6c3e:	f001 f95f 	bl	d7f00 <strlen>
   d6c42:	682b      	ldr	r3, [r5, #0]
   d6c44:	4602      	mov	r2, r0
   d6c46:	4621      	mov	r1, r4
   d6c48:	4628      	mov	r0, r5
   d6c4a:	68db      	ldr	r3, [r3, #12]
    }
   d6c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6c50:	4718      	bx	r3
    }
   d6c52:	bd70      	pop	{r4, r5, r6, pc}

000d6c54 <_ZN5Print5printEPKc>:
   d6c54:	b508      	push	{r3, lr}
   d6c56:	f7ff ffed 	bl	d6c34 <_ZN5Print5writeEPKc>
   d6c5a:	bd08      	pop	{r3, pc}

000d6c5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6c5c:	6803      	ldr	r3, [r0, #0]
   d6c5e:	689b      	ldr	r3, [r3, #8]
   d6c60:	4718      	bx	r3

000d6c62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6c62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6c64:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6c66:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6c68:	f7ff fff8 	bl	d6c5c <_ZN5Print5printEc>
  n += print('\n');
   d6c6c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6c6e:	4604      	mov	r4, r0
  n += print('\n');
   d6c70:	4628      	mov	r0, r5
   d6c72:	f7ff fff3 	bl	d6c5c <_ZN5Print5printEc>
  return n;
}
   d6c76:	4420      	add	r0, r4
   d6c78:	bd38      	pop	{r3, r4, r5, pc}

000d6c7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6c7a:	b538      	push	{r3, r4, r5, lr}
   d6c7c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c7e:	f7ff ffd9 	bl	d6c34 <_ZN5Print5writeEPKc>
   d6c82:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6c84:	4628      	mov	r0, r5
   d6c86:	f7ff ffec 	bl	d6c62 <_ZN5Print7printlnEv>
  return n;
}
   d6c8a:	4420      	add	r0, r4
   d6c8c:	bd38      	pop	{r3, r4, r5, pc}

000d6c8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6c8e:	b530      	push	{r4, r5, lr}
   d6c90:	b08b      	sub	sp, #44	; 0x2c
   d6c92:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6c94:	2100      	movs	r1, #0
   d6c96:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6c9a:	2a01      	cmp	r2, #1
   d6c9c:	bf98      	it	ls
   d6c9e:	220a      	movls	r2, #10
   d6ca0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6ca4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6ca8:	fb05 3312 	mls	r3, r5, r2, r3
   d6cac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6cb0:	2b09      	cmp	r3, #9
   d6cb2:	bf94      	ite	ls
   d6cb4:	3330      	addls	r3, #48	; 0x30
   d6cb6:	3337      	addhi	r3, #55	; 0x37
   d6cb8:	b2db      	uxtb	r3, r3
   d6cba:	4621      	mov	r1, r4
   d6cbc:	f804 3901 	strb.w	r3, [r4], #-1
   d6cc0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6cc2:	2d00      	cmp	r5, #0
   d6cc4:	d1ee      	bne.n	d6ca4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6cc6:	f7ff ffb5 	bl	d6c34 <_ZN5Print5writeEPKc>
}
   d6cca:	b00b      	add	sp, #44	; 0x2c
   d6ccc:	bd30      	pop	{r4, r5, pc}

000d6cce <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6cce:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6cd0:	b92a      	cbnz	r2, d6cde <_ZN5Print5printEmi+0x10>
   d6cd2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6cd8:	689b      	ldr	r3, [r3, #8]
   d6cda:	b2c9      	uxtb	r1, r1
   d6cdc:	4718      	bx	r3
  else return printNumber(n, base);
   d6cde:	b2d2      	uxtb	r2, r2
}
   d6ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6ce4:	f7ff bfd3 	b.w	d6c8e <_ZN5Print11printNumberEmh>

000d6ce8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6ce8:	f7ff bff1 	b.w	d6cce <_ZN5Print5printEmi>

000d6cec <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6cf0:	4607      	mov	r7, r0
   d6cf2:	460e      	mov	r6, r1
  if (base == 0) {
   d6cf4:	4615      	mov	r5, r2
   d6cf6:	b92a      	cbnz	r2, d6d04 <_ZN5Print5printEli+0x18>
    return write(n);
   d6cf8:	6803      	ldr	r3, [r0, #0]
   d6cfa:	b2c9      	uxtb	r1, r1
   d6cfc:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6d02:	4718      	bx	r3
  } else if (base == 10) {
   d6d04:	2a0a      	cmp	r2, #10
   d6d06:	d102      	bne.n	d6d0e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6d08:	2900      	cmp	r1, #0
   d6d0a:	da01      	bge.n	d6d10 <_ZN5Print5printEli+0x24>
   d6d0c:	e004      	b.n	d6d18 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6d0e:	b2d2      	uxtb	r2, r2
  }
}
   d6d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6d14:	f7ff bfbb 	b.w	d6c8e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6d18:	212d      	movs	r1, #45	; 0x2d
   d6d1a:	f7ff ff9f 	bl	d6c5c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6d1e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6d20:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6d22:	4271      	negs	r1, r6
   d6d24:	4638      	mov	r0, r7
   d6d26:	f7ff ffb2 	bl	d6c8e <_ZN5Print11printNumberEmh>
   d6d2a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d30 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d30:	b40c      	push	{r2, r3}
   d6d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d36:	b087      	sub	sp, #28
   d6d38:	af00      	add	r7, sp, #0
   d6d3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6d3e:	4605      	mov	r5, r0
   d6d40:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6d44:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d46:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6d48:	4623      	mov	r3, r4
   d6d4a:	464a      	mov	r2, r9
   d6d4c:	2114      	movs	r1, #20
   d6d4e:	1d38      	adds	r0, r7, #4
   d6d50:	f7fe f828 	bl	d4da4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6d54:	2813      	cmp	r0, #19
   d6d56:	d805      	bhi.n	d6d64 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d58:	1d39      	adds	r1, r7, #4
   d6d5a:	4628      	mov	r0, r5
   d6d5c:	f7ff ff6a 	bl	d6c34 <_ZN5Print5writeEPKc>
   d6d60:	4604      	mov	r4, r0
   d6d62:	e013      	b.n	d6d8c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d64:	f100 0308 	add.w	r3, r0, #8
   d6d68:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6d6c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d6e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6d72:	1c41      	adds	r1, r0, #1
   d6d74:	4623      	mov	r3, r4
   d6d76:	464a      	mov	r2, r9
   d6d78:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6d7a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6d7c:	f7fe f812 	bl	d4da4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d80:	4669      	mov	r1, sp
   d6d82:	4628      	mov	r0, r5
   d6d84:	f7ff ff56 	bl	d6c34 <_ZN5Print5writeEPKc>
   d6d88:	4604      	mov	r4, r0
   d6d8a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6d8c:	b11e      	cbz	r6, d6d96 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6d8e:	4628      	mov	r0, r5
   d6d90:	f7ff ff67 	bl	d6c62 <_ZN5Print7printlnEv>
   d6d94:	4404      	add	r4, r0
    return n;
}
   d6d96:	4620      	mov	r0, r4
   d6d98:	371c      	adds	r7, #28
   d6d9a:	46bd      	mov	sp, r7
   d6d9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6da0:	b002      	add	sp, #8
   d6da2:	4770      	bx	lr

000d6da4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6da4:	b510      	push	{r4, lr}
  if (0 == max) {
   d6da6:	4604      	mov	r4, r0
   d6da8:	b130      	cbz	r0, d6db8 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6daa:	f001 f84d 	bl	d7e48 <rand>
   d6dae:	fb90 f3f4 	sdiv	r3, r0, r4
   d6db2:	fb03 0014 	mls	r0, r3, r4, r0
   d6db6:	bd10      	pop	{r4, pc}
}
   d6db8:	bd10      	pop	{r4, pc}

000d6dba <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6dba:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d6dbc:	b510      	push	{r4, lr}
   d6dbe:	4604      	mov	r4, r0
  if (min >= max) {
   d6dc0:	da04      	bge.n	d6dcc <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d6dc2:	1a08      	subs	r0, r1, r0
   d6dc4:	f7ff ffee 	bl	d6da4 <_Z6randomi>
   d6dc8:	4420      	add	r0, r4
   d6dca:	bd10      	pop	{r4, pc}
}
   d6dcc:	bd10      	pop	{r4, pc}

000d6dce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6dce:	b510      	push	{r4, lr}
   d6dd0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6dd2:	f7fe f83b 	bl	d4e4c <_ZNSt14_Function_baseD1Ev>
   d6dd6:	4620      	mov	r0, r4
   d6dd8:	bd10      	pop	{r4, pc}
	...

000d6ddc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ddc:	4803      	ldr	r0, [pc, #12]	; (d6dec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6dde:	4a04      	ldr	r2, [pc, #16]	; (d6df0 <_GLOBAL__sub_I_RGB+0x14>)
   d6de0:	4904      	ldr	r1, [pc, #16]	; (d6df4 <_GLOBAL__sub_I_RGB+0x18>)
   d6de2:	2300      	movs	r3, #0
   d6de4:	6083      	str	r3, [r0, #8]
   d6de6:	f000 be4f 	b.w	d7a88 <__aeabi_atexit>
   d6dea:	bf00      	nop
   d6dec:	2003e5b8 	.word	0x2003e5b8
   d6df0:	2003e370 	.word	0x2003e370
   d6df4:	000d6dcf 	.word	0x000d6dcf

000d6df8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6df8:	4770      	bx	lr

000d6dfa <_ZN8SPIClassD0Ev>:
   d6dfa:	b510      	push	{r4, lr}
   d6dfc:	2110      	movs	r1, #16
   d6dfe:	4604      	mov	r4, r0
   d6e00:	f000 fe47 	bl	d7a92 <_ZdlPvj>
   d6e04:	4620      	mov	r0, r4
   d6e06:	bd10      	pop	{r4, pc}

000d6e08 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6e08:	b570      	push	{r4, r5, r6, lr}
   d6e0a:	4b08      	ldr	r3, [pc, #32]	; (d6e2c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6e0c:	6003      	str	r3, [r0, #0]
   d6e0e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6e10:	2500      	movs	r5, #0
   d6e12:	460e      	mov	r6, r1
   d6e14:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6e18:	f7fd fd16 	bl	d4848 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6e1c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6e1e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6e20:	f7fd fe52 	bl	d4ac8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6e24:	60a5      	str	r5, [r4, #8]
}
   d6e26:	4620      	mov	r0, r4
   d6e28:	bd70      	pop	{r4, r5, r6, pc}
   d6e2a:	bf00      	nop
   d6e2c:	000d85c8 	.word	0x000d85c8

000d6e30 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6e30:	7900      	ldrb	r0, [r0, #4]
   d6e32:	f7fd be51 	b.w	d4ad8 <HAL_SPI_Is_Enabled>

000d6e36 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6e36:	2300      	movs	r3, #0
   d6e38:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6e3a:	6043      	str	r3, [r0, #4]
	len = 0;
   d6e3c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6e3e:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6e40:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6e42:	680c      	ldr	r4, [r1, #0]
   d6e44:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6e46:	684c      	ldr	r4, [r1, #4]
   d6e48:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6e4a:	688c      	ldr	r4, [r1, #8]
   d6e4c:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6e4e:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6e50:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6e52:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6e54:	bd10      	pop	{r4, pc}

000d6e56 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e56:	b510      	push	{r4, lr}
   d6e58:	4604      	mov	r4, r0
{
	free(buffer);
   d6e5a:	6800      	ldr	r0, [r0, #0]
   d6e5c:	f7fd ff92 	bl	d4d84 <free>
}
   d6e60:	4620      	mov	r0, r4
   d6e62:	bd10      	pop	{r4, pc}

000d6e64 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6e64:	b510      	push	{r4, lr}
   d6e66:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6e68:	6800      	ldr	r0, [r0, #0]
   d6e6a:	b108      	cbz	r0, d6e70 <_ZN6String10invalidateEv+0xc>
   d6e6c:	f7fd ff8a 	bl	d4d84 <free>
	buffer = NULL;
   d6e70:	2300      	movs	r3, #0
   d6e72:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6e74:	60a3      	str	r3, [r4, #8]
   d6e76:	6063      	str	r3, [r4, #4]
   d6e78:	bd10      	pop	{r4, pc}

000d6e7a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6e7a:	b538      	push	{r3, r4, r5, lr}
   d6e7c:	4604      	mov	r4, r0
   d6e7e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6e80:	6800      	ldr	r0, [r0, #0]
   d6e82:	3101      	adds	r1, #1
   d6e84:	f7fd ff86 	bl	d4d94 <realloc>
	if (newbuffer) {
   d6e88:	b110      	cbz	r0, d6e90 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6e8a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6e8e:	2001      	movs	r0, #1
	}
	return 0;
}
   d6e90:	bd38      	pop	{r3, r4, r5, pc}

000d6e92 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e92:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6e94:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e96:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6e98:	b113      	cbz	r3, d6ea0 <_ZN6String7reserveEj+0xe>
   d6e9a:	6843      	ldr	r3, [r0, #4]
   d6e9c:	428b      	cmp	r3, r1
   d6e9e:	d207      	bcs.n	d6eb0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6ea0:	4620      	mov	r0, r4
   d6ea2:	f7ff ffea 	bl	d6e7a <_ZN6String12changeBufferEj>
   d6ea6:	b120      	cbz	r0, d6eb2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6ea8:	68a3      	ldr	r3, [r4, #8]
   d6eaa:	b90b      	cbnz	r3, d6eb0 <_ZN6String7reserveEj+0x1e>
   d6eac:	6822      	ldr	r2, [r4, #0]
   d6eae:	7013      	strb	r3, [r2, #0]
   d6eb0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6eb2:	bd10      	pop	{r4, pc}

000d6eb4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6eb4:	b570      	push	{r4, r5, r6, lr}
   d6eb6:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6eb8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6eba:	4604      	mov	r4, r0
   d6ebc:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6ebe:	f7ff ffe8 	bl	d6e92 <_ZN6String7reserveEj>
   d6ec2:	b918      	cbnz	r0, d6ecc <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	f7ff ffcd 	bl	d6e64 <_ZN6String10invalidateEv>
		return *this;
   d6eca:	e009      	b.n	d6ee0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6ecc:	462a      	mov	r2, r5
   d6ece:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6ed0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6ed2:	6820      	ldr	r0, [r4, #0]
   d6ed4:	f000 ff61 	bl	d7d9a <memcpy>
	buffer[len] = 0;
   d6ed8:	6822      	ldr	r2, [r4, #0]
   d6eda:	68a3      	ldr	r3, [r4, #8]
   d6edc:	2100      	movs	r1, #0
   d6ede:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6ee0:	4620      	mov	r0, r4
   d6ee2:	bd70      	pop	{r4, r5, r6, pc}

000d6ee4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ee4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ee6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ee8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6eea:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6eec:	6043      	str	r3, [r0, #4]
	len = 0;
   d6eee:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ef0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6ef2:	460d      	mov	r5, r1
   d6ef4:	b139      	cbz	r1, d6f06 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6ef6:	4608      	mov	r0, r1
   d6ef8:	f001 f802 	bl	d7f00 <strlen>
   d6efc:	4629      	mov	r1, r5
   d6efe:	4602      	mov	r2, r0
   d6f00:	4620      	mov	r0, r4
   d6f02:	f7ff ffd7 	bl	d6eb4 <_ZN6String4copyEPKcj>
}
   d6f06:	4620      	mov	r0, r4
   d6f08:	bd38      	pop	{r3, r4, r5, pc}

000d6f0a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f0a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6f0c:	b510      	push	{r4, lr}
   d6f0e:	460b      	mov	r3, r1
   d6f10:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f12:	d007      	beq.n	d6f24 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f14:	6809      	ldr	r1, [r1, #0]
   d6f16:	b119      	cbz	r1, d6f20 <_ZN6StringaSERKS_+0x16>
   d6f18:	689a      	ldr	r2, [r3, #8]
   d6f1a:	f7ff ffcb 	bl	d6eb4 <_ZN6String4copyEPKcj>
   d6f1e:	e001      	b.n	d6f24 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6f20:	f7ff ffa0 	bl	d6e64 <_ZN6String10invalidateEv>

	return *this;
}
   d6f24:	4620      	mov	r0, r4
   d6f26:	bd10      	pop	{r4, pc}

000d6f28 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f28:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f2a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f2c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f2e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f30:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f32:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f34:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f36:	f7ff ffe8 	bl	d6f0a <_ZN6StringaSERKS_>
}
   d6f3a:	4620      	mov	r0, r4
   d6f3c:	bd10      	pop	{r4, pc}

000d6f3e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f3e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f40:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6f42:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6f44:	b912      	cbnz	r2, d6f4c <_ZNK6String6equalsEPKc+0xe>
   d6f46:	b919      	cbnz	r1, d6f50 <_ZNK6String6equalsEPKc+0x12>
   d6f48:	2001      	movs	r0, #1
   d6f4a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6f4c:	b911      	cbnz	r1, d6f54 <_ZNK6String6equalsEPKc+0x16>
   d6f4e:	6803      	ldr	r3, [r0, #0]
   d6f50:	7818      	ldrb	r0, [r3, #0]
   d6f52:	e002      	b.n	d6f5a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6f54:	6800      	ldr	r0, [r0, #0]
   d6f56:	f000 ffc9 	bl	d7eec <strcmp>
   d6f5a:	fab0 f080 	clz	r0, r0
   d6f5e:	0940      	lsrs	r0, r0, #5
}
   d6f60:	bd08      	pop	{r3, pc}
	...

000d6f64 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6f64:	4b04      	ldr	r3, [pc, #16]	; (d6f78 <_GLOBAL__sub_I_System+0x14>)
   d6f66:	2000      	movs	r0, #0
   d6f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f6c:	7018      	strb	r0, [r3, #0]
   d6f6e:	8058      	strh	r0, [r3, #2]
   d6f70:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6f72:	f7fd be69 	b.w	d4c48 <set_system_mode>
   d6f76:	bf00      	nop
   d6f78:	2003e5c8 	.word	0x2003e5c8

000d6f7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6f7c:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6f7e:	681a      	ldr	r2, [r3, #0]
   d6f80:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6f82:	601a      	str	r2, [r3, #0]
   d6f84:	4770      	bx	lr
   d6f86:	bf00      	nop
   d6f88:	2003e304 	.word	0x2003e304
   d6f8c:	2003e5d0 	.word	0x2003e5d0

000d6f90 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6f90:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6f92:	6804      	ldr	r4, [r0, #0]
   d6f94:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6f96:	46a4      	mov	ip, r4
    }
   d6f98:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6f9c:	4760      	bx	ip

000d6f9e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6f9e:	6803      	ldr	r3, [r0, #0]
   d6fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6fa2:	4718      	bx	r3

000d6fa4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6fa4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6fa6:	4770      	bx	lr

000d6fa8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6fa8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6faa:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6fac:	1a10      	subs	r0, r2, r0
   d6fae:	4770      	bx	lr

000d6fb0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6fb0:	b513      	push	{r0, r1, r4, lr}
   d6fb2:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6fb4:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6fb6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d6fba:	68d4      	ldr	r4, [r2, #12]
   d6fbc:	4619      	mov	r1, r3
   d6fbe:	2201      	movs	r2, #1
   d6fc0:	47a0      	blx	r4
}
   d6fc2:	b002      	add	sp, #8
   d6fc4:	bd10      	pop	{r4, pc}

000d6fc6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6fc6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6fc8:	6803      	ldr	r3, [r0, #0]
   d6fca:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6fcc:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6fce:	4798      	blx	r3
   d6fd0:	b128      	cbz	r0, d6fde <_ZN3UDP4readEv+0x18>
   d6fd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6fd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6fd6:	1c59      	adds	r1, r3, #1
   d6fd8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6fda:	5cd0      	ldrb	r0, [r2, r3]
   d6fdc:	bd10      	pop	{r4, pc}
   d6fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6fe2:	bd10      	pop	{r4, pc}

000d6fe4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6fe4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6fe6:	6803      	ldr	r3, [r0, #0]
   d6fe8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6fea:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6fec:	4798      	blx	r3
   d6fee:	b118      	cbz	r0, d6ff8 <_ZN3UDP4peekEv+0x14>
   d6ff0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6ff2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6ff4:	5cd0      	ldrb	r0, [r2, r3]
   d6ff6:	bd10      	pop	{r4, pc}
   d6ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6ffc:	bd10      	pop	{r4, pc}

000d6ffe <_ZN3UDP5flushEv>:

void UDP::flush() {
   d6ffe:	4770      	bx	lr

000d7000 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d7000:	b410      	push	{r4}
   d7002:	4603      	mov	r3, r0
   d7004:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7006:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d7008:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d700a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d700c:	6803      	ldr	r3, [r0, #0]
   d700e:	1a52      	subs	r2, r2, r1
   d7010:	68db      	ldr	r3, [r3, #12]
   d7012:	4421      	add	r1, r4
}
   d7014:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7018:	4718      	bx	r3

000d701a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d701a:	f1a0 0010 	sub.w	r0, r0, #16
   d701e:	f7ff bfef 	b.w	d7000 <_ZNK3UDP7printToER5Print>

000d7022 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7022:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d7024:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7026:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7028:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d702c:	4604      	mov	r4, r0
   d702e:	460f      	mov	r7, r1
   d7030:	4615      	mov	r5, r2
    stop();
   d7032:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d7034:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7036:	4632      	mov	r2, r6
   d7038:	2100      	movs	r1, #0
   d703a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d703c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d703e:	f000 fed2 	bl	d7de6 <memset>
    saddr.sin6_len = sizeof(saddr);
   d7042:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7046:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d7048:	260a      	movs	r6, #10
   d704a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d704e:	f7fd fcf3 	bl	d4a38 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7052:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7054:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7058:	2102      	movs	r1, #2
   d705a:	4630      	mov	r0, r6
   d705c:	f7fd fd2c 	bl	d4ab8 <sock_socket>

    if (_sock < 0) {
   d7060:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7062:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7064:	db24      	blt.n	d70b0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7066:	2204      	movs	r2, #4
   d7068:	9200      	str	r2, [sp, #0]
   d706a:	ab02      	add	r3, sp, #8
   d706c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7070:	f7fd fd02 	bl	d4a78 <sock_setsockopt>
   d7074:	b9e0      	cbnz	r0, d70b0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7076:	b195      	cbz	r5, d709e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7078:	9003      	str	r0, [sp, #12]
   d707a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d707e:	a903      	add	r1, sp, #12
   d7080:	b2e8      	uxtb	r0, r5
   d7082:	f7fd fc99 	bl	d49b8 <if_index_to_name>
   d7086:	b998      	cbnz	r0, d70b0 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7088:	2306      	movs	r3, #6
   d708a:	9300      	str	r3, [sp, #0]
   d708c:	f241 020b 	movw	r2, #4107	; 0x100b
   d7090:	ab03      	add	r3, sp, #12
   d7092:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7096:	6960      	ldr	r0, [r4, #20]
   d7098:	f7fd fcee 	bl	d4a78 <sock_setsockopt>
   d709c:	b940      	cbnz	r0, d70b0 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d709e:	221c      	movs	r2, #28
   d70a0:	a905      	add	r1, sp, #20
   d70a2:	6960      	ldr	r0, [r4, #20]
   d70a4:	f7fd fce0 	bl	d4a68 <sock_bind>
   d70a8:	b910      	cbnz	r0, d70b0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d70aa:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d70ac:	2001      	movs	r0, #1
   d70ae:	e004      	b.n	d70ba <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d70b0:	6823      	ldr	r3, [r4, #0]
   d70b2:	4620      	mov	r0, r4
   d70b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d70b6:	4798      	blx	r3
   d70b8:	2000      	movs	r0, #0
    }
    return bound;
}
   d70ba:	b00d      	add	sp, #52	; 0x34
   d70bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70be <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d70be:	b510      	push	{r4, lr}
   d70c0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d70c2:	6940      	ldr	r0, [r0, #20]
   d70c4:	2800      	cmp	r0, #0
   d70c6:	db01      	blt.n	d70cc <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d70c8:	f7fd fcde 	bl	d4a88 <sock_close>
    }

    _sock = -1;
   d70cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d70d0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d70d2:	2300      	movs	r3, #0
   d70d4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d70d6:	8723      	strh	r3, [r4, #56]	; 0x38
   d70d8:	bd10      	pop	{r4, pc}

000d70da <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d70da:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d70dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d70de:	4605      	mov	r5, r0
   d70e0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d70e2:	b113      	cbz	r3, d70ea <_ZN3UDP5writeEPKhj+0x10>
   d70e4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d70e6:	1a24      	subs	r4, r4, r0
   d70e8:	e000      	b.n	d70ec <_ZN3UDP5writeEPKhj+0x12>
   d70ea:	461c      	mov	r4, r3
   d70ec:	4294      	cmp	r4, r2
   d70ee:	bf28      	it	cs
   d70f0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d70f2:	4622      	mov	r2, r4
   d70f4:	4418      	add	r0, r3
   d70f6:	f000 fe50 	bl	d7d9a <memcpy>
    _offset += size;
   d70fa:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d70fc:	4423      	add	r3, r4
   d70fe:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d7100:	4620      	mov	r0, r4
   d7102:	bd38      	pop	{r3, r4, r5, pc}

000d7104 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7104:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d7106:	6803      	ldr	r3, [r0, #0]
   d7108:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d710a:	4604      	mov	r4, r0
   d710c:	460e      	mov	r6, r1
   d710e:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d7110:	4798      	blx	r3
   d7112:	b188      	cbz	r0, d7138 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d7114:	6823      	ldr	r3, [r4, #0]
   d7116:	4620      	mov	r0, r4
   d7118:	691b      	ldr	r3, [r3, #16]
   d711a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d711c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d711e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7120:	4285      	cmp	r5, r0
   d7122:	bfa8      	it	ge
   d7124:	4605      	movge	r5, r0
   d7126:	4419      	add	r1, r3
   d7128:	462a      	mov	r2, r5
   d712a:	4630      	mov	r0, r6
   d712c:	f000 fe35 	bl	d7d9a <memcpy>
        _offset += read;
   d7130:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7132:	442b      	add	r3, r5
   d7134:	86e3      	strh	r3, [r4, #54]	; 0x36
   d7136:	e001      	b.n	d713c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d7138:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d713c:	4628      	mov	r0, r5
   d713e:	bd70      	pop	{r4, r5, r6, pc}

000d7140 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d7140:	b570      	push	{r4, r5, r6, lr}
   d7142:	4604      	mov	r4, r0
   d7144:	4b05      	ldr	r3, [pc, #20]	; (d715c <_ZN3UDP8remoteIPEv+0x1c>)
   d7146:	f844 3b04 	str.w	r3, [r4], #4
   d714a:	f101 0520 	add.w	r5, r1, #32
   d714e:	4606      	mov	r6, r0
   d7150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7154:	682b      	ldr	r3, [r5, #0]
   d7156:	7023      	strb	r3, [r4, #0]
   d7158:	4630      	mov	r0, r6
   d715a:	bd70      	pop	{r4, r5, r6, pc}
   d715c:	000d83a8 	.word	0x000d83a8

000d7160 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7160:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7162:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7164:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7166:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7168:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d716a:	4a0a      	ldr	r2, [pc, #40]	; (d7194 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d716c:	9202      	str	r2, [sp, #8]
   d716e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7170:	468e      	mov	lr, r1
   d7172:	4606      	mov	r6, r0
   d7174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7176:	ac03      	add	r4, sp, #12
   d7178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d717a:	682b      	ldr	r3, [r5, #0]
   d717c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d717e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d7182:	9300      	str	r3, [sp, #0]
   d7184:	4662      	mov	r2, ip
   d7186:	ab02      	add	r3, sp, #8
   d7188:	4671      	mov	r1, lr
   d718a:	4630      	mov	r0, r6
   d718c:	47b8      	blx	r7
    }
   d718e:	b009      	add	sp, #36	; 0x24
   d7190:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7192:	bf00      	nop
   d7194:	000d83a8 	.word	0x000d83a8

000d7198 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7198:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d719a:	6803      	ldr	r3, [r0, #0]
   d719c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d71a0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d71a2:	4b0d      	ldr	r3, [pc, #52]	; (d71d8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d71a4:	b089      	sub	sp, #36	; 0x24
   d71a6:	f100 0620 	add.w	r6, r0, #32
   d71aa:	4604      	mov	r4, r0
   d71ac:	9302      	str	r3, [sp, #8]
   d71ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d71b0:	ad03      	add	r5, sp, #12
   d71b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d71b4:	6833      	ldr	r3, [r6, #0]
   d71b6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d71b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d71ba:	9300      	str	r3, [sp, #0]
   d71bc:	4672      	mov	r2, lr
   d71be:	ab02      	add	r3, sp, #8
   d71c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d71c2:	4620      	mov	r0, r4
   d71c4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d71c6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d71c8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d71ca:	69db      	ldr	r3, [r3, #28]
   d71cc:	4620      	mov	r0, r4
   d71ce:	4798      	blx	r3
    return result;
}
   d71d0:	4628      	mov	r0, r5
   d71d2:	b009      	add	sp, #36	; 0x24
   d71d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71d6:	bf00      	nop
   d71d8:	000d83a8 	.word	0x000d83a8

000d71dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d71dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d71de:	7843      	ldrb	r3, [r0, #1]
   d71e0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d71e2:	b08d      	sub	sp, #52	; 0x34
   d71e4:	4605      	mov	r5, r0
   d71e6:	460c      	mov	r4, r1
   d71e8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d71ea:	d101      	bne.n	d71f0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d71ec:	1d01      	adds	r1, r0, #4
   d71ee:	e033      	b.n	d7258 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d71f0:	2b0a      	cmp	r3, #10
   d71f2:	d135      	bne.n	d7260 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d71f4:	2211      	movs	r2, #17
   d71f6:	2100      	movs	r1, #0
   d71f8:	a801      	add	r0, sp, #4
   d71fa:	f000 fdf4 	bl	d7de6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d71fe:	68ab      	ldr	r3, [r5, #8]
   d7200:	b943      	cbnz	r3, d7214 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d7202:	68eb      	ldr	r3, [r5, #12]
   d7204:	b933      	cbnz	r3, d7214 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d7206:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d720a:	692e      	ldr	r6, [r5, #16]
   d720c:	f7fd fc04 	bl	d4a18 <inet_htonl>
   d7210:	4286      	cmp	r6, r0
   d7212:	d01f      	beq.n	d7254 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7214:	f105 0308 	add.w	r3, r5, #8
   d7218:	ae01      	add	r6, sp, #4
   d721a:	f105 0e18 	add.w	lr, r5, #24
   d721e:	6818      	ldr	r0, [r3, #0]
   d7220:	6859      	ldr	r1, [r3, #4]
   d7222:	4632      	mov	r2, r6
   d7224:	c203      	stmia	r2!, {r0, r1}
   d7226:	3308      	adds	r3, #8
   d7228:	4573      	cmp	r3, lr
   d722a:	4616      	mov	r6, r2
   d722c:	d1f7      	bne.n	d721e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d722e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7230:	a901      	add	r1, sp, #4
   d7232:	a806      	add	r0, sp, #24
   d7234:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7236:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d723a:	f7fd ff05 	bl	d5048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d723e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7240:	3404      	adds	r4, #4
   d7242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7244:	6833      	ldr	r3, [r6, #0]
   d7246:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d7248:	b157      	cbz	r7, d7260 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d724a:	8868      	ldrh	r0, [r5, #2]
   d724c:	f7fd fbec 	bl	d4a28 <inet_ntohs>
   d7250:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d7252:	e005      	b.n	d7260 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7254:	f105 0114 	add.w	r1, r5, #20
   d7258:	4620      	mov	r0, r4
   d725a:	f7fd ff2a 	bl	d50b2 <_ZN9IPAddressaSEPKh>
   d725e:	e7f3      	b.n	d7248 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d7260:	b00d      	add	sp, #52	; 0x34
   d7262:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7264 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d7264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7268:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d726a:	ab0e      	add	r3, sp, #56	; 0x38
   d726c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d726e:	4606      	mov	r6, r0
   d7270:	4617      	mov	r7, r2
   d7272:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d7274:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7278:	462a      	mov	r2, r5
   d727a:	4629      	mov	r1, r5
   d727c:	f7fd fbec 	bl	d4a58 <netdb_getaddrinfo>
   d7280:	2800      	cmp	r0, #0
   d7282:	db1f      	blt.n	d72c4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7284:	9b01      	ldr	r3, [sp, #4]
   d7286:	b1fb      	cbz	r3, d72c8 <_ZN3UDP11beginPacketEPKct+0x64>
   d7288:	695b      	ldr	r3, [r3, #20]
   d728a:	b1eb      	cbz	r3, d72c8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d728c:	a802      	add	r0, sp, #8
   d728e:	f7fd fecd 	bl	d502c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7292:	9b01      	ldr	r3, [sp, #4]
   d7294:	462a      	mov	r2, r5
   d7296:	6958      	ldr	r0, [r3, #20]
   d7298:	a902      	add	r1, sp, #8
   d729a:	f7ff ff9f 	bl	d71dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d729e:	a802      	add	r0, sp, #8
   d72a0:	f7fd fee4 	bl	d506c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d72a4:	b180      	cbz	r0, d72c8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d72a6:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d72a8:	ad03      	add	r5, sp, #12
   d72aa:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d72ae:	4b0b      	ldr	r3, [pc, #44]	; (d72dc <_ZN3UDP11beginPacketEPKct+0x78>)
   d72b0:	9308      	str	r3, [sp, #32]
   d72b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72b4:	ac09      	add	r4, sp, #36	; 0x24
   d72b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72b8:	682b      	ldr	r3, [r5, #0]
   d72ba:	7023      	strb	r3, [r4, #0]
   d72bc:	463a      	mov	r2, r7
   d72be:	a908      	add	r1, sp, #32
   d72c0:	4630      	mov	r0, r6
   d72c2:	47c0      	blx	r8
   d72c4:	4604      	mov	r4, r0
   d72c6:	e001      	b.n	d72cc <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d72c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d72cc:	9801      	ldr	r0, [sp, #4]
   d72ce:	f7fd fbbb 	bl	d4a48 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d72d2:	4620      	mov	r0, r4
   d72d4:	b00e      	add	sp, #56	; 0x38
   d72d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72da:	bf00      	nop
   d72dc:	000d83a8 	.word	0x000d83a8

000d72e0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d72e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d72e4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d72e8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d72ec:	b08c      	sub	sp, #48	; 0x30
   d72ee:	4605      	mov	r5, r0
   d72f0:	460c      	mov	r4, r1
   d72f2:	4617      	mov	r7, r2
   d72f4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d72f6:	db00      	blt.n	d72fa <_ZN3UDP13receivePacketEPhjm+0x1a>
   d72f8:	b911      	cbnz	r1, d7300 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d72fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d72fe:	e035      	b.n	d736c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d7300:	f04f 0a1c 	mov.w	sl, #28
   d7304:	ae05      	add	r6, sp, #20
   d7306:	4652      	mov	r2, sl
   d7308:	2100      	movs	r1, #0
   d730a:	4630      	mov	r0, r6
   d730c:	f000 fd6b 	bl	d7de6 <memset>
        socklen_t slen = sizeof(saddr);
   d7310:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d7314:	f1b9 0f00 	cmp.w	r9, #0
   d7318:	d014      	beq.n	d7344 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d731a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d731e:	fbb9 f1f2 	udiv	r1, r9, r2
   d7322:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d7324:	fb02 9111 	mls	r1, r2, r1, r9
   d7328:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d732a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d732c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d732e:	9300      	str	r3, [sp, #0]
   d7330:	f241 0206 	movw	r2, #4102	; 0x1006
   d7334:	ab03      	add	r3, sp, #12
   d7336:	f640 71ff 	movw	r1, #4095	; 0xfff
   d733a:	4640      	mov	r0, r8
   d733c:	f7fd fb9c 	bl	d4a78 <sock_setsockopt>
            if (ret) {
   d7340:	b108      	cbz	r0, d7346 <_ZN3UDP13receivePacketEPhjm+0x66>
   d7342:	e013      	b.n	d736c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d7344:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d7346:	ab02      	add	r3, sp, #8
   d7348:	9301      	str	r3, [sp, #4]
   d734a:	4621      	mov	r1, r4
   d734c:	4603      	mov	r3, r0
   d734e:	9600      	str	r6, [sp, #0]
   d7350:	463a      	mov	r2, r7
   d7352:	6968      	ldr	r0, [r5, #20]
   d7354:	f7fd fba0 	bl	d4a98 <sock_recvfrom>
        if (ret >= 0) {
   d7358:	1e04      	subs	r4, r0, #0
   d735a:	db06      	blt.n	d736a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d735c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d7360:	f105 011c 	add.w	r1, r5, #28
   d7364:	4630      	mov	r0, r6
   d7366:	f7ff ff39 	bl	d71dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d736a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d736c:	b00c      	add	sp, #48	; 0x30
   d736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7372 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d7372:	b538      	push	{r3, r4, r5, lr}
   d7374:	4605      	mov	r5, r0
   d7376:	4614      	mov	r4, r2
   d7378:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d737a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d737c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d737e:	d111      	bne.n	d73a4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d7380:	231c      	movs	r3, #28
   d7382:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d7384:	230a      	movs	r3, #10
   d7386:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d7388:	f7fd fb56 	bl	d4a38 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d738c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d738e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d7392:	1d2b      	adds	r3, r5, #4
   d7394:	3514      	adds	r5, #20
   d7396:	f853 2b04 	ldr.w	r2, [r3], #4
   d739a:	f844 2b04 	str.w	r2, [r4], #4
   d739e:	42ab      	cmp	r3, r5
   d73a0:	d1f9      	bne.n	d7396 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d73a2:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d73a4:	2b04      	cmp	r3, #4
   d73a6:	d10a      	bne.n	d73be <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d73a8:	2310      	movs	r3, #16
   d73aa:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d73ac:	2302      	movs	r3, #2
   d73ae:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d73b0:	f7fd fb42 	bl	d4a38 <inet_htons>
   d73b4:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d73b6:	6868      	ldr	r0, [r5, #4]
   d73b8:	f7fd fb2e 	bl	d4a18 <inet_htonl>
   d73bc:	6060      	str	r0, [r4, #4]
   d73be:	bd38      	pop	{r3, r4, r5, pc}

000d73c0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d73c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d73c4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d73c6:	ac03      	add	r4, sp, #12
   d73c8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d73ca:	4699      	mov	r9, r3
   d73cc:	4606      	mov	r6, r0
   d73ce:	460f      	mov	r7, r1
   d73d0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d73d2:	2100      	movs	r1, #0
   d73d4:	462a      	mov	r2, r5
   d73d6:	4620      	mov	r0, r4
   d73d8:	f000 fd05 	bl	d7de6 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d73dc:	4622      	mov	r2, r4
   d73de:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d73e2:	4648      	mov	r0, r9
   d73e4:	f7ff ffc5 	bl	d7372 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d73e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d73ec:	b143      	cbz	r3, d7400 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d73ee:	e88d 0030 	stmia.w	sp, {r4, r5}
   d73f2:	2300      	movs	r3, #0
   d73f4:	4642      	mov	r2, r8
   d73f6:	4639      	mov	r1, r7
   d73f8:	6970      	ldr	r0, [r6, #20]
   d73fa:	f7fd fb55 	bl	d4aa8 <sock_sendto>
   d73fe:	e001      	b.n	d7404 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d7400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d7404:	b00b      	add	sp, #44	; 0x2c
   d7406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d740a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d740a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d740c:	b091      	sub	sp, #68	; 0x44
   d740e:	460c      	mov	r4, r1
   d7410:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d7412:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d7414:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d7416:	a809      	add	r0, sp, #36	; 0x24
   d7418:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d741a:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d741c:	f000 fce3 	bl	d7de6 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d7420:	aa09      	add	r2, sp, #36	; 0x24
   d7422:	2100      	movs	r1, #0
   d7424:	4620      	mov	r0, r4
   d7426:	f7ff ffa4 	bl	d7372 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d742a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d742e:	2b02      	cmp	r3, #2
   d7430:	d12e      	bne.n	d7490 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d7432:	2300      	movs	r3, #0
   d7434:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d7436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7438:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d743a:	b1dd      	cbz	r5, d7474 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d743c:	a902      	add	r1, sp, #8
   d743e:	4628      	mov	r0, r5
   d7440:	f7fd fac2 	bl	d49c8 <if_get_by_index>
   d7444:	b9b0      	cbnz	r0, d7474 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d7446:	a910      	add	r1, sp, #64	; 0x40
   d7448:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d744c:	9802      	ldr	r0, [sp, #8]
   d744e:	f7fd fac3 	bl	d49d8 <if_get_addrs>
   d7452:	b960      	cbnz	r0, d746e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d7454:	9b03      	ldr	r3, [sp, #12]
   d7456:	b153      	cbz	r3, d746e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d7458:	68da      	ldr	r2, [r3, #12]
   d745a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d745c:	7851      	ldrb	r1, [r2, #1]
   d745e:	2902      	cmp	r1, #2
   d7460:	d103      	bne.n	d746a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d7462:	6852      	ldr	r2, [r2, #4]
   d7464:	b10a      	cbz	r2, d746a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d7466:	9205      	str	r2, [sp, #20]
   d7468:	e001      	b.n	d746e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d746a:	681b      	ldr	r3, [r3, #0]
   d746c:	e7f3      	b.n	d7456 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d746e:	9803      	ldr	r0, [sp, #12]
   d7470:	f7fd faba 	bl	d49e8 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d7474:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d7476:	f04f 0308 	mov.w	r3, #8
   d747a:	9300      	str	r3, [sp, #0]
   d747c:	bf18      	it	ne
   d747e:	2203      	movne	r2, #3
   d7480:	ab04      	add	r3, sp, #16
   d7482:	bf08      	it	eq
   d7484:	2204      	moveq	r2, #4
   d7486:	2100      	movs	r1, #0
   d7488:	4630      	mov	r0, r6
   d748a:	f7fd faf5 	bl	d4a78 <sock_setsockopt>
   d748e:	e01e      	b.n	d74ce <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d7490:	2b0a      	cmp	r3, #10
   d7492:	d11a      	bne.n	d74ca <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d7494:	ac04      	add	r4, sp, #16
   d7496:	2214      	movs	r2, #20
   d7498:	2100      	movs	r1, #0
   d749a:	4620      	mov	r0, r4
   d749c:	f000 fca3 	bl	d7de6 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d74a0:	ab0b      	add	r3, sp, #44	; 0x2c
   d74a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d74a4:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d74a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d74aa:	f04f 0314 	mov.w	r3, #20
   d74ae:	9300      	str	r3, [sp, #0]
   d74b0:	bf18      	it	ne
   d74b2:	220c      	movne	r2, #12
   d74b4:	4623      	mov	r3, r4
   d74b6:	bf08      	it	eq
   d74b8:	220d      	moveq	r2, #13
   d74ba:	2129      	movs	r1, #41	; 0x29
   d74bc:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d74be:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d74c0:	f7fd fada 	bl	d4a78 <sock_setsockopt>
   d74c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d74c8:	e001      	b.n	d74ce <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d74ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d74ce:	b011      	add	sp, #68	; 0x44
   d74d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d74d4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d74d4:	b538      	push	{r3, r4, r5, lr}
   d74d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d74da:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d74dc:	4b0b      	ldr	r3, [pc, #44]	; (d750c <_ZN3UDPC1Ev+0x38>)
   d74de:	f103 0208 	add.w	r2, r3, #8
   d74e2:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d74e4:	2500      	movs	r5, #0
   d74e6:	6103      	str	r3, [r0, #16]
   d74e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d74ec:	4604      	mov	r4, r0
   d74ee:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d74f0:	6002      	str	r2, [r0, #0]
   d74f2:	6143      	str	r3, [r0, #20]
   d74f4:	301c      	adds	r0, #28
   d74f6:	f7fd fd99 	bl	d502c <_ZN9IPAddressC1Ev>
   d74fa:	f44f 7300 	mov.w	r3, #512	; 0x200
   d74fe:	86e5      	strh	r5, [r4, #54]	; 0x36
   d7500:	8725      	strh	r5, [r4, #56]	; 0x38
   d7502:	63e5      	str	r5, [r4, #60]	; 0x3c
   d7504:	6423      	str	r3, [r4, #64]	; 0x40
   d7506:	6465      	str	r5, [r4, #68]	; 0x44
}
   d7508:	4620      	mov	r0, r4
   d750a:	bd38      	pop	{r3, r4, r5, pc}
   d750c:	000d85fc 	.word	0x000d85fc

000d7510 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d7510:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d7512:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d7516:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d7518:	b123      	cbz	r3, d7524 <_ZN3UDP13releaseBufferEv+0x14>
   d751a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d751c:	b110      	cbz	r0, d7524 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d751e:	2101      	movs	r1, #1
   d7520:	f000 fab7 	bl	d7a92 <_ZdlPvj>
    }
    _buffer = NULL;
   d7524:	2300      	movs	r3, #0
   d7526:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d7528:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d752c:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d752e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7530:	8723      	strh	r3, [r4, #56]	; 0x38
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d7534:	b570      	push	{r4, r5, r6, lr}
   d7536:	4604      	mov	r4, r0
   d7538:	4616      	mov	r6, r2
   d753a:	460d      	mov	r5, r1
    releaseBuffer();
   d753c:	f7ff ffe8 	bl	d7510 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d7540:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d7542:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d7544:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d7546:	b93e      	cbnz	r6, d7558 <_ZN3UDP9setBufferEjPh+0x24>
   d7548:	b135      	cbz	r5, d7558 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d754a:	4628      	mov	r0, r5
   d754c:	f7fc fda5 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d7550:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d7552:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d7554:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d7558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d755a:	b103      	cbz	r3, d755e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d755c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d755e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d7560:	3000      	adds	r0, #0
   d7562:	bf18      	it	ne
   d7564:	2001      	movne	r0, #1
   d7566:	bd70      	pop	{r4, r5, r6, pc}

000d7568 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d756a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d756c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d756e:	4605      	mov	r5, r0
   d7570:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d7572:	b91a      	cbnz	r2, d757c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d7574:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7576:	b109      	cbz	r1, d757c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d7578:	f7ff ffdc 	bl	d7534 <_ZN3UDP9setBufferEjPh>
   d757c:	3404      	adds	r4, #4
   d757e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7580:	f105 0620 	add.w	r6, r5, #32
   d7584:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7586:	6823      	ldr	r3, [r4, #0]
   d7588:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d758a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d758c:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d758e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d7590:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d7592:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d7594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7596 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d7596:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d7598:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d759a:	4604      	mov	r4, r0
   d759c:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d759e:	b91a      	cbnz	r2, d75a8 <_ZN3UDP11parsePacketEm+0x12>
   d75a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d75a2:	b109      	cbz	r1, d75a8 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d75a4:	f7ff ffc6 	bl	d7534 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d75a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d75aa:	2200      	movs	r2, #0
   d75ac:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d75ae:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d75b0:	b149      	cbz	r1, d75c6 <_ZN3UDP11parsePacketEm+0x30>
   d75b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d75b4:	b13a      	cbz	r2, d75c6 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d75b6:	6823      	ldr	r3, [r4, #0]
   d75b8:	4620      	mov	r0, r4
   d75ba:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d75bc:	4633      	mov	r3, r6
   d75be:	47a8      	blx	r5
        if (result > 0) {
   d75c0:	2800      	cmp	r0, #0
            _total = result;
   d75c2:	bfc8      	it	gt
   d75c4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d75c6:	6823      	ldr	r3, [r4, #0]
   d75c8:	4620      	mov	r0, r4
   d75ca:	691b      	ldr	r3, [r3, #16]
}
   d75cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d75d0:	4718      	bx	r3
	...

000d75d4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d75d4:	b510      	push	{r4, lr}
   d75d6:	4b07      	ldr	r3, [pc, #28]	; (d75f4 <_ZN3UDPD1Ev+0x20>)
   d75d8:	f103 0208 	add.w	r2, r3, #8
   d75dc:	336c      	adds	r3, #108	; 0x6c
   d75de:	4604      	mov	r4, r0
   d75e0:	6002      	str	r2, [r0, #0]
   d75e2:	6103      	str	r3, [r0, #16]
   d75e4:	f7ff fd6b 	bl	d70be <_ZN3UDP4stopEv>
   d75e8:	4620      	mov	r0, r4
   d75ea:	f7ff ff91 	bl	d7510 <_ZN3UDP13releaseBufferEv>
   d75ee:	4620      	mov	r0, r4
   d75f0:	bd10      	pop	{r4, pc}
   d75f2:	bf00      	nop
   d75f4:	000d85fc 	.word	0x000d85fc

000d75f8 <_ZN3UDPD0Ev>:
   d75f8:	b510      	push	{r4, lr}
   d75fa:	4604      	mov	r4, r0
   d75fc:	f7ff ffea 	bl	d75d4 <_ZN3UDPD1Ev>
   d7600:	4620      	mov	r0, r4
   d7602:	214c      	movs	r1, #76	; 0x4c
   d7604:	f000 fa45 	bl	d7a92 <_ZdlPvj>
   d7608:	4620      	mov	r0, r4
   d760a:	bd10      	pop	{r4, pc}

000d760c <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d760c:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d760e:	6940      	ldr	r0, [r0, #20]
   d7610:	2800      	cmp	r0, #0
   d7612:	db04      	blt.n	d761e <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d7614:	2301      	movs	r3, #1
   d7616:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d761a:	f7ff bef6 	b.w	d740a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d761e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7622:	4770      	bx	lr

000d7624 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7624:	4770      	bx	lr

000d7626 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7626:	7441      	strb	r1, [r0, #17]
   d7628:	4770      	bx	lr

000d762a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d762a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d762c:	7c00      	ldrb	r0, [r0, #16]
   d762e:	f7fd fa9b 	bl	d4b68 <HAL_USART_Available_Data_For_Write>
}
   d7632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7636:	bd08      	pop	{r3, pc}

000d7638 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7638:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d763a:	7c00      	ldrb	r0, [r0, #16]
   d763c:	f7fd fa6c 	bl	d4b18 <HAL_USART_Available_Data>
}
   d7640:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7644:	bd08      	pop	{r3, pc}

000d7646 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7646:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7648:	7c00      	ldrb	r0, [r0, #16]
   d764a:	f7fd fa75 	bl	d4b38 <HAL_USART_Peek_Data>
}
   d764e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7652:	bf28      	it	cs
   d7654:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7658:	bd08      	pop	{r3, pc}

000d765a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d765a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d765c:	7c00      	ldrb	r0, [r0, #16]
   d765e:	f7fd fa63 	bl	d4b28 <HAL_USART_Read_Data>
}
   d7662:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7666:	bf28      	it	cs
   d7668:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d766c:	bd08      	pop	{r3, pc}

000d766e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d766e:	7c00      	ldrb	r0, [r0, #16]
   d7670:	f7fd ba6a 	b.w	d4b48 <HAL_USART_Flush_Data>

000d7674 <_ZN11USARTSerialD0Ev>:
   d7674:	b510      	push	{r4, lr}
   d7676:	2114      	movs	r1, #20
   d7678:	4604      	mov	r4, r0
   d767a:	f000 fa0a 	bl	d7a92 <_ZdlPvj>
   d767e:	4620      	mov	r0, r4
   d7680:	bd10      	pop	{r4, pc}

000d7682 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7682:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7684:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7686:	4604      	mov	r4, r0
   d7688:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d768a:	b925      	cbnz	r5, d7696 <_ZN11USARTSerial5writeEh+0x14>
   d768c:	7c00      	ldrb	r0, [r0, #16]
   d768e:	f7fd fa6b 	bl	d4b68 <HAL_USART_Available_Data_For_Write>
   d7692:	2800      	cmp	r0, #0
   d7694:	dd05      	ble.n	d76a2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7696:	4631      	mov	r1, r6
   d7698:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d769a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d769e:	f7fd ba33 	b.w	d4b08 <HAL_USART_Write_Data>
  }
  return 0;
}
   d76a2:	4628      	mov	r0, r5
   d76a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d76a8:	b510      	push	{r4, lr}
   d76aa:	4604      	mov	r4, r0
   d76ac:	4608      	mov	r0, r1
   d76ae:	4611      	mov	r1, r2
   d76b0:	2200      	movs	r2, #0
   d76b2:	6062      	str	r2, [r4, #4]
   d76b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d76b8:	60a2      	str	r2, [r4, #8]
   d76ba:	4a05      	ldr	r2, [pc, #20]	; (d76d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d76bc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d76be:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d76c0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d76c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d76c4:	461a      	mov	r2, r3
   d76c6:	f7fd fa0f 	bl	d4ae8 <HAL_USART_Init>
}
   d76ca:	4620      	mov	r0, r4
   d76cc:	bd10      	pop	{r4, pc}
   d76ce:	bf00      	nop
   d76d0:	000d8674 	.word	0x000d8674

000d76d4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d76d4:	2300      	movs	r3, #0
   d76d6:	7c00      	ldrb	r0, [r0, #16]
   d76d8:	f7fd ba4e 	b.w	d4b78 <HAL_USART_BeginConfig>

000d76dc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d76dc:	2200      	movs	r2, #0
   d76de:	f7ff bff9 	b.w	d76d4 <_ZN11USARTSerial5beginEmm>

000d76e2 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d76e2:	7c00      	ldrb	r0, [r0, #16]
   d76e4:	f7fd ba08 	b.w	d4af8 <HAL_USART_End>

000d76e8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d76e8:	7c00      	ldrb	r0, [r0, #16]
   d76ea:	f7fd ba35 	b.w	d4b58 <HAL_USART_Is_Enabled>
	...

000d76f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d76f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d76f2:	4d0c      	ldr	r5, [pc, #48]	; (d7724 <_Z22__fetch_global_Serial1v+0x34>)
   d76f4:	6829      	ldr	r1, [r5, #0]
   d76f6:	f011 0401 	ands.w	r4, r1, #1
   d76fa:	d111      	bne.n	d7720 <_Z22__fetch_global_Serial1v+0x30>
   d76fc:	4628      	mov	r0, r5
   d76fe:	f7fc fcdd 	bl	d40bc <__cxa_guard_acquire>
   d7702:	b168      	cbz	r0, d7720 <_Z22__fetch_global_Serial1v+0x30>
   d7704:	4a08      	ldr	r2, [pc, #32]	; (d7728 <_Z22__fetch_global_Serial1v+0x38>)
   d7706:	4b09      	ldr	r3, [pc, #36]	; (d772c <_Z22__fetch_global_Serial1v+0x3c>)
   d7708:	4809      	ldr	r0, [pc, #36]	; (d7730 <_Z22__fetch_global_Serial1v+0x40>)
   d770a:	4621      	mov	r1, r4
   d770c:	f7ff ffcc 	bl	d76a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7710:	4628      	mov	r0, r5
   d7712:	f7fc fcd8 	bl	d40c6 <__cxa_guard_release>
   d7716:	4a07      	ldr	r2, [pc, #28]	; (d7734 <_Z22__fetch_global_Serial1v+0x44>)
   d7718:	4907      	ldr	r1, [pc, #28]	; (d7738 <_Z22__fetch_global_Serial1v+0x48>)
   d771a:	4805      	ldr	r0, [pc, #20]	; (d7730 <_Z22__fetch_global_Serial1v+0x40>)
   d771c:	f000 f9b4 	bl	d7a88 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7720:	4803      	ldr	r0, [pc, #12]	; (d7730 <_Z22__fetch_global_Serial1v+0x40>)
   d7722:	bd38      	pop	{r3, r4, r5, pc}
   d7724:	2003e66c 	.word	0x2003e66c
   d7728:	2003e670 	.word	0x2003e670
   d772c:	2003e5e8 	.word	0x2003e5e8
   d7730:	2003e5d4 	.word	0x2003e5d4
   d7734:	2003e370 	.word	0x2003e370
   d7738:	000d7625 	.word	0x000d7625

000d773c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d773c:	7441      	strb	r1, [r0, #17]
   d773e:	4770      	bx	lr

000d7740 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7740:	4770      	bx	lr

000d7742 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7742:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7744:	2100      	movs	r1, #0
   d7746:	7c00      	ldrb	r0, [r0, #16]
   d7748:	f7fd fa46 	bl	d4bd8 <HAL_USB_USART_Receive_Data>
}
   d774c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7750:	bf28      	it	cs
   d7752:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7756:	bd08      	pop	{r3, pc}

000d7758 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7758:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d775a:	2101      	movs	r1, #1
   d775c:	7c00      	ldrb	r0, [r0, #16]
   d775e:	f7fd fa3b 	bl	d4bd8 <HAL_USB_USART_Receive_Data>
}
   d7762:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7766:	bf28      	it	cs
   d7768:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d776c:	bd08      	pop	{r3, pc}

000d776e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d776e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7770:	7c00      	ldrb	r0, [r0, #16]
   d7772:	f7fd fa29 	bl	d4bc8 <HAL_USB_USART_Available_Data_For_Write>
}
   d7776:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d777a:	bd08      	pop	{r3, pc}

000d777c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d777c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d777e:	7c00      	ldrb	r0, [r0, #16]
   d7780:	f7fd fa1a 	bl	d4bb8 <HAL_USB_USART_Available_Data>
}
   d7784:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7788:	bd08      	pop	{r3, pc}

000d778a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d778a:	7c00      	ldrb	r0, [r0, #16]
   d778c:	f7fd ba34 	b.w	d4bf8 <HAL_USB_USART_Flush_Data>

000d7790 <_ZN9USBSerialD0Ev>:
   d7790:	b510      	push	{r4, lr}
   d7792:	2114      	movs	r1, #20
   d7794:	4604      	mov	r4, r0
   d7796:	f000 f97c 	bl	d7a92 <_ZdlPvj>
   d779a:	4620      	mov	r0, r4
   d779c:	bd10      	pop	{r4, pc}

000d779e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d779e:	b538      	push	{r3, r4, r5, lr}
   d77a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d77a2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d77a4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d77a6:	f7fd fa0f 	bl	d4bc8 <HAL_USB_USART_Available_Data_For_Write>
   d77aa:	2800      	cmp	r0, #0
   d77ac:	dc01      	bgt.n	d77b2 <_ZN9USBSerial5writeEh+0x14>
   d77ae:	7c60      	ldrb	r0, [r4, #17]
   d77b0:	b128      	cbz	r0, d77be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d77b2:	4629      	mov	r1, r5
   d77b4:	7c20      	ldrb	r0, [r4, #16]
   d77b6:	f7fd fa17 	bl	d4be8 <HAL_USB_USART_Send_Data>
   d77ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d77be:	bd38      	pop	{r3, r4, r5, pc}

000d77c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d77c0:	b510      	push	{r4, lr}
   d77c2:	4604      	mov	r4, r0
   d77c4:	2300      	movs	r3, #0
   d77c6:	6063      	str	r3, [r4, #4]
   d77c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d77cc:	60a3      	str	r3, [r4, #8]
   d77ce:	4b05      	ldr	r3, [pc, #20]	; (d77e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d77d0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d77d2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d77d4:	4608      	mov	r0, r1
{
  _serial = serial;
   d77d6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d77d8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d77da:	4611      	mov	r1, r2
   d77dc:	f7fd f9d4 	bl	d4b88 <HAL_USB_USART_Init>
}
   d77e0:	4620      	mov	r0, r4
   d77e2:	bd10      	pop	{r4, pc}
   d77e4:	000d86a4 	.word	0x000d86a4

000d77e8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d77e8:	2200      	movs	r2, #0
   d77ea:	7c00      	ldrb	r0, [r0, #16]
   d77ec:	f7fd b9d4 	b.w	d4b98 <HAL_USB_USART_Begin>

000d77f0 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d77f0:	7c00      	ldrb	r0, [r0, #16]
   d77f2:	f7fd b9d9 	b.w	d4ba8 <HAL_USB_USART_End>

000d77f6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77f6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d77f8:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77fa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d77fc:	2100      	movs	r1, #0
   d77fe:	f000 faf2 	bl	d7de6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7802:	4620      	mov	r0, r4
   d7804:	bd10      	pop	{r4, pc}
	...

000d7808 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7808:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d780a:	4d0e      	ldr	r5, [pc, #56]	; (d7844 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d780c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d780e:	a801      	add	r0, sp, #4
   d7810:	f7ff fff1 	bl	d77f6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7814:	6829      	ldr	r1, [r5, #0]
   d7816:	f011 0401 	ands.w	r4, r1, #1
   d781a:	d110      	bne.n	d783e <_Z16_fetch_usbserialv+0x36>
   d781c:	4628      	mov	r0, r5
   d781e:	f7fc fc4d 	bl	d40bc <__cxa_guard_acquire>
   d7822:	b160      	cbz	r0, d783e <_Z16_fetch_usbserialv+0x36>
   d7824:	aa01      	add	r2, sp, #4
   d7826:	4621      	mov	r1, r4
   d7828:	4807      	ldr	r0, [pc, #28]	; (d7848 <_Z16_fetch_usbserialv+0x40>)
   d782a:	f7ff ffc9 	bl	d77c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d782e:	4628      	mov	r0, r5
   d7830:	f7fc fc49 	bl	d40c6 <__cxa_guard_release>
   d7834:	4a05      	ldr	r2, [pc, #20]	; (d784c <_Z16_fetch_usbserialv+0x44>)
   d7836:	4906      	ldr	r1, [pc, #24]	; (d7850 <_Z16_fetch_usbserialv+0x48>)
   d7838:	4803      	ldr	r0, [pc, #12]	; (d7848 <_Z16_fetch_usbserialv+0x40>)
   d783a:	f000 f925 	bl	d7a88 <__aeabi_atexit>
	return _usbserial;
}
   d783e:	4802      	ldr	r0, [pc, #8]	; (d7848 <_Z16_fetch_usbserialv+0x40>)
   d7840:	b007      	add	sp, #28
   d7842:	bd30      	pop	{r4, r5, pc}
   d7844:	2003e6f4 	.word	0x2003e6f4
   d7848:	2003e6f8 	.word	0x2003e6f8
   d784c:	2003e370 	.word	0x2003e370
   d7850:	000d7741 	.word	0x000d7741

000d7854 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7854:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7856:	4b0f      	ldr	r3, [pc, #60]	; (d7894 <serialEventRun+0x40>)
   d7858:	b133      	cbz	r3, d7868 <serialEventRun+0x14>
   d785a:	f7ff ffd5 	bl	d7808 <_Z16_fetch_usbserialv>
   d785e:	6803      	ldr	r3, [r0, #0]
   d7860:	691b      	ldr	r3, [r3, #16]
   d7862:	4798      	blx	r3
   d7864:	2800      	cmp	r0, #0
   d7866:	dc0d      	bgt.n	d7884 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7868:	4b0b      	ldr	r3, [pc, #44]	; (d7898 <serialEventRun+0x44>)
   d786a:	b133      	cbz	r3, d787a <serialEventRun+0x26>
   d786c:	f7ff ff40 	bl	d76f0 <_Z22__fetch_global_Serial1v>
   d7870:	6803      	ldr	r3, [r0, #0]
   d7872:	691b      	ldr	r3, [r3, #16]
   d7874:	4798      	blx	r3
   d7876:	2800      	cmp	r0, #0
   d7878:	dc07      	bgt.n	d788a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d787a:	4b08      	ldr	r3, [pc, #32]	; (d789c <serialEventRun+0x48>)
   d787c:	b143      	cbz	r3, d7890 <serialEventRun+0x3c>
   d787e:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d7882:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7884:	f3af 8000 	nop.w
   d7888:	e7ee      	b.n	d7868 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d788a:	f3af 8000 	nop.w
   d788e:	e7f4      	b.n	d787a <serialEventRun+0x26>
   d7890:	bd08      	pop	{r3, pc}
   d7892:	bf00      	nop
	...

000d78a0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d78a0:	b508      	push	{r3, lr}
	serialEventRun();
   d78a2:	f7ff ffd7 	bl	d7854 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d78a6:	f7fd f80f 	bl	d48c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d78aa:	4b01      	ldr	r3, [pc, #4]	; (d78b0 <_post_loop+0x10>)
   d78ac:	6018      	str	r0, [r3, #0]
   d78ae:	bd08      	pop	{r3, pc}
   d78b0:	2003e710 	.word	0x2003e710

000d78b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d78b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78b6:	2300      	movs	r3, #0
   d78b8:	9300      	str	r3, [sp, #0]
   d78ba:	461a      	mov	r2, r3
   d78bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78c0:	f7fd f9e4 	bl	d4c8c <system_ctrl_set_result>
}
   d78c4:	b003      	add	sp, #12
   d78c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d78cc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d78cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d78ce:	8843      	ldrh	r3, [r0, #2]
   d78d0:	2b0a      	cmp	r3, #10
   d78d2:	d008      	beq.n	d78e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d78d4:	2b50      	cmp	r3, #80	; 0x50
   d78d6:	d109      	bne.n	d78ec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d78d8:	4b09      	ldr	r3, [pc, #36]	; (d7900 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d78da:	681b      	ldr	r3, [r3, #0]
   d78dc:	b13b      	cbz	r3, d78ee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d78de:	b003      	add	sp, #12
   d78e0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d78e4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d78e6:	f7ff ffe5 	bl	d78b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d78ea:	e006      	b.n	d78fa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78ec:	2300      	movs	r3, #0
   d78ee:	9300      	str	r3, [sp, #0]
   d78f0:	461a      	mov	r2, r3
   d78f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78f6:	f7fd f9c9 	bl	d4c8c <system_ctrl_set_result>
        break;
    }
}
   d78fa:	b003      	add	sp, #12
   d78fc:	f85d fb04 	ldr.w	pc, [sp], #4
   d7900:	2003e70c 	.word	0x2003e70c

000d7904 <module_user_init_hook>:

void module_user_init_hook()
{
   d7904:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7906:	f7fc ffc7 	bl	d4898 <HAL_RNG_GetRandomNumber>
   d790a:	4604      	mov	r4, r0
    srand(seed);
   d790c:	f000 fa74 	bl	d7df8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7910:	4b07      	ldr	r3, [pc, #28]	; (d7930 <module_user_init_hook+0x2c>)
   d7912:	b113      	cbz	r3, d791a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7914:	4620      	mov	r0, r4
   d7916:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d791a:	2100      	movs	r1, #0
   d791c:	4804      	ldr	r0, [pc, #16]	; (d7930 <module_user_init_hook+0x2c>)
   d791e:	f7fd f9d1 	bl	d4cc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7922:	2100      	movs	r1, #0
   d7924:	4803      	ldr	r0, [pc, #12]	; (d7934 <module_user_init_hook+0x30>)
}
   d7926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d792a:	f7fd b9a5 	b.w	d4c78 <system_ctrl_set_app_request_handler>
   d792e:	bf00      	nop
   d7930:	00000000 	.word	0x00000000
   d7934:	000d78cd 	.word	0x000d78cd

000d7938 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7938:	b510      	push	{r4, lr}
   d793a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d793c:	480f      	ldr	r0, [pc, #60]	; (d797c <pinAvailable+0x44>)
   d793e:	f7ff fa77 	bl	d6e30 <_ZN8SPIClass9isEnabledEv>
   d7942:	b128      	cbz	r0, d7950 <pinAvailable+0x18>
   d7944:	f1a4 030b 	sub.w	r3, r4, #11
   d7948:	2b02      	cmp	r3, #2
   d794a:	d801      	bhi.n	d7950 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d794c:	2000      	movs	r0, #0
   d794e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7950:	f000 f858 	bl	d7a04 <_Z19__fetch_global_Wirev>
   d7954:	f7fd fb2c 	bl	d4fb0 <_ZN7TwoWire9isEnabledEv>
   d7958:	b108      	cbz	r0, d795e <pinAvailable+0x26>
   d795a:	2c01      	cmp	r4, #1
   d795c:	d9f6      	bls.n	d794c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d795e:	f7ff fec7 	bl	d76f0 <_Z22__fetch_global_Serial1v>
   d7962:	f7ff fec1 	bl	d76e8 <_ZN11USARTSerial9isEnabledEv>
   d7966:	b118      	cbz	r0, d7970 <pinAvailable+0x38>
   d7968:	f1a4 0309 	sub.w	r3, r4, #9
   d796c:	2b01      	cmp	r3, #1
   d796e:	d9ed      	bls.n	d794c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7970:	2c1e      	cmp	r4, #30
   d7972:	bf8c      	ite	hi
   d7974:	2000      	movhi	r0, #0
   d7976:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7978:	bd10      	pop	{r4, pc}
   d797a:	bf00      	nop
   d797c:	2003e72c 	.word	0x2003e72c

000d7980 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7980:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7982:	b538      	push	{r3, r4, r5, lr}
   d7984:	4604      	mov	r4, r0
   d7986:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7988:	d80a      	bhi.n	d79a0 <pinMode+0x20>
   d798a:	29ff      	cmp	r1, #255	; 0xff
   d798c:	d008      	beq.n	d79a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d798e:	f7ff ffd3 	bl	d7938 <pinAvailable>
   d7992:	b128      	cbz	r0, d79a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7994:	4629      	mov	r1, r5
   d7996:	4620      	mov	r0, r4
}
   d7998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d799c:	f7fc bfac 	b.w	d48f8 <HAL_Pin_Mode>
   d79a0:	bd38      	pop	{r3, r4, r5, pc}

000d79a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d79a2:	b538      	push	{r3, r4, r5, lr}
   d79a4:	4604      	mov	r4, r0
   d79a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d79a8:	f7fc ffae 	bl	d4908 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d79ac:	28ff      	cmp	r0, #255	; 0xff
   d79ae:	d010      	beq.n	d79d2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d79b0:	2806      	cmp	r0, #6
   d79b2:	d804      	bhi.n	d79be <digitalWrite+0x1c>
   d79b4:	234d      	movs	r3, #77	; 0x4d
   d79b6:	fa23 f000 	lsr.w	r0, r3, r0
   d79ba:	07c3      	lsls	r3, r0, #31
   d79bc:	d409      	bmi.n	d79d2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d79be:	4620      	mov	r0, r4
   d79c0:	f7ff ffba 	bl	d7938 <pinAvailable>
   d79c4:	b128      	cbz	r0, d79d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d79c6:	4629      	mov	r1, r5
   d79c8:	4620      	mov	r0, r4
}
   d79ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d79ce:	f7fc bfa3 	b.w	d4918 <HAL_GPIO_Write>
   d79d2:	bd38      	pop	{r3, r4, r5, pc}

000d79d4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d79d4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d79d6:	b510      	push	{r4, lr}
   d79d8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d79da:	bf9c      	itt	ls
   d79dc:	340e      	addls	r4, #14
   d79de:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d79e0:	4620      	mov	r0, r4
   d79e2:	f7ff ffa9 	bl	d7938 <pinAvailable>
   d79e6:	b150      	cbz	r0, d79fe <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d79e8:	2103      	movs	r1, #3
   d79ea:	4620      	mov	r0, r4
   d79ec:	f7fc ff7c 	bl	d48e8 <HAL_Validate_Pin_Function>
   d79f0:	2803      	cmp	r0, #3
   d79f2:	d104      	bne.n	d79fe <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d79f4:	4620      	mov	r0, r4
}
   d79f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d79fa:	f7fc bf95 	b.w	d4928 <HAL_ADC_Read>
}
   d79fe:	2000      	movs	r0, #0
   d7a00:	bd10      	pop	{r4, pc}
	...

000d7a04 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7a04:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7a06:	4d0b      	ldr	r5, [pc, #44]	; (d7a34 <_Z19__fetch_global_Wirev+0x30>)
   d7a08:	6829      	ldr	r1, [r5, #0]
   d7a0a:	f011 0401 	ands.w	r4, r1, #1
   d7a0e:	d10f      	bne.n	d7a30 <_Z19__fetch_global_Wirev+0x2c>
   d7a10:	4628      	mov	r0, r5
   d7a12:	f7fc fb53 	bl	d40bc <__cxa_guard_acquire>
   d7a16:	b158      	cbz	r0, d7a30 <_Z19__fetch_global_Wirev+0x2c>
   d7a18:	4621      	mov	r1, r4
   d7a1a:	4807      	ldr	r0, [pc, #28]	; (d7a38 <_Z19__fetch_global_Wirev+0x34>)
   d7a1c:	f7fd fab6 	bl	d4f8c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7a20:	4628      	mov	r0, r5
   d7a22:	f7fc fb50 	bl	d40c6 <__cxa_guard_release>
   d7a26:	4a05      	ldr	r2, [pc, #20]	; (d7a3c <_Z19__fetch_global_Wirev+0x38>)
   d7a28:	4905      	ldr	r1, [pc, #20]	; (d7a40 <_Z19__fetch_global_Wirev+0x3c>)
   d7a2a:	4803      	ldr	r0, [pc, #12]	; (d7a38 <_Z19__fetch_global_Wirev+0x34>)
   d7a2c:	f000 f82c 	bl	d7a88 <__aeabi_atexit>
	return wire;
}
   d7a30:	4801      	ldr	r0, [pc, #4]	; (d7a38 <_Z19__fetch_global_Wirev+0x34>)
   d7a32:	bd38      	pop	{r3, r4, r5, pc}
   d7a34:	2003e714 	.word	0x2003e714
   d7a38:	2003e718 	.word	0x2003e718
   d7a3c:	2003e370 	.word	0x2003e370
   d7a40:	000d4f35 	.word	0x000d4f35

000d7a44 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7a44:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7a46:	4c0c      	ldr	r4, [pc, #48]	; (d7a78 <_GLOBAL__sub_I_SPI+0x34>)
   d7a48:	4e0c      	ldr	r6, [pc, #48]	; (d7a7c <_GLOBAL__sub_I_SPI+0x38>)
   d7a4a:	4d0d      	ldr	r5, [pc, #52]	; (d7a80 <_GLOBAL__sub_I_SPI+0x3c>)
   d7a4c:	2100      	movs	r1, #0
   d7a4e:	4620      	mov	r0, r4
   d7a50:	f7ff f9da 	bl	d6e08 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7a54:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7a56:	4c0b      	ldr	r4, [pc, #44]	; (d7a84 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7a58:	4632      	mov	r2, r6
   d7a5a:	4629      	mov	r1, r5
   d7a5c:	f000 f814 	bl	d7a88 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7a60:	2101      	movs	r1, #1
   d7a62:	4620      	mov	r0, r4
   d7a64:	f7ff f9d0 	bl	d6e08 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7a68:	4632      	mov	r2, r6
   d7a6a:	4629      	mov	r1, r5
   d7a6c:	4620      	mov	r0, r4
   d7a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7a72:	f000 b809 	b.w	d7a88 <__aeabi_atexit>
   d7a76:	bf00      	nop
   d7a78:	2003e72c 	.word	0x2003e72c
   d7a7c:	2003e370 	.word	0x2003e370
   d7a80:	000d6df9 	.word	0x000d6df9
   d7a84:	2003e73c 	.word	0x2003e73c

000d7a88 <__aeabi_atexit>:
   d7a88:	460b      	mov	r3, r1
   d7a8a:	4601      	mov	r1, r0
   d7a8c:	4618      	mov	r0, r3
   d7a8e:	f000 b967 	b.w	d7d60 <__cxa_atexit>

000d7a92 <_ZdlPvj>:
   d7a92:	f7fc bb04 	b.w	d409e <_ZdlPv>
	...

000d7a98 <_ZSt15get_new_handlerv>:
   d7a98:	4b02      	ldr	r3, [pc, #8]	; (d7aa4 <_ZSt15get_new_handlerv+0xc>)
   d7a9a:	6818      	ldr	r0, [r3, #0]
   d7a9c:	f3bf 8f5f 	dmb	sy
   d7aa0:	4770      	bx	lr
   d7aa2:	bf00      	nop
   d7aa4:	2003e74c 	.word	0x2003e74c

000d7aa8 <_ZnwjRKSt9nothrow_t>:
   d7aa8:	b510      	push	{r4, lr}
   d7aaa:	2800      	cmp	r0, #0
   d7aac:	bf14      	ite	ne
   d7aae:	4604      	movne	r4, r0
   d7ab0:	2401      	moveq	r4, #1
   d7ab2:	4620      	mov	r0, r4
   d7ab4:	f7fd f95e 	bl	d4d74 <malloc>
   d7ab8:	b920      	cbnz	r0, d7ac4 <_ZnwjRKSt9nothrow_t+0x1c>
   d7aba:	f7ff ffed 	bl	d7a98 <_ZSt15get_new_handlerv>
   d7abe:	b108      	cbz	r0, d7ac4 <_ZnwjRKSt9nothrow_t+0x1c>
   d7ac0:	4780      	blx	r0
   d7ac2:	e7f6      	b.n	d7ab2 <_ZnwjRKSt9nothrow_t+0xa>
   d7ac4:	bd10      	pop	{r4, pc}

000d7ac6 <_ZnajRKSt9nothrow_t>:
   d7ac6:	f7ff bfef 	b.w	d7aa8 <_ZnwjRKSt9nothrow_t>

000d7aca <_ZSt25__throw_bad_function_callv>:
   d7aca:	b508      	push	{r3, lr}
   d7acc:	f7fd f972 	bl	d4db4 <abort>

000d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7ad0:	4b24      	ldr	r3, [pc, #144]	; (d7b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7ad2:	681a      	ldr	r2, [r3, #0]
   d7ad4:	07d0      	lsls	r0, r2, #31
   d7ad6:	bf5c      	itt	pl
   d7ad8:	2201      	movpl	r2, #1
   d7ada:	601a      	strpl	r2, [r3, #0]
   d7adc:	4b22      	ldr	r3, [pc, #136]	; (d7b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7ade:	681a      	ldr	r2, [r3, #0]
   d7ae0:	07d1      	lsls	r1, r2, #31
   d7ae2:	bf5c      	itt	pl
   d7ae4:	2201      	movpl	r2, #1
   d7ae6:	601a      	strpl	r2, [r3, #0]
   d7ae8:	4b20      	ldr	r3, [pc, #128]	; (d7b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7aea:	681a      	ldr	r2, [r3, #0]
   d7aec:	07d2      	lsls	r2, r2, #31
   d7aee:	bf5c      	itt	pl
   d7af0:	2201      	movpl	r2, #1
   d7af2:	601a      	strpl	r2, [r3, #0]
   d7af4:	4b1e      	ldr	r3, [pc, #120]	; (d7b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7af6:	681a      	ldr	r2, [r3, #0]
   d7af8:	07d0      	lsls	r0, r2, #31
   d7afa:	bf5c      	itt	pl
   d7afc:	2201      	movpl	r2, #1
   d7afe:	601a      	strpl	r2, [r3, #0]
   d7b00:	4b1c      	ldr	r3, [pc, #112]	; (d7b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7b02:	681a      	ldr	r2, [r3, #0]
   d7b04:	07d1      	lsls	r1, r2, #31
   d7b06:	bf5c      	itt	pl
   d7b08:	2201      	movpl	r2, #1
   d7b0a:	601a      	strpl	r2, [r3, #0]
   d7b0c:	4b1a      	ldr	r3, [pc, #104]	; (d7b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7b0e:	681a      	ldr	r2, [r3, #0]
   d7b10:	07d2      	lsls	r2, r2, #31
   d7b12:	bf5c      	itt	pl
   d7b14:	2201      	movpl	r2, #1
   d7b16:	601a      	strpl	r2, [r3, #0]
   d7b18:	4b18      	ldr	r3, [pc, #96]	; (d7b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7b1a:	681a      	ldr	r2, [r3, #0]
   d7b1c:	07d0      	lsls	r0, r2, #31
   d7b1e:	bf5c      	itt	pl
   d7b20:	2201      	movpl	r2, #1
   d7b22:	601a      	strpl	r2, [r3, #0]
   d7b24:	4b16      	ldr	r3, [pc, #88]	; (d7b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7b26:	681a      	ldr	r2, [r3, #0]
   d7b28:	07d1      	lsls	r1, r2, #31
   d7b2a:	bf5c      	itt	pl
   d7b2c:	2201      	movpl	r2, #1
   d7b2e:	601a      	strpl	r2, [r3, #0]
   d7b30:	4b14      	ldr	r3, [pc, #80]	; (d7b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7b32:	681a      	ldr	r2, [r3, #0]
   d7b34:	07d2      	lsls	r2, r2, #31
   d7b36:	bf5c      	itt	pl
   d7b38:	2201      	movpl	r2, #1
   d7b3a:	601a      	strpl	r2, [r3, #0]
   d7b3c:	4b12      	ldr	r3, [pc, #72]	; (d7b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7b3e:	681a      	ldr	r2, [r3, #0]
   d7b40:	07d0      	lsls	r0, r2, #31
   d7b42:	bf5c      	itt	pl
   d7b44:	2201      	movpl	r2, #1
   d7b46:	601a      	strpl	r2, [r3, #0]
   d7b48:	4b10      	ldr	r3, [pc, #64]	; (d7b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7b4a:	681a      	ldr	r2, [r3, #0]
   d7b4c:	07d1      	lsls	r1, r2, #31
   d7b4e:	bf5c      	itt	pl
   d7b50:	2201      	movpl	r2, #1
   d7b52:	601a      	strpl	r2, [r3, #0]
   d7b54:	4b0e      	ldr	r3, [pc, #56]	; (d7b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7b56:	681a      	ldr	r2, [r3, #0]
   d7b58:	07d2      	lsls	r2, r2, #31
   d7b5a:	bf5c      	itt	pl
   d7b5c:	2201      	movpl	r2, #1
   d7b5e:	601a      	strpl	r2, [r3, #0]
   d7b60:	4770      	bx	lr
   d7b62:	bf00      	nop
   d7b64:	2003e77c 	.word	0x2003e77c
   d7b68:	2003e778 	.word	0x2003e778
   d7b6c:	2003e774 	.word	0x2003e774
   d7b70:	2003e770 	.word	0x2003e770
   d7b74:	2003e76c 	.word	0x2003e76c
   d7b78:	2003e768 	.word	0x2003e768
   d7b7c:	2003e764 	.word	0x2003e764
   d7b80:	2003e760 	.word	0x2003e760
   d7b84:	2003e75c 	.word	0x2003e75c
   d7b88:	2003e758 	.word	0x2003e758
   d7b8c:	2003e754 	.word	0x2003e754
   d7b90:	2003e750 	.word	0x2003e750

000d7b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7b94:	4b18      	ldr	r3, [pc, #96]	; (d7bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7b96:	681a      	ldr	r2, [r3, #0]
   d7b98:	07d1      	lsls	r1, r2, #31
   d7b9a:	bf5c      	itt	pl
   d7b9c:	2201      	movpl	r2, #1
   d7b9e:	601a      	strpl	r2, [r3, #0]
   d7ba0:	4b16      	ldr	r3, [pc, #88]	; (d7bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ba2:	681a      	ldr	r2, [r3, #0]
   d7ba4:	07d2      	lsls	r2, r2, #31
   d7ba6:	bf5c      	itt	pl
   d7ba8:	2201      	movpl	r2, #1
   d7baa:	601a      	strpl	r2, [r3, #0]
   d7bac:	4b14      	ldr	r3, [pc, #80]	; (d7c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7bae:	681a      	ldr	r2, [r3, #0]
   d7bb0:	07d0      	lsls	r0, r2, #31
   d7bb2:	bf5c      	itt	pl
   d7bb4:	2201      	movpl	r2, #1
   d7bb6:	601a      	strpl	r2, [r3, #0]
   d7bb8:	4b12      	ldr	r3, [pc, #72]	; (d7c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7bba:	681a      	ldr	r2, [r3, #0]
   d7bbc:	07d1      	lsls	r1, r2, #31
   d7bbe:	bf5c      	itt	pl
   d7bc0:	2201      	movpl	r2, #1
   d7bc2:	601a      	strpl	r2, [r3, #0]
   d7bc4:	4b10      	ldr	r3, [pc, #64]	; (d7c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7bc6:	681a      	ldr	r2, [r3, #0]
   d7bc8:	07d2      	lsls	r2, r2, #31
   d7bca:	bf5c      	itt	pl
   d7bcc:	2201      	movpl	r2, #1
   d7bce:	601a      	strpl	r2, [r3, #0]
   d7bd0:	4b0e      	ldr	r3, [pc, #56]	; (d7c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7bd2:	681a      	ldr	r2, [r3, #0]
   d7bd4:	07d0      	lsls	r0, r2, #31
   d7bd6:	bf5c      	itt	pl
   d7bd8:	2201      	movpl	r2, #1
   d7bda:	601a      	strpl	r2, [r3, #0]
   d7bdc:	4b0c      	ldr	r3, [pc, #48]	; (d7c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7bde:	681a      	ldr	r2, [r3, #0]
   d7be0:	07d1      	lsls	r1, r2, #31
   d7be2:	bf5c      	itt	pl
   d7be4:	2201      	movpl	r2, #1
   d7be6:	601a      	strpl	r2, [r3, #0]
   d7be8:	4b0a      	ldr	r3, [pc, #40]	; (d7c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7bea:	681a      	ldr	r2, [r3, #0]
   d7bec:	07d2      	lsls	r2, r2, #31
   d7bee:	bf5c      	itt	pl
   d7bf0:	2201      	movpl	r2, #1
   d7bf2:	601a      	strpl	r2, [r3, #0]
   d7bf4:	4770      	bx	lr
   d7bf6:	bf00      	nop
   d7bf8:	2003e79c 	.word	0x2003e79c
   d7bfc:	2003e798 	.word	0x2003e798
   d7c00:	2003e794 	.word	0x2003e794
   d7c04:	2003e790 	.word	0x2003e790
   d7c08:	2003e78c 	.word	0x2003e78c
   d7c0c:	2003e788 	.word	0x2003e788
   d7c10:	2003e784 	.word	0x2003e784
   d7c14:	2003e780 	.word	0x2003e780

000d7c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c18:	4b18      	ldr	r3, [pc, #96]	; (d7c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c1a:	681a      	ldr	r2, [r3, #0]
   d7c1c:	07d1      	lsls	r1, r2, #31
   d7c1e:	bf5c      	itt	pl
   d7c20:	2201      	movpl	r2, #1
   d7c22:	601a      	strpl	r2, [r3, #0]
   d7c24:	4b16      	ldr	r3, [pc, #88]	; (d7c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c26:	681a      	ldr	r2, [r3, #0]
   d7c28:	07d2      	lsls	r2, r2, #31
   d7c2a:	bf5c      	itt	pl
   d7c2c:	2201      	movpl	r2, #1
   d7c2e:	601a      	strpl	r2, [r3, #0]
   d7c30:	4b14      	ldr	r3, [pc, #80]	; (d7c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c32:	681a      	ldr	r2, [r3, #0]
   d7c34:	07d0      	lsls	r0, r2, #31
   d7c36:	bf5c      	itt	pl
   d7c38:	2201      	movpl	r2, #1
   d7c3a:	601a      	strpl	r2, [r3, #0]
   d7c3c:	4b12      	ldr	r3, [pc, #72]	; (d7c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c3e:	681a      	ldr	r2, [r3, #0]
   d7c40:	07d1      	lsls	r1, r2, #31
   d7c42:	bf5c      	itt	pl
   d7c44:	2201      	movpl	r2, #1
   d7c46:	601a      	strpl	r2, [r3, #0]
   d7c48:	4b10      	ldr	r3, [pc, #64]	; (d7c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c4a:	681a      	ldr	r2, [r3, #0]
   d7c4c:	07d2      	lsls	r2, r2, #31
   d7c4e:	bf5c      	itt	pl
   d7c50:	2201      	movpl	r2, #1
   d7c52:	601a      	strpl	r2, [r3, #0]
   d7c54:	4b0e      	ldr	r3, [pc, #56]	; (d7c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c56:	681a      	ldr	r2, [r3, #0]
   d7c58:	07d0      	lsls	r0, r2, #31
   d7c5a:	bf5c      	itt	pl
   d7c5c:	2201      	movpl	r2, #1
   d7c5e:	601a      	strpl	r2, [r3, #0]
   d7c60:	4b0c      	ldr	r3, [pc, #48]	; (d7c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c62:	681a      	ldr	r2, [r3, #0]
   d7c64:	07d1      	lsls	r1, r2, #31
   d7c66:	bf5c      	itt	pl
   d7c68:	2201      	movpl	r2, #1
   d7c6a:	601a      	strpl	r2, [r3, #0]
   d7c6c:	4b0a      	ldr	r3, [pc, #40]	; (d7c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c6e:	681a      	ldr	r2, [r3, #0]
   d7c70:	07d2      	lsls	r2, r2, #31
   d7c72:	bf5c      	itt	pl
   d7c74:	2201      	movpl	r2, #1
   d7c76:	601a      	strpl	r2, [r3, #0]
   d7c78:	4770      	bx	lr
   d7c7a:	bf00      	nop
   d7c7c:	2003e7bc 	.word	0x2003e7bc
   d7c80:	2003e7b8 	.word	0x2003e7b8
   d7c84:	2003e7b4 	.word	0x2003e7b4
   d7c88:	2003e7b0 	.word	0x2003e7b0
   d7c8c:	2003e7ac 	.word	0x2003e7ac
   d7c90:	2003e7a8 	.word	0x2003e7a8
   d7c94:	2003e7a4 	.word	0x2003e7a4
   d7c98:	2003e7a0 	.word	0x2003e7a0

000d7c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7c9c:	4b24      	ldr	r3, [pc, #144]	; (d7d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7c9e:	681a      	ldr	r2, [r3, #0]
   d7ca0:	07d0      	lsls	r0, r2, #31
   d7ca2:	bf5c      	itt	pl
   d7ca4:	2201      	movpl	r2, #1
   d7ca6:	601a      	strpl	r2, [r3, #0]
   d7ca8:	4b22      	ldr	r3, [pc, #136]	; (d7d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7caa:	681a      	ldr	r2, [r3, #0]
   d7cac:	07d1      	lsls	r1, r2, #31
   d7cae:	bf5c      	itt	pl
   d7cb0:	2201      	movpl	r2, #1
   d7cb2:	601a      	strpl	r2, [r3, #0]
   d7cb4:	4b20      	ldr	r3, [pc, #128]	; (d7d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7cb6:	681a      	ldr	r2, [r3, #0]
   d7cb8:	07d2      	lsls	r2, r2, #31
   d7cba:	bf5c      	itt	pl
   d7cbc:	2201      	movpl	r2, #1
   d7cbe:	601a      	strpl	r2, [r3, #0]
   d7cc0:	4b1e      	ldr	r3, [pc, #120]	; (d7d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7cc2:	681a      	ldr	r2, [r3, #0]
   d7cc4:	07d0      	lsls	r0, r2, #31
   d7cc6:	bf5c      	itt	pl
   d7cc8:	2201      	movpl	r2, #1
   d7cca:	601a      	strpl	r2, [r3, #0]
   d7ccc:	4b1c      	ldr	r3, [pc, #112]	; (d7d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7cce:	681a      	ldr	r2, [r3, #0]
   d7cd0:	07d1      	lsls	r1, r2, #31
   d7cd2:	bf5c      	itt	pl
   d7cd4:	2201      	movpl	r2, #1
   d7cd6:	601a      	strpl	r2, [r3, #0]
   d7cd8:	4b1a      	ldr	r3, [pc, #104]	; (d7d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7cda:	681a      	ldr	r2, [r3, #0]
   d7cdc:	07d2      	lsls	r2, r2, #31
   d7cde:	bf5c      	itt	pl
   d7ce0:	2201      	movpl	r2, #1
   d7ce2:	601a      	strpl	r2, [r3, #0]
   d7ce4:	4b18      	ldr	r3, [pc, #96]	; (d7d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7ce6:	681a      	ldr	r2, [r3, #0]
   d7ce8:	07d0      	lsls	r0, r2, #31
   d7cea:	bf5c      	itt	pl
   d7cec:	2201      	movpl	r2, #1
   d7cee:	601a      	strpl	r2, [r3, #0]
   d7cf0:	4b16      	ldr	r3, [pc, #88]	; (d7d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7cf2:	681a      	ldr	r2, [r3, #0]
   d7cf4:	07d1      	lsls	r1, r2, #31
   d7cf6:	bf5c      	itt	pl
   d7cf8:	2201      	movpl	r2, #1
   d7cfa:	601a      	strpl	r2, [r3, #0]
   d7cfc:	4b14      	ldr	r3, [pc, #80]	; (d7d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7cfe:	681a      	ldr	r2, [r3, #0]
   d7d00:	07d2      	lsls	r2, r2, #31
   d7d02:	bf5c      	itt	pl
   d7d04:	2201      	movpl	r2, #1
   d7d06:	601a      	strpl	r2, [r3, #0]
   d7d08:	4b12      	ldr	r3, [pc, #72]	; (d7d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7d0a:	681a      	ldr	r2, [r3, #0]
   d7d0c:	07d0      	lsls	r0, r2, #31
   d7d0e:	bf5c      	itt	pl
   d7d10:	2201      	movpl	r2, #1
   d7d12:	601a      	strpl	r2, [r3, #0]
   d7d14:	4b10      	ldr	r3, [pc, #64]	; (d7d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7d16:	681a      	ldr	r2, [r3, #0]
   d7d18:	07d1      	lsls	r1, r2, #31
   d7d1a:	bf5c      	itt	pl
   d7d1c:	2201      	movpl	r2, #1
   d7d1e:	601a      	strpl	r2, [r3, #0]
   d7d20:	4b0e      	ldr	r3, [pc, #56]	; (d7d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7d22:	681a      	ldr	r2, [r3, #0]
   d7d24:	07d2      	lsls	r2, r2, #31
   d7d26:	bf5c      	itt	pl
   d7d28:	2201      	movpl	r2, #1
   d7d2a:	601a      	strpl	r2, [r3, #0]
   d7d2c:	4770      	bx	lr
   d7d2e:	bf00      	nop
   d7d30:	2003e7ec 	.word	0x2003e7ec
   d7d34:	2003e7e8 	.word	0x2003e7e8
   d7d38:	2003e7e4 	.word	0x2003e7e4
   d7d3c:	2003e7e0 	.word	0x2003e7e0
   d7d40:	2003e7dc 	.word	0x2003e7dc
   d7d44:	2003e7d8 	.word	0x2003e7d8
   d7d48:	2003e7d4 	.word	0x2003e7d4
   d7d4c:	2003e7d0 	.word	0x2003e7d0
   d7d50:	2003e7cc 	.word	0x2003e7cc
   d7d54:	2003e7c8 	.word	0x2003e7c8
   d7d58:	2003e7c4 	.word	0x2003e7c4
   d7d5c:	2003e7c0 	.word	0x2003e7c0

000d7d60 <__cxa_atexit>:
   d7d60:	b510      	push	{r4, lr}
   d7d62:	4c05      	ldr	r4, [pc, #20]	; (d7d78 <__cxa_atexit+0x18>)
   d7d64:	4613      	mov	r3, r2
   d7d66:	b12c      	cbz	r4, d7d74 <__cxa_atexit+0x14>
   d7d68:	460a      	mov	r2, r1
   d7d6a:	4601      	mov	r1, r0
   d7d6c:	2002      	movs	r0, #2
   d7d6e:	f3af 8000 	nop.w
   d7d72:	bd10      	pop	{r4, pc}
   d7d74:	4620      	mov	r0, r4
   d7d76:	bd10      	pop	{r4, pc}
   d7d78:	00000000 	.word	0x00000000

000d7d7c <memcmp>:
   d7d7c:	b510      	push	{r4, lr}
   d7d7e:	3901      	subs	r1, #1
   d7d80:	4402      	add	r2, r0
   d7d82:	4290      	cmp	r0, r2
   d7d84:	d007      	beq.n	d7d96 <memcmp+0x1a>
   d7d86:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7d8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7d8e:	42a3      	cmp	r3, r4
   d7d90:	d0f7      	beq.n	d7d82 <memcmp+0x6>
   d7d92:	1b18      	subs	r0, r3, r4
   d7d94:	bd10      	pop	{r4, pc}
   d7d96:	2000      	movs	r0, #0
   d7d98:	bd10      	pop	{r4, pc}

000d7d9a <memcpy>:
   d7d9a:	b510      	push	{r4, lr}
   d7d9c:	1e43      	subs	r3, r0, #1
   d7d9e:	440a      	add	r2, r1
   d7da0:	4291      	cmp	r1, r2
   d7da2:	d004      	beq.n	d7dae <memcpy+0x14>
   d7da4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7da8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7dac:	e7f8      	b.n	d7da0 <memcpy+0x6>
   d7dae:	bd10      	pop	{r4, pc}

000d7db0 <memmove>:
   d7db0:	4288      	cmp	r0, r1
   d7db2:	b510      	push	{r4, lr}
   d7db4:	eb01 0302 	add.w	r3, r1, r2
   d7db8:	d801      	bhi.n	d7dbe <memmove+0xe>
   d7dba:	1e42      	subs	r2, r0, #1
   d7dbc:	e00b      	b.n	d7dd6 <memmove+0x26>
   d7dbe:	4298      	cmp	r0, r3
   d7dc0:	d2fb      	bcs.n	d7dba <memmove+0xa>
   d7dc2:	1881      	adds	r1, r0, r2
   d7dc4:	1ad2      	subs	r2, r2, r3
   d7dc6:	42d3      	cmn	r3, r2
   d7dc8:	d004      	beq.n	d7dd4 <memmove+0x24>
   d7dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7dce:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7dd2:	e7f8      	b.n	d7dc6 <memmove+0x16>
   d7dd4:	bd10      	pop	{r4, pc}
   d7dd6:	4299      	cmp	r1, r3
   d7dd8:	d004      	beq.n	d7de4 <memmove+0x34>
   d7dda:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7dde:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7de2:	e7f8      	b.n	d7dd6 <memmove+0x26>
   d7de4:	bd10      	pop	{r4, pc}

000d7de6 <memset>:
   d7de6:	4402      	add	r2, r0
   d7de8:	4603      	mov	r3, r0
   d7dea:	4293      	cmp	r3, r2
   d7dec:	d002      	beq.n	d7df4 <memset+0xe>
   d7dee:	f803 1b01 	strb.w	r1, [r3], #1
   d7df2:	e7fa      	b.n	d7dea <memset+0x4>
   d7df4:	4770      	bx	lr
	...

000d7df8 <srand>:
   d7df8:	b538      	push	{r3, r4, r5, lr}
   d7dfa:	4b12      	ldr	r3, [pc, #72]	; (d7e44 <srand+0x4c>)
   d7dfc:	681c      	ldr	r4, [r3, #0]
   d7dfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e00:	4605      	mov	r5, r0
   d7e02:	b9d3      	cbnz	r3, d7e3a <srand+0x42>
   d7e04:	2018      	movs	r0, #24
   d7e06:	f7fc ffb5 	bl	d4d74 <malloc>
   d7e0a:	f243 330e 	movw	r3, #13070	; 0x330e
   d7e0e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7e10:	8003      	strh	r3, [r0, #0]
   d7e12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7e16:	8043      	strh	r3, [r0, #2]
   d7e18:	f241 2334 	movw	r3, #4660	; 0x1234
   d7e1c:	8083      	strh	r3, [r0, #4]
   d7e1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7e22:	80c3      	strh	r3, [r0, #6]
   d7e24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7e28:	8103      	strh	r3, [r0, #8]
   d7e2a:	2305      	movs	r3, #5
   d7e2c:	8143      	strh	r3, [r0, #10]
   d7e2e:	230b      	movs	r3, #11
   d7e30:	8183      	strh	r3, [r0, #12]
   d7e32:	2201      	movs	r2, #1
   d7e34:	2300      	movs	r3, #0
   d7e36:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e3c:	2200      	movs	r2, #0
   d7e3e:	611d      	str	r5, [r3, #16]
   d7e40:	615a      	str	r2, [r3, #20]
   d7e42:	bd38      	pop	{r3, r4, r5, pc}
   d7e44:	2003e36c 	.word	0x2003e36c

000d7e48 <rand>:
   d7e48:	4b19      	ldr	r3, [pc, #100]	; (d7eb0 <rand+0x68>)
   d7e4a:	b510      	push	{r4, lr}
   d7e4c:	681c      	ldr	r4, [r3, #0]
   d7e4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e50:	b9d3      	cbnz	r3, d7e88 <rand+0x40>
   d7e52:	2018      	movs	r0, #24
   d7e54:	f7fc ff8e 	bl	d4d74 <malloc>
   d7e58:	f243 330e 	movw	r3, #13070	; 0x330e
   d7e5c:	63a0      	str	r0, [r4, #56]	; 0x38
   d7e5e:	8003      	strh	r3, [r0, #0]
   d7e60:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7e64:	8043      	strh	r3, [r0, #2]
   d7e66:	f241 2334 	movw	r3, #4660	; 0x1234
   d7e6a:	8083      	strh	r3, [r0, #4]
   d7e6c:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7e70:	80c3      	strh	r3, [r0, #6]
   d7e72:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7e76:	8103      	strh	r3, [r0, #8]
   d7e78:	2305      	movs	r3, #5
   d7e7a:	8143      	strh	r3, [r0, #10]
   d7e7c:	230b      	movs	r3, #11
   d7e7e:	8183      	strh	r3, [r0, #12]
   d7e80:	2201      	movs	r2, #1
   d7e82:	2300      	movs	r3, #0
   d7e84:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d7e8a:	4c0a      	ldr	r4, [pc, #40]	; (d7eb4 <rand+0x6c>)
   d7e8c:	690b      	ldr	r3, [r1, #16]
   d7e8e:	6948      	ldr	r0, [r1, #20]
   d7e90:	4a09      	ldr	r2, [pc, #36]	; (d7eb8 <rand+0x70>)
   d7e92:	435c      	muls	r4, r3
   d7e94:	fb02 4000 	mla	r0, r2, r0, r4
   d7e98:	fba3 2302 	umull	r2, r3, r3, r2
   d7e9c:	3201      	adds	r2, #1
   d7e9e:	4403      	add	r3, r0
   d7ea0:	f143 0300 	adc.w	r3, r3, #0
   d7ea4:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d7ea8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7eac:	bd10      	pop	{r4, pc}
   d7eae:	bf00      	nop
   d7eb0:	2003e36c 	.word	0x2003e36c
   d7eb4:	5851f42d 	.word	0x5851f42d
   d7eb8:	4c957f2d 	.word	0x4c957f2d

000d7ebc <strchr>:
   d7ebc:	b2c9      	uxtb	r1, r1
   d7ebe:	4603      	mov	r3, r0
   d7ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7ec4:	b11a      	cbz	r2, d7ece <strchr+0x12>
   d7ec6:	4291      	cmp	r1, r2
   d7ec8:	d1f9      	bne.n	d7ebe <strchr+0x2>
   d7eca:	4618      	mov	r0, r3
   d7ecc:	4770      	bx	lr
   d7ece:	2900      	cmp	r1, #0
   d7ed0:	bf0c      	ite	eq
   d7ed2:	4618      	moveq	r0, r3
   d7ed4:	2000      	movne	r0, #0
   d7ed6:	4770      	bx	lr

000d7ed8 <strchrnul>:
   d7ed8:	b510      	push	{r4, lr}
   d7eda:	4604      	mov	r4, r0
   d7edc:	f7ff ffee 	bl	d7ebc <strchr>
   d7ee0:	b918      	cbnz	r0, d7eea <strchrnul+0x12>
   d7ee2:	4620      	mov	r0, r4
   d7ee4:	f000 f80c 	bl	d7f00 <strlen>
   d7ee8:	4420      	add	r0, r4
   d7eea:	bd10      	pop	{r4, pc}

000d7eec <strcmp>:
   d7eec:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7ef4:	2a01      	cmp	r2, #1
   d7ef6:	bf28      	it	cs
   d7ef8:	429a      	cmpcs	r2, r3
   d7efa:	d0f7      	beq.n	d7eec <strcmp>
   d7efc:	1ad0      	subs	r0, r2, r3
   d7efe:	4770      	bx	lr

000d7f00 <strlen>:
   d7f00:	4603      	mov	r3, r0
   d7f02:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f06:	2a00      	cmp	r2, #0
   d7f08:	d1fb      	bne.n	d7f02 <strlen+0x2>
   d7f0a:	1a18      	subs	r0, r3, r0
   d7f0c:	3801      	subs	r0, #1
   d7f0e:	4770      	bx	lr

000d7f10 <strncmp>:
   d7f10:	b530      	push	{r4, r5, lr}
   d7f12:	b182      	cbz	r2, d7f36 <strncmp+0x26>
   d7f14:	1e45      	subs	r5, r0, #1
   d7f16:	3901      	subs	r1, #1
   d7f18:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7f1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7f20:	42a3      	cmp	r3, r4
   d7f22:	d106      	bne.n	d7f32 <strncmp+0x22>
   d7f24:	43ec      	mvns	r4, r5
   d7f26:	4414      	add	r4, r2
   d7f28:	42e0      	cmn	r0, r4
   d7f2a:	d001      	beq.n	d7f30 <strncmp+0x20>
   d7f2c:	2b00      	cmp	r3, #0
   d7f2e:	d1f3      	bne.n	d7f18 <strncmp+0x8>
   d7f30:	461c      	mov	r4, r3
   d7f32:	1b18      	subs	r0, r3, r4
   d7f34:	bd30      	pop	{r4, r5, pc}
   d7f36:	4610      	mov	r0, r2
   d7f38:	bd30      	pop	{r4, r5, pc}

000d7f3a <strnlen>:
   d7f3a:	b510      	push	{r4, lr}
   d7f3c:	4603      	mov	r3, r0
   d7f3e:	4401      	add	r1, r0
   d7f40:	428b      	cmp	r3, r1
   d7f42:	d004      	beq.n	d7f4e <strnlen+0x14>
   d7f44:	781a      	ldrb	r2, [r3, #0]
   d7f46:	1c5c      	adds	r4, r3, #1
   d7f48:	b10a      	cbz	r2, d7f4e <strnlen+0x14>
   d7f4a:	4623      	mov	r3, r4
   d7f4c:	e7f8      	b.n	d7f40 <strnlen+0x6>
   d7f4e:	1a18      	subs	r0, r3, r0
   d7f50:	bd10      	pop	{r4, pc}

000d7f52 <strrchr>:
   d7f52:	b538      	push	{r3, r4, r5, lr}
   d7f54:	4603      	mov	r3, r0
   d7f56:	460d      	mov	r5, r1
   d7f58:	b141      	cbz	r1, d7f6c <strrchr+0x1a>
   d7f5a:	2400      	movs	r4, #0
   d7f5c:	4629      	mov	r1, r5
   d7f5e:	4618      	mov	r0, r3
   d7f60:	f7ff ffac 	bl	d7ebc <strchr>
   d7f64:	b130      	cbz	r0, d7f74 <strrchr+0x22>
   d7f66:	1c43      	adds	r3, r0, #1
   d7f68:	4604      	mov	r4, r0
   d7f6a:	e7f7      	b.n	d7f5c <strrchr+0xa>
   d7f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7f70:	f7ff bfa4 	b.w	d7ebc <strchr>
   d7f74:	4620      	mov	r0, r4
   d7f76:	bd38      	pop	{r3, r4, r5, pc}

000d7f78 <strstr>:
   d7f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f7a:	7803      	ldrb	r3, [r0, #0]
   d7f7c:	b963      	cbnz	r3, d7f98 <strstr+0x20>
   d7f7e:	780b      	ldrb	r3, [r1, #0]
   d7f80:	2b00      	cmp	r3, #0
   d7f82:	bf18      	it	ne
   d7f84:	2000      	movne	r0, #0
   d7f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f88:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d7f8c:	b162      	cbz	r2, d7fa8 <strstr+0x30>
   d7f8e:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d7f92:	4297      	cmp	r7, r2
   d7f94:	4630      	mov	r0, r6
   d7f96:	d0f7      	beq.n	d7f88 <strstr+0x10>
   d7f98:	4603      	mov	r3, r0
   d7f9a:	1c46      	adds	r6, r0, #1
   d7f9c:	7800      	ldrb	r0, [r0, #0]
   d7f9e:	b110      	cbz	r0, d7fa6 <strstr+0x2e>
   d7fa0:	1e4d      	subs	r5, r1, #1
   d7fa2:	1e5c      	subs	r4, r3, #1
   d7fa4:	e7f0      	b.n	d7f88 <strstr+0x10>
   d7fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7fa8:	4618      	mov	r0, r3
   d7faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7fac <_strtol_r>:
   d7fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7fb0:	4680      	mov	r8, r0
   d7fb2:	4840      	ldr	r0, [pc, #256]	; (d80b4 <_strtol_r+0x108>)
   d7fb4:	f8d0 9000 	ldr.w	r9, [r0]
   d7fb8:	460f      	mov	r7, r1
   d7fba:	463d      	mov	r5, r7
   d7fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7fc0:	eb09 0004 	add.w	r0, r9, r4
   d7fc4:	7840      	ldrb	r0, [r0, #1]
   d7fc6:	f000 0008 	and.w	r0, r0, #8
   d7fca:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7fce:	b108      	cbz	r0, d7fd4 <_strtol_r+0x28>
   d7fd0:	462f      	mov	r7, r5
   d7fd2:	e7f2      	b.n	d7fba <_strtol_r+0xe>
   d7fd4:	2c2d      	cmp	r4, #45	; 0x2d
   d7fd6:	d103      	bne.n	d7fe0 <_strtol_r+0x34>
   d7fd8:	1cbd      	adds	r5, r7, #2
   d7fda:	787c      	ldrb	r4, [r7, #1]
   d7fdc:	2601      	movs	r6, #1
   d7fde:	e003      	b.n	d7fe8 <_strtol_r+0x3c>
   d7fe0:	2c2b      	cmp	r4, #43	; 0x2b
   d7fe2:	bf04      	itt	eq
   d7fe4:	787c      	ldrbeq	r4, [r7, #1]
   d7fe6:	1cbd      	addeq	r5, r7, #2
   d7fe8:	b113      	cbz	r3, d7ff0 <_strtol_r+0x44>
   d7fea:	2b10      	cmp	r3, #16
   d7fec:	d10a      	bne.n	d8004 <_strtol_r+0x58>
   d7fee:	e05b      	b.n	d80a8 <_strtol_r+0xfc>
   d7ff0:	2c30      	cmp	r4, #48	; 0x30
   d7ff2:	d157      	bne.n	d80a4 <_strtol_r+0xf8>
   d7ff4:	7828      	ldrb	r0, [r5, #0]
   d7ff6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7ffa:	2858      	cmp	r0, #88	; 0x58
   d7ffc:	d14d      	bne.n	d809a <_strtol_r+0xee>
   d7ffe:	786c      	ldrb	r4, [r5, #1]
   d8000:	2310      	movs	r3, #16
   d8002:	3502      	adds	r5, #2
   d8004:	2e00      	cmp	r6, #0
   d8006:	bf14      	ite	ne
   d8008:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d800c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8010:	2700      	movs	r7, #0
   d8012:	fbbc faf3 	udiv	sl, ip, r3
   d8016:	4638      	mov	r0, r7
   d8018:	fb03 cc1a 	mls	ip, r3, sl, ip
   d801c:	eb09 0e04 	add.w	lr, r9, r4
   d8020:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8024:	f01e 0f04 	tst.w	lr, #4
   d8028:	d001      	beq.n	d802e <_strtol_r+0x82>
   d802a:	3c30      	subs	r4, #48	; 0x30
   d802c:	e00b      	b.n	d8046 <_strtol_r+0x9a>
   d802e:	f01e 0e03 	ands.w	lr, lr, #3
   d8032:	d01b      	beq.n	d806c <_strtol_r+0xc0>
   d8034:	f1be 0f01 	cmp.w	lr, #1
   d8038:	bf0c      	ite	eq
   d803a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d803e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8042:	ebce 0404 	rsb	r4, lr, r4
   d8046:	42a3      	cmp	r3, r4
   d8048:	dd10      	ble.n	d806c <_strtol_r+0xc0>
   d804a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d804e:	d00a      	beq.n	d8066 <_strtol_r+0xba>
   d8050:	4550      	cmp	r0, sl
   d8052:	d806      	bhi.n	d8062 <_strtol_r+0xb6>
   d8054:	d101      	bne.n	d805a <_strtol_r+0xae>
   d8056:	4564      	cmp	r4, ip
   d8058:	dc03      	bgt.n	d8062 <_strtol_r+0xb6>
   d805a:	fb03 4000 	mla	r0, r3, r0, r4
   d805e:	2701      	movs	r7, #1
   d8060:	e001      	b.n	d8066 <_strtol_r+0xba>
   d8062:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8066:	f815 4b01 	ldrb.w	r4, [r5], #1
   d806a:	e7d7      	b.n	d801c <_strtol_r+0x70>
   d806c:	1c7b      	adds	r3, r7, #1
   d806e:	d10c      	bne.n	d808a <_strtol_r+0xde>
   d8070:	2e00      	cmp	r6, #0
   d8072:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8076:	bf14      	ite	ne
   d8078:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d807c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8080:	f8c8 3000 	str.w	r3, [r8]
   d8084:	b92a      	cbnz	r2, d8092 <_strtol_r+0xe6>
   d8086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d808a:	b106      	cbz	r6, d808e <_strtol_r+0xe2>
   d808c:	4240      	negs	r0, r0
   d808e:	b172      	cbz	r2, d80ae <_strtol_r+0x102>
   d8090:	b107      	cbz	r7, d8094 <_strtol_r+0xe8>
   d8092:	1e69      	subs	r1, r5, #1
   d8094:	6011      	str	r1, [r2, #0]
   d8096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d809a:	2430      	movs	r4, #48	; 0x30
   d809c:	2b00      	cmp	r3, #0
   d809e:	d1b1      	bne.n	d8004 <_strtol_r+0x58>
   d80a0:	2308      	movs	r3, #8
   d80a2:	e7af      	b.n	d8004 <_strtol_r+0x58>
   d80a4:	230a      	movs	r3, #10
   d80a6:	e7ad      	b.n	d8004 <_strtol_r+0x58>
   d80a8:	2c30      	cmp	r4, #48	; 0x30
   d80aa:	d0a3      	beq.n	d7ff4 <_strtol_r+0x48>
   d80ac:	e7aa      	b.n	d8004 <_strtol_r+0x58>
   d80ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80b2:	bf00      	nop
   d80b4:	2003e308 	.word	0x2003e308

000d80b8 <strtol>:
   d80b8:	4613      	mov	r3, r2
   d80ba:	460a      	mov	r2, r1
   d80bc:	4601      	mov	r1, r0
   d80be:	4802      	ldr	r0, [pc, #8]	; (d80c8 <strtol+0x10>)
   d80c0:	6800      	ldr	r0, [r0, #0]
   d80c2:	f7ff bf73 	b.w	d7fac <_strtol_r>
   d80c6:	bf00      	nop
   d80c8:	2003e36c 	.word	0x2003e36c

000d80cc <dynalib_user>:
   d80cc:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d80dc:	00000000                                ....

000d80e0 <_ZTVN5spark10LogHandlerE>:
	...
   d80f0:	000d40a9 000d40cd                       .@...@..

000d80f8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8100:	000d413d 000d4171 000d6095 000d40cf     =A..qA...`...@..
   d8110:	45574f50 464f2052 00000046 45534552     POWER OFF...RESE
   d8120:	6f500054 4e726577 6f007465 666f006e     T.PowerNet.on.of
   d8130:	6f740066 77506c67 65720072 00746573     f.toglPwr.reset.
   d8140:	2d203258 574f5020 4f205245 0a004646     X2 - POWER OFF..
   d8150:	72656c41 65732074 7420746e 656d206f     Alert sent to me
   d8160:	6e206873 6f777465 002e6b72 6961570a     sh network...Wai
   d8170:	676e6974 726f6620 776f7020 2e2e7265     ting for power..
   d8180:	0a000a2e 2d2d2d0a 2d2d2d2d 2d2d2d2d     .....-----------
   d8190:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   d81a0:	2d2d2d2d 0a2d2d2d 74694300 65583a79     -------..City:Xe
   d81b0:	326e6f6e 6f50000a 20726577 4f207369     non2..Power is O
   d81c0:	65530a4e 672d666c 72656e65 64657461     N.Self-generated
   d81d0:	776f7020 6c207265 6c657665 00203a73      power levels: .
   d81e0:	65776f50 73692072 46464f20 74754f0a     Power is OFF.Out
   d81f0:	72756f73 20646563 65776f70 656c2072     sourced power le
   d8200:	736c6576 34412f20 5000203a 7265776f     vels /A4: .Power
   d8210:	20736920 0a46464f 7374754f 6372756f      is OFF.Outsourc
   d8220:	70206465 7265776f 76656c20 20736c65     ed power levels 
   d8230:	3a33412f 500a0020 7265776f 70757320     /A3: ..Power sup
   d8240:	65696c70 79622064 67206120 69636172     plied by a graci
   d8250:	2073756f 6769656e 726f6268 754f0a00     ous neighbor..Ou
   d8260:	756f7374 64656372 776f7020 6c207265     tsourced power l
   d8270:	6c657665 00203a73 6f4f0a0a 20217370     evels: ...Oops! 
   d8280:	61656c50 70206573 24207961 54422035     Please pay $5 BT
   d8290:	6f662043 656d2072 206f7420 6b726f77     C for me to work
   d82a0:	61676120 20216e69 530a000a 2d666c65      again! ...Self-
   d82b0:	656e6567 65746172 6f702064 20726577     generated power 
   d82c0:	6576656c 2f20736c 203a3541 00315800     levels /A5: .X1.
   d82d0:	5f5f0a0a 5f5f5f5f 5f5f5f5f 5f5f5f5f     ..______________
   d82e0:	5f5f5f5f 5f5f5f5f 5f5f5f5f 5f5f5f5f     ________________
   d82f0:	45520a00 54554f52 20474e49 45574f50     ..REROUTING POWE
   d8300:	4f542052 00732520 0a003141 48207325     R TO %s.A1..%s H
   d8310:	4e207361 6f50206f 21726577 000a2021     as No Power!! ..
   d8320:	2d203258 53545220 20325800 3158202d     X2 - RTS.X2 - X1
   d8330:	53544320 20325800 3141202d 53544320      CTS.X2 - A1 CTS
   d8340:	00000000                                ....

000d8344 <_ZTVN5spark13EthernetClassE>:
	...
   d834c:	000d4f17 000d4f0d 000d4f03 000d4ef9     .O...O...O...N..
   d835c:	000d4eed 000d4ee1 000d4ed5 000d4ecd     .N...N...N...N..
   d836c:	000d4ec3 000d4eb9 000d6b29              .N...N..)k..

000d8378 <_ZTV7TwoWire>:
	...
   d8380:	000d4f35 000d4f7f 000d4f57 000d4f37     5O...O..WO..7O..
   d8390:	000d4f5f 000d4f67 000d4f6f 000d4f77     _O..gO..oO..wO..

000d83a0 <_ZTV9IPAddress>:
	...
   d83a8:	000d4fc9 000d4fb9 000d4fbb 00302e30     .O...O...O..0.0.
   d83b8:	736c6166 72740065 25006575 67250075     false.true.%u.%g
   d83c8:	6c756e00 2575006c 00783430              .null.u%04x.

000d83d4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d83dc:	000d5479 000d549f 000d5453 000d50f7     yT...T..ST...P..

000d83ec <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d83f4:	000d58f5 000d5909 000d6249 000d545b     .X...Y..Ib..[T..

000d8404 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d840c:	000d5475 000d54bb 000d580d 000d54c9     uT...T...X...T..
   d841c:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d842c:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d843c:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d844c:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d845c:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d846c:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d847c:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d848c:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d849c:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d84ac:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d84bc:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d84cc:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d84dc:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d84ec:	61700072 0063696e 006c6c61              r.panic.all.

000d84f8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d8500:	000d58c9 000d58e1 000d6095 000d40cf     .X...X...`...@..

000d8510 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d8518:	000d5477 000d54ad 000d5fbd 000d545d     wT...T..._..]T..

000d8528 <_ZTVN5spark9MeshClassE>:
	...
   d8530:	000d644d 000d6443 000d6439 000d642f     Md..Cd..9d../d..
   d8540:	000d6423 000d6417 000d640b 000d6403     #d...d...d...d..
   d8550:	000d63f9 000d63ef 000d6b29 33306666     .c...c..)k..ff03
   d8560:	3a313a3a 31303031 72697700 00676e69     ::1:1001.wiring.
   d8570:	73726170 61702065 74656b63 00642520     parse packet %d.
   d8580:	00316874 6873656d 00627570              th1.meshpub.

000d858c <_ZTVN5spark12NetworkClassE>:
	...
   d8594:	000d6ac1 000d6acb 000d6ad5 000d6adf     .j...j...j...j..
   d85a4:	000d6ae9 000d6af5 000d6b01 000d6b0d     .j...j...k...k..
   d85b4:	000d6b15 000d6b1f 000d6b29              .k...k..)k..

000d85c0 <_ZTV8SPIClass>:
	...
   d85c8:	000d6df9 000d6dfb 2b25005a 3a643330     .m...m..Z.%+03d:
   d85d8:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d85e8:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d85f8:	00000000                                ....

000d85fc <_ZTV3UDP>:
	...
   d8604:	000d75d5 000d75f9 000d6fb1 000d70db     .u...u...o...p..
   d8614:	000d6fa9 000d6fc7 000d6fe5 000d6fff     .o...o...o...o..
   d8624:	000d7023 000d70bf 000d73c1 000d7161     #p...p...s..aq..
   d8634:	000d72e1 000d6f91 000d7569 000d7265     .r...o..iu..er..
   d8644:	000d7199 000d7597 000d7105 000d6f9f     .q...u...q...o..
   d8654:	000d7141 000d6fa5 000d7001 fffffff0     Aq...o...p......
   d8664:	00000000 000d701b                       .....p..

000d866c <_ZTV11USARTSerial>:
	...
   d8674:	000d7625 000d7675 000d7683 000d6c09     %v..uv...v...l..
   d8684:	000d7639 000d765b 000d7647 000d766f     9v..[v..Gv..ov..
   d8694:	000d7627 000d762b                       'v..+v..

000d869c <_ZTV9USBSerial>:
	...
   d86a4:	000d7741 000d7791 000d779f 000d6c09     Aw...w...w...l..
   d86b4:	000d777d 000d7743 000d7759 000d778b     }w..Cw..Yw...w..
   d86c4:	000d776f 000d773d                       ow..=w..

000d86cc <_ZSt7nothrow>:
	...

000d86cd <_ctype_>:
   d86cd:	20202000 20202020 28282020 20282828     .         ((((( 
   d86dd:	20202020 20202020 20202020 20202020                     
   d86ed:	10108820 10101010 10101010 10101010      ...............
   d86fd:	04040410 04040404 10040404 10101010     ................
   d870d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d871d:	01010101 01010101 01010101 10101010     ................
   d872d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d873d:	02020202 02020202 02020202 10101010     ................
   d874d:	00000020 00000000 00000000 00000000      ...............
	...

000d87d0 <__sf_fake_stdin>:
	...

000d87f0 <__sf_fake_stdout>:
	...

000d8810 <__sf_fake_stderr>:
	...
   d8830:	00000043                                         C.

000d8832 <link_const_variable_data_end>:
	...

000d8834 <link_constructors_location>:
   d8834:	000d4761 	.word	0x000d4761
   d8838:	000d4e3d 	.word	0x000d4e3d
   d883c:	000d4f21 	.word	0x000d4f21
   d8840:	000d6085 	.word	0x000d6085
   d8844:	000d6a71 	.word	0x000d6a71
   d8848:	000d6bf5 	.word	0x000d6bf5
   d884c:	000d6ddd 	.word	0x000d6ddd
   d8850:	000d6f65 	.word	0x000d6f65
   d8854:	000d6f7d 	.word	0x000d6f7d
   d8858:	000d7a45 	.word	0x000d7a45
   d885c:	000d7ad1 	.word	0x000d7ad1
   d8860:	000d7b95 	.word	0x000d7b95
   d8864:	000d7c19 	.word	0x000d7c19
   d8868:	000d7c9d 	.word	0x000d7c9d

000d886c <link_constructors_end>:
   d886c:	00000000 	.word	0x00000000
